{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Util.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Types.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Reflection.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Int32.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Long.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Date.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/lib/big.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Decimal.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/RegExp.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/String.js","webpack:///.fable/Fulma.2.1.0/Elements/Notification.fs","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Option.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Seq.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Map.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Set.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/Array.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/List.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/AsyncBuilder.js","webpack:///.fable/Fable.Elmish.3.0.3/cmd.fs","webpack:///.fable/Thoth.Json.3.2.0/Types.fs","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/BigInt/n.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/BigInt/z.js","webpack:///E:/GitRepos/MetaTemp/.fable/fable-library.2.1.12/BigInt.js","webpack:///.fable/Thoth.Json.3.2.0/Decode.fs","webpack:///.fable/Fable.Promise.2.0.0/Promise.fs","webpack:///.fable/Fulma.2.1.0/Common.fs","webpack:///.fable/Fulma.2.1.0/Elements/Form/Control.fs","webpack:///.fable/Fulma.2.1.0/Elements/Form/Label.fs","webpack:///src/Client/ViewHelpers.fs","webpack:///.fable/Thoth.Json.3.2.0/Encode.fs","webpack:///.fable/Fable.Fetch.2.0.0/Fetch.fs","webpack:///.fable/Thoth.Fetch.1.0.0/Fetch.fs","webpack:///.fable/Fulma.2.1.0/Elements/Heading.fs","webpack:///.fable/Fulma.2.1.0/Layouts/Footer.fs","webpack:///.fable/Fulma.2.1.0/Elements/Form/Input.fs","webpack:///.fable/Fable.FontAwesome.2.0.0/FontAwesome.fs","webpack:///src/Client/App.fs","webpack:///.fable/Fable.Elmish.3.0.3/ring.fs","webpack:///.fable/Fable.Elmish.3.0.3/program.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/react.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/common.fs","webpack:///src/Client/Client.fs","webpack:///.fable/Fulma.2.1.0/Elements/Form/Help.fs","webpack:///.fable/Fulma.2.1.0/Elements/Image.fs"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","isDisposable","x","Dispose","padWithZeros","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","_classCallCheck","this","_createClass","idMap","has","set","count","stringHash","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","_typeof","GetHashCode","isArray","ar","Array","String","ArrayBuffer","isView","equalArraysWith","y","eq","equalArrays","equals","Equals","Date","compareDates","xtime","ytime","getTime","comparePrimitives","compareArraysWith","comp","compareArrays","compare","CompareTo","max","comparer","WeakMap","CaseRules","None","LowerFirst","changeCase","caseRule","charAt","toLowerCase","createObj","fields","fail","kvPair","Error","definedCaseRule","arguments","undefined","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","iterator","next","done","toJSON","err","return","uncurry","arity","f","a1","a2","a3","a4","a5","a6","a7","a8","curry","partialApply","args","concat","sameType","getPrototypeOf","constructor","declare","cons","superClass","subClass","writable","configurable","inherits","SystemObject","compareList","self","other","tail","res","head","List","Union","tag","_len","_key","recordToJson","record","getFieldNames","keys","recordEquals","thisNames","recordCompare","Record","_this","map","k","join","id","identityHash","from","cur","tmp","_this2","_this3","contents","Exception","msg","stack","message","getFSharpExceptionFieldNames","filter","FSharpException","_this4","fieldNames","_this5","arg1","arg2","arg3","CaseInfo","declaringType","Reflection_classCallCheck","TypeInfo","fullname","generics","cases","fullName","getGenerics","t1","t2","union","info","lastIndexOf","substr","gen","endsWith","getUnionCases","makeUnion","uci","values","expectedLength","_construct","_toConsumableArray","assertUnion","NumberStyles","getRange","unsigned","bitsize","isValid","style","exec","replace","_res","_slicedToArray","prefix","digits","getInvalidDigits","AllowHexSpecifier","getRadix","test","regexMatch","_regexMatch","sign","validResponse","tryParse","v","Number","parseInt","isNaN","_getRange2","umin","umax","_getRange4","min","parse","_a","wasm","WebAssembly","Instance","Module","Uint8Array","e","Long","low","high","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","op_UnaryNegation","TWO_PWR_32_DBL","fromInteger","xh","lowBits","highBits","pow_dbl","Math","pow","fromString","RangeError","indexOf","substring","radixToPower","size","op_Addition","op_Multiply","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","div","op_Division","rem1","op_Subtraction","rem","remDiv","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","op_LogicalNot","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","mul","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","numBits","op_RightShiftUnsigned","op_LeftShift","op_RightShift","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","op_Modulus","rem_u","rem_s","op_BitwiseAnd","fromBytes","bytes","le","fromBytesLE","fromBytesBE","dateOffsetToString","isMinus","minutes","abs","dateToHalfUTCString","half","toISOString","dateToStringWithCustomFormat","format","utc","match","rep","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","dateToStringWithOffset","dateWithOffset","dateToStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","getMilliseconds","dateToISOString","P","cmp","DP","RM","MAX_DP","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","UNDEFINED","NUMERIC","round","dp","rm","more","xc","unshift","pop","stringify","Big","z","isneg","yc","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","one","sqrt","toExponential","toFixed","toPrecision","sd","valueOf","_Big_","nl","search","version","Decimal","pattern","options","flags","RegExp","escape","fsFormatRegExp","formatRegExp","toHex","longToString","longFromBytes","hi","lo","toBytesLE","toBytesBE","printf","input","cont","createPrinter","strCopy","_len2","_key2","_i","arg","formatOnce","toText","str2","_","pad","precision","toUpperCase","plusPrefix","ch","padLeft","_len3","_key3","String_typeof","idx","padSymbol","decs","dateToString","delimiter","_len4","xs","_key4","isRight","postcode","reg","lastIndex","isMatch","Some","Option_classCallCheck","some","acceptNull","defaultArg","defaultValue","field","Result","toIterator","en","MoveNext","Current","append","ys","delay","firstDone","iters","unfold","iter","output","innerIter","hasFinished","collect","_defineProperty","empty","fold","acc","rangeNumber","first","step","last","singleton","skip","take","truncate","fst","MapTree$00602","MapTreeModule$002EMapIterator$00602","started","MapTreeModule$$$collapseLHS","$stack$$81","MapTreeModule$$$mkIterator","s$$5","MapTreeModule$$$current","i$$2","matchValue$$4","MapTreeModule$$$alreadyFinished","MapTreeModule$$$notStarted","MapTreeModule$002EmkIEnumerator$0027$00602","s$$6","MapTreeModule$$$mkIEnumerator","s$$7","MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C","i$$3","matchValue$$5","MapTreeModule$$$moveNext","Reset","FSharpMap","comparer$$17","tree","FSharpMap$$get_Tree","__$$5","Map_toConsumableArray","map$$1","kv","combineHash","x$$16","y$$3","res$$3","e$$1","activePatternResult3058","that","m2","res$$4","finished","e1","e2","matchValue$$7","kvp1","kvp2","c$$10","Compare","SetTree$00601","SetTreeModule$$$SetOne","SetTreeModule$$$SetNode","l$$1","r$$1","SetTreeModule$002ESetIterator$00601","SetTreeModule$$$collapseLHS","$stack$$49","SetTreeModule$$$mkIterator","s$$13","SetTreeModule$$$current","matchValue$$6","SetTreeModule$$$alreadyFinished","SetTreeModule$$$notStarted","SetTreeModule$002EmkIEnumerator$00601","s$$14","SetTreeModule$$$mkIEnumerator","s$$15","SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56","SetTreeModule$$$compare","comparer$$18","s1","s2","matchValue$$9","l1","l2","SetTreeModule$$$compareStacks","$target$$52","t1$$6","t2$$6","n1k","n2k","t1$$7","t2$$7","n1k$$1","n2k$$1","n2r","t1$$8","t2$$8","emp","n1k$$2","n1r","n2k$$2","t1$$9","t2$$9","n1k$$3","n1r$$1","n2k$$3","n2r$$1","t1$$10","t2$$10","n1k$$4","t1$$11","n1k$$5","n1l","n1r$$2","t1$$12","n2k$$4","t2$$11","n2k$$5","n2l","n2r$$2","t2$$12","matchValue$$8","c$$7","c$$8","c$$9","$l2$$59","$l2$$61","i$$1","SetTreeModule$$$moveNext","FSharpSet","comparer$$22","FSharpSet$$get_Comparer","__$$4","FSharpSet$$get_Tree","fill","target","targetIndex","f$$1","source$$1","cons$$2","len$$1","target$$2","i$$4","x$$1","initialize","count$$8","initializer","cons$$15","result$$6","i$$15","ofSeq","source$$7","cons$$31","ofList","source$$8","cons$$32","tryLast","_arg1$$4","$arg$$14","$arg$$15","$arg$$16","f$$2","state$$1","xs$$8","xs$$9","acc$$1","x$$6","foldBack","f$$3","xs$$10","state$$2","acc$$2","x$$7","xs$$12","fold$$1","acc$$3","x$$9","xs$$27","acc$$9","_arg1$$7","xs$$28","ys$$10","acc$$10","x$$15","f$$16","xs$$31","acc$$11","iterate","f$$24","xs$$46","unitVar0","x$$24","ofArray","xs$$50","col","res$$1","i$$9","f$$42","xs$$71","acc$$17","x$$37","Set_toConsumableArray","x$$22","y$$4","that$$1","OperationCanceledError","_Error","AsyncBuilder_classCallCheck","_getPrototypeOf","setPrototypeOf","_assertThisInitialized","_inherits","_wrapNativeSuper","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","AsyncBuilder","AsyncBuilder_createClass","computation1","computation2","Bind","generator","sequence","body","While","Delay","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","dispatch","cmd","List_iterate","Map","( .ctor )","BigNat","bound","BigNatModule$002EFFT$$$pow32","BigNatModule$002EFFT$$$maxTwoPower","Int32Array","BigNatModule$$$bound","n$$10","BigNatModule$$$coeff","n$$12","i$$5","BigNatModule$$$coeff64","n$$13","i$$6","BigNatModule$$$setCoeff","n$$14","i$$7","v$$4","BigNatModule$$$pow64","x$$23","n$$15","$n$$15$$11","BigNatModule$$$pow32","n$$16","BigNatModule$$$baseBits","BigNatModule$$$baseN","BigNatModule$$$baseNi64","BigNatModule$$$baseMaski64","BigNatModule$$$createN","b$$4","BigNatModule$$$normN","n$$18","bound$$1","na","findLeastBound","BigNatModule$$$boundInt","BigNatModule$$$boundInt64","BigNatModule$$$embed","x$$28","x$$29","r$$2","r$$3","i$$10","BigNatModule$$$one","BigNatModule$$$zero","BigNatModule$$$degree","n$$24","BigNatModule$$$isZero","p$$4","BigNatModule$$$equal","p$$7","q$$4","pa","qa","i$$22","check","BigNatModule$$$compare","p$$9","q$$6","pa$$2","qa$$2","i$$24","check$$2","BigNatModule$$$lt","p$$10","q$$7","BigNatModule$$$mulSchoolBookCarry","r$$12","k$$4","rak$$1","$k$$4$$43","BigNatModule$$$mulSchoolBookOneSmall","p$$16","q$$12","bp","r$$13","q$$13","i$$28","rak$$2","BigNatModule$$$mulSchoolBook","p$$18","q$$15","p$$15","q$$11","r$$11","rak","pSmall","qSmall","p$$17","q$$14","r$$14","ra","pa$$3","qa$$3","i$$29","pai$$1","k$$5","j$$1","qaj","rak$$3","BigNatModule$$$mulSchoolBookNeitherSmall","BigNatModule$002Eencoding","arg4","arg5","arg6","arg7","bigL","twoToBigL","bigK","bigN","split","splits","BigNatModule$$$mkEncoding","k$$6","bigK$$2","i$$30","BigNatModule$$$table","i$$32","i$$33","i$$34","BigNatModule$$$mul","p$$20","q$$17","BigNatModule$$$scaleSubInPlace","x$$57","a$$5","n$$30","xres","patternInput$$2","patternInput$$3","j$$4","z$$7","zLo","zHi","BigNatModule$$$scaleAddInPlace","x$$62","a$$8","n$$32","xres$$1","patternInput$$4","patternInput$$5","f$$4","j$$5","z$$8","zLo$$1","zHi$$1","BigNatModule$$$removeFactor","x$$67","a$$11","n$$34","patternInput$$6","f$$6","p$$8","pn","q$$5","qn","patternInput$$7","pa$$1","qa$$1","i$$23","pai","qai","check$$1","BigNatModule$$$divmod","b$$7","a$$12","x$$68","x$$27","array$$28","d$$6","p$$21","m$$2","n$$35","f$$7","BigNatModule$$$ofInt32","n$$41","BigNatModule$$$ofInt64","n$$42","x$$30","x$$31","r$$4","i$$11","BigNatModule$$$embed64","BigNatModule$$$toString","n$$45","degn","prior$$2","prior","k$$11","ten2k","$k$$11$$64","$ten2k$$65","route","digits$$4","isLeading","n$$46","_arg1$$3","ten2k$$1","prior$$1","patternInput$$13","digits$$2","n$$47","n$$19","i$$12","BigNatModule$$$eval32","n_toConsumableArray","BigNatModule$$$isSmall","n$$48","BigNatModule$$$getSmall","n$$49","BigInteger","signInt","BigInteger$$$$002Ector$$Z2BE94A1","BigInteger$$$nat$$Z67CCE57D","n$$1","BigNatModule$0024$0024$0024isSmall","BigNatModule$0024$0024$0024getSmall","smallLim","smallPosTab","BigInteger$$get_SignInt","BigInteger$$get_V","x$$2","BigInteger$$$op_Equality$$56F059C0","x$$3","matchValue","BigNatModule$0024$0024$0024equal","BigNatModule$0024$0024$0024isZero","BigInteger$$$op_LessThan$$56F059C0","x$$5","y$$2","matchValue$$1","BigNatModule$0024$0024$0024lt","BigInteger$$$$002Ector$$Z524259A4","n$$6","BigNatModule$0024$0024$0024ofInt32","BigNatModule$0024$0024$0024ofInt64","BigInteger$$$get_One","BigInteger$$$get_Two","two","BigInteger$$$get_Zero","zero","BigNatModule$0024$0024$0024toString","n$$17","res$$2","i$$8","BigNatModule$0024$0024$0024hash","obj$$1","n$$5","nn","BigInteger$0024$0024$0024get_Zero","BigInteger$0024$0024$0024get_One","BigInteger$0024$0024$0024get_Two","newLine","JSON","path","error","reason","genericMsg","fieldName","messages","Decode_toConsumableArray","decoder","errorToString","success","er","currentPath","List_tryLast","errors","unwrapWith","$this$$3","fieldValue","isUndefined","firstPath","firstValue","_arg1","List_fold","tupledArg","badPathError","curValue","Option_Result","ErrorReason","decodeMaybeNull","optional","builder","getters","List_ofSeq","List_length","List_map","__","required","f1","f2","then","Promise","reject","resolve","catch","PromiseBuilder$$$$002Ector","case","screen","getCaseName","level","getCaseTag","option","ofText","ToString","console","warn","display","toDisplayOnlyClass","ofInvisibleOnly","ofHiddenOnly","ofBackground","parser","baseClass","baseProps","AddClass","AddProps","prop","Props","Classes","props","List_append","cl","modifiers","parseModifiers","el","children","Common_toConsumableArray","AddModifiers","element","Common$002EGenericOptions$$ToReactElement$$Z6D3CD4B7","Common$002EGenericOptions$$$Parse$$9AE2F7C","state","Common$002EGenericOptions$$AddClass$$Z721C83C5","Color$$$ofColor","Reflection$$$getCaseName","Common$002EGenericOptions$$AddCaseName$$1505","isDisabled","Common$002EGenericOptions$$AddProp$$7BFEDA81","HTMLAttr","cb","DOMAttr","Common$002EGenericOptions$$AddProps$$416C4D0B","Common$002EGenericOptions$$AddModifiers$$5BB435D5","btnView","react","Button_toConsumableArray","htmlFor","Label_toConsumableArray","sep","components","ViewHelpers_toConsumableArray","List_foldBack","href","List_ofArray","space","url","init","fetch","response","status","statusText","Encode_toString","properties","PromiseBuilder$$Run$$212F1D4B","( builder@ )","PromiseBuilder$$Delay$$62FBFDE1","fetch$","_arg3","text","_arg4","Decode_fromString","Notification_toConsumableArray","classes","List_filter","cls","title","Heading_toConsumableArray","Heading_Option","Tile_toConsumableArray","tile","Tile_Option","Level_toConsumableArray","Container_toConsumableArray","type'","typ","ofType","disabled","valueOrDefault","Prop","placeholder","ref","Icon_toConsumableArray","std","booleans","complete","opt","faOptions","Icon","Size","Pull","HaveSpin","HavePulse","Rotation","Flip","IsInverse","FixedWidth","IsLi","StackSize","CustomClass","Border","faIcon","customClass","ofSize","baseElement","opts","displayIcon","FontAwesome_toConsumableArray","toIconOptions","fieldView","Field_toConsumableArray","Tag_toConsumableArray","Content_toConsumableArray","Common$$$parseOptions","Footer_toConsumableArray","Msg","LatLong","Required","Field","float$","Location","Decode_string","decoderForLatLong","LocationResponse","decoderForLocation","CrimeResponse","int$","WeatherResponse","weatherTypes","WeatherType$reflection","find","w","Reflection_name","String_replace","decoderForLocationResponse","tryFetchAs","Types$002ERequestProperties","Fetch_defineProperty","toJsonBody","Result$$$defaultValue","location","Fetch$$$tryFetchAs$$3D61DA8C","decoderForCrimeResponse","_arg2","crimes","decoderForWeatherResponse","WeatherType","weather","Report","content","notification","Notification_Option","height","width","wix","rix","items","rix'","item","ix","wix'","Seq_collect","setState","program","update","subscribe","view","syncDispatch","patternInput","rb","RingBuffer$00601$$$$002Ector$$Z524259A4","reentered","RingBuffer$00601$$Push$$2B595","nextMsg","Option_value","Cmd$$$exec","RingBuffer$00601$$Pop","Cmd$$$none","placeholderId","equal","Components$002ELazyView$00601","LazyProps$00601","lazyView2With","lastRequest","ProgramModule$$$withSetState","model","cancelAnimationFrame","requestAnimationFrame","react_dom","ProgramModule$$$view","document","getElementById","nextProps","_nextState","render","App_init","task","ofSuccess","ofError","ValidationError","Postcode","getResponse","arg0","$arg$$11","$arg$$13","Validation$$$isValidPostcode","ServerState","Hero_Option","Color$002EIColor","container","Container_Option","Modifier$002EIModifier","Screen","TextAlignment$002EOption","Hero_toConsumableArray","Field_div","label","Control_Option","Input_Option","IInputType","TextTransform$002EOption","ev","keyCode","KeyCode$$$enter","action","preventDefault","icon","Icon_Option","Size$002EISize","Fa$$$i","Fa$002EIconOption","controlView","Control_toConsumableArray","Help_Option","Help_toConsumableArray","Field_Option","Level_item","Button_button","Option","$target$$4","model$$3","latLong","Tag_List$002EOption","Tag_tag","Tag_Option","ancestor","Tile_parent","ISize","basicTile","Latitude","Longitude","childTile","h3","Town","h4","Region","DistanceToLondon","weatherReport","Weather","Item$002EOption","Image_Option","src","WeatherType$$get_Abbreviation","Image_toConsumableArray","String_format","AverageTemperature","Crimes","cleanData","Array_map","Crime","toLocaleUpperCase","Incidents","BarChart","layout","XAxis","type","YAxis","dataKey","Bar","footer","Content_content","Content_Option","safeComponents","prelude_onError","runWith","withReactBatchedUsing","Common$$$lazyView2With"],"mappings":"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","file":"app.4ef48862290b50e1b92d.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([222,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// tslint:disable:ban-types\n// Object.assign flattens getters and setters\n// See https://stackoverflow.com/questions/37054596/js-es5-how-to-assign-objects-with-setters-and-getters\nexport function extend(target, ...sources) {\n    for (const source of sources) {\n        for (const key of Object.keys(source)) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        }\n    }\n    return target;\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (typeof comparer.Compare === \"function\") {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n// TODO: Move these three methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (typeof x.GetHashCode === \"function\") {\n                return x.GetHashCode();\n            }\n            else if (isArray(x)) {\n                const ar = x;\n                const len = ar.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(ar[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(String(x));\n            }\n        }\n    }\n}\nexport function isArray(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\n// export function equalObjects(x: { [k: string]: any }, y: { [k: string]: any }): boolean {\n//   if (x == null) { return y == null; }\n//   if (y == null) { return false; }\n//   const xKeys = Object.keys(x);\n//   const yKeys = Object.keys(y);\n//   if (xKeys.length !== yKeys.length) {\n//     return false;\n//   }\n//   xKeys.sort();\n//   yKeys.sort();\n//   for (let i = 0; i < xKeys.length; i++) {\n//     if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (typeof x.Equals === \"function\") {\n        return x.Equals(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return false;\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nexport function compareObjects(x, y) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (typeof x.CompareTo === \"function\") {\n        return x.CompareTo(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && compareArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y);\n    }\n    else {\n        return 1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value) => {\n        if (value === void 0) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n};\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function createObj(fields, caseRule = CaseRules.None) {\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    const o = {};\n    const definedCaseRule = caseRule;\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (typeof kvPair.toJSON === \"function\") {\n            kvPair = kvPair.toJSON();\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    o[changeCase(kvPair[0], caseRule)] = true;\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    o[changeCase(kvPair[0], caseRule)] = value;\n                    break;\n                default:\n                    o[changeCase(kvPair[0], caseRule)] = kvPair.slice(1);\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            o[changeCase(kvPair, caseRule)] = true;\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return o;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    return isArray(col) ? col.length : col.size;\n}\nexport function clear(col) {\n    if (isArray(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return null;\n    }\n    // return (...args: any[]) => {\n    //   // In some cases there may be more arguments applied than necessary\n    //   // (e.g. index when mapping an array), discard them\n    //   args = args.slice(0, arity);\n    //   let res = f;\n    //   while (args.length > 0) {\n    //       const curArgs = args.splice(0, res.length);\n    //       res = res.apply(null, curArgs);\n    //   }\n    //   return res;\n    // };\n    switch (arity) {\n        case 2:\n            return (a1, a2) => f(a1)(a2);\n        case 3:\n            return (a1, a2, a3) => f(a1)(a2)(a3);\n        case 4:\n            return (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n        case 5:\n            return (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n        case 6:\n            return (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n        case 7:\n            return (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n        case 8:\n            return (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return null;\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return null;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(null, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(null, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(null, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(null, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(null, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\n","import { combineHashCodes, compare, compareArrays, equals, equalArrays, identityHash, structuralHash, numberHash } from \"./Util\";\nfunction sameType(x, y) {\n    return y != null && Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\n// Taken from Babel helpers\nfunction inherits(subClass, superClass) {\n    // if (typeof superClass !== \"function\" && superClass !== null) {\n    //   throw new TypeError(\n    //     \"Super expression must either be null or a function, not \" +\n    //       typeof superClass\n    //   );\n    // }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n    // if (superClass)\n    //   Object.setPrototypeOf\n    //     ? Object.setPrototypeOf(subClass, superClass)\n    //     : (subClass.__proto__ = superClass);\n}\nexport function declare(cons, superClass) {\n    inherits(cons, superClass || SystemObject);\n    return cons;\n}\nexport function SystemObject() {\n}\nSystemObject.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map(k => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nSystemObject.prototype.GetHashCode = function () {\n    return identityHash(this);\n};\nSystemObject.prototype.Equals = function (other) {\n    return this === other;\n};\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport function List(head, tail) {\n    this.head = head;\n    this.tail = tail;\n}\nList.prototype.toString = function () {\n    return \"[\" + Array.from(this).map(x => String(x)).join(\"; \") + \"]\";\n};\nList.prototype.toJSON = function () {\n    return Array.from(this);\n};\nList.prototype[Symbol.iterator] = function () {\n    let cur = this;\n    return {\n        next: () => {\n            const tmp = cur;\n            cur = cur.tail;\n            return { done: tmp.tail == null, value: tmp.head };\n        },\n    };\n};\nList.prototype.GetHashCode = function () {\n    const hashes = Array.from(this).map(structuralHash);\n    return combineHashCodes(hashes);\n};\nList.prototype.Equals = function (other) {\n    return compareList(this, other) === 0;\n};\nList.prototype.CompareTo = function (other) {\n    return compareList(this, other);\n};\nexport function Union(tag, name, ...fields) {\n    this.tag = tag | 0;\n    this.name = name;\n    this.fields = fields;\n}\nUnion.prototype.toString = function () {\n    const len = this.fields.length;\n    if (len === 0) {\n        return this.name;\n    }\n    else if (len === 1) {\n        return this.name + \" \" + String(this.fields[0]);\n    }\n    else {\n        return this.name + \" (\" + this.fields.map(x => String(x)).join(\",\") + \")\";\n    }\n};\nUnion.prototype.toJSON = function () {\n    return this.fields.length === 0\n        ? this.name\n        : [this.name].concat(this.fields);\n};\nUnion.prototype.GetHashCode = function () {\n    let hashes = this.fields.map(x => structuralHash(x));\n    hashes.splice(0, 0, numberHash(this.tag));\n    return combineHashCodes(hashes);\n};\nUnion.prototype.Equals = function (other) {\n    return this === other\n        || (sameType(this, other)\n            && this.tag === other.tag\n            && equalArrays(this.fields, other.fields));\n};\nUnion.prototype.CompareTo = function (other) {\n    if (this === other) {\n        return 0;\n    }\n    else if (!sameType(this, other)) {\n        return -1;\n    }\n    else if (this.tag === other.tag) {\n        return compareArrays(this.fields, other.fields);\n    }\n    else {\n        return this.tag < other.tag ? -1 : 1;\n    }\n};\nfunction recordToJson(record, getFieldNames) {\n    const o = {};\n    const keys = getFieldNames == null ? Object.keys(record) : getFieldNames(record);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = record[keys[i]];\n    }\n    return o;\n}\nfunction recordEquals(self, other, getFieldNames) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameType(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompare(self, other, getFieldNames) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameType(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport function Record() {\n}\nRecord.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map(k => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nRecord.prototype.toJSON = function () {\n    return recordToJson(this);\n};\nRecord.prototype.GetHashCode = function () {\n    const hashes = Object.keys(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nRecord.prototype.Equals = function (other) {\n    return recordEquals(this, other);\n};\nRecord.prototype.CompareTo = function (other) {\n    return recordCompare(this, other);\n};\nexport const FSharpRef = declare(function FSharpRef(contents) {\n    this.contents = contents;\n}, Record);\n// EXCEPTIONS\nexport const Exception = declare(function Exception(msg) {\n    this.stack = Error().stack;\n    this.message = msg;\n});\nexport function isException(x) {\n    return x instanceof Error || x instanceof Exception;\n}\nfunction getFSharpExceptionFieldNames(self) {\n    return Object.keys(self).filter(k => k !== \"message\" && k !== \"stack\");\n}\nexport const FSharpException = declare(function FSharpException() {\n    Exception.call(this);\n}, Exception);\nFSharpException.prototype.toString = function () {\n    const fieldNames = getFSharpExceptionFieldNames(this);\n    const len = fieldNames.length;\n    if (len === 0) {\n        return this.message;\n    }\n    else if (len === 1) {\n        return this.message + \" \" + String(this[fieldNames[0]]);\n    }\n    else {\n        return this.message + \" (\" + fieldNames.map(k => String(this[k])).join(\",\") + \")\";\n    }\n};\nFSharpException.prototype.toJSON = function () {\n    return recordToJson(this, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.GetHashCode = function () {\n    const hashes = getFSharpExceptionFieldNames(this).map(k => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nFSharpException.prototype.Equals = function (other) {\n    return recordEquals(this, other, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.CompareTo = function (other) {\n    return recordCompare(this, other, getFSharpExceptionFieldNames);\n};\nexport const MatchFailureException = declare(function MatchFailureException(arg1, arg2, arg3) {\n    this.arg1 = arg1;\n    this.arg2 = arg2 | 0;\n    this.arg3 = arg3 | 0;\n}, FSharpException);\nexport const Attribute = declare(function Attribute() { });\n","import { Record, Union } from \"./Types\";\nimport { compareArraysWith, equalArraysWith } from \"./Util\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, constructor, fields, cases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.constructor = constructor;\n        this.fields = fields;\n        this.cases = cases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n    CompareTo(other) {\n        return compare(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function equals(t1, t2) {\n    return t1.fullname === t2.fullname\n        && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n}\n// System.Type is not comparable in .NET, but let's implement this\n// in case users want to create a dictionary with types as keys\nexport function compare(t1, t2) {\n    if (t1.fullname !== t2.fullname) {\n        return t1.fullname < t2.fullname ? -1 : 1;\n    }\n    else {\n        return compareArraysWith(getGenerics(t1), getGenerics(t2), compare);\n    }\n}\nexport function type(fullname, generics) {\n    return new TypeInfo(fullname, generics);\n}\nexport function record(fullname, generics, constructor, fields) {\n    return new TypeInfo(fullname, generics, constructor, fields);\n}\nexport function union(fullname, generics, constructor, cases) {\n    const t = new TypeInfo(fullname, generics, constructor, null, () => cases().map((x, i) => typeof x === \"string\" ? new CaseInfo(t, i, x) : new CaseInfo(t, i, x[0], x[1])));\n    return t;\n}\nexport function tuple(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport const obj = new TypeInfo(\"System.Object\");\nexport const unit = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char = new TypeInfo(\"System.Char\");\nexport const string = new TypeInfo(\"System.String\");\nexport const bool = new TypeInfo(\"System.Boolean\");\nexport const int8 = new TypeInfo(\"System.SByte\");\nexport const uint8 = new TypeInfo(\"System.Byte\");\nexport const int16 = new TypeInfo(\"System.Int16\");\nexport const uint16 = new TypeInfo(\"System.UInt16\");\nexport const int32 = new TypeInfo(\"System.Int32\");\nexport const uint32 = new TypeInfo(\"System.UInt32\");\nexport const float32 = new TypeInfo(\"System.Single\");\nexport const float64 = new TypeInfo(\"System.Double\");\nexport const decimal = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    return isArray(t) ? t.generics[0] : null;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj));\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t)) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t)) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields.map((t, i) => [\"Data\" + i, t]);\n}\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return new uci.declaringType.constructor(uci.tag, uci.name, ...values);\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return new t.constructor(...values);\n}\nexport function makeTuple(values, t) {\n    return values;\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.name;\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n","export var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [_all, sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(\"_\", \"\"));\n    if (res != null) {\n        const [_all, sign, prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, 0];\n}\n","// Adapted from: https://github.com/dcodeIO/long.js/blob/f572e3a17d313730cf11eb838f6d2a5e31626f8a/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\n/* tslint:disable */\nimport { isValid } from \"./Int32\";\nimport { combineHashCodes } from \"./Util\";\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport default function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    return combineHashCodes([this.unsigned ? 1 : 0, this.high, this.low]);\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\nexport const neg = op_UnaryNegation;\nexport const not = op_LogicalNot;\nexport const add = op_Addition;\nexport const sub = op_Subtraction;\nexport const mul = op_Multiply;\nexport const div = op_Division;\nexport const mod = op_Modulus;\nexport const shl = op_LeftShift;\nexport const shr = op_RightShift;\nexport const and = op_BitwiseAnd;\nexport const or = op_BitwiseOr;\nexport const xor = op_ExclusiveOr;\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return op_UnaryNegation(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * @param {number} value\n * @param {boolean} unsigned\n * @param {number} kind\n * @returns {!Long}\n * @inner\n */\nexport function fromInteger(value, unsigned, kind) {\n    var x;\n    var xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6: x = value >>> 0;\n    }\n    return fromBits(x, xh >> 31, unsigned);\n}\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return op_UnaryNegation(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = op_Addition(op_Multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = op_Multiply(result, radixToPower);\n            result = op_Addition(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= maxValue.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits, maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, ZERO];\n}\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = op_Division($this, radixLong), rem1 = op_Subtraction(op_Multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(op_UnaryNegation($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = op_Division(rem, radixToPower), intval = toInt(op_Subtraction(rem, op_Multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(op_UnaryNegation($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value is negative.\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value differs from the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value is less than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Compares this Long's value with the specified's.\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(op_Subtraction($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Absolute value of the given number.\n */\nexport function abs($this) {\n    if (!$this.unsigned && isNegative($this))\n        return op_UnaryNegation($this);\n    else\n        return $this;\n}\n/**\n * Negates this Long's value.\n * @returns {!Long} Negated Long\n */\nexport function op_UnaryNegation($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return op_Addition(op_LogicalNot($this), ONE);\n}\n;\n/**\n * Returns the sum of this and the specified Long.\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function op_Addition($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function op_Subtraction($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return op_Addition($this, op_UnaryNegation(subtrahend));\n}\n;\n/**\n * Returns the product of this and the specified Long.\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function op_Multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return op_Multiply(op_UnaryNegation($this), op_UnaryNegation(multiplier));\n        else\n            return op_UnaryNegation(op_Multiply(op_UnaryNegation($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return op_UnaryNegation(op_Multiply($this, op_UnaryNegation(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function op_Division($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = op_RightShift($this, 1);\n                approx = op_LeftShift(op_Division(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = op_Subtraction($this, op_Multiply(divisor, approx));\n                    res = op_Addition(approx, op_Division(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return op_Division(op_UnaryNegation($this), op_UnaryNegation(divisor));\n            return op_UnaryNegation(op_Division(op_UnaryNegation($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return op_UnaryNegation(op_Division($this, op_UnaryNegation(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, op_RightShiftUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = op_Multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = op_Multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = op_Addition(res, approxRes);\n        rem = op_Subtraction(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long modulo the specified.\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function op_Modulus($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return op_Subtraction($this, op_Multiply(op_Division($this, divisor), divisor));\n}\n;\n/**\n * Returns the bitwise NOT of this Long.\n * @returns {!Long}\n */\nexport function op_LogicalNot($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseAnd($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_BitwiseOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function op_ExclusiveOr($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_LeftShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShift($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function op_RightShiftUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Converts this Long to signed.\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const zero = unsigned ? UZERO : ZERO;\n    return (x) => greaterThan(step, zero) && lessThanOrEqual(x, last)\n        || lessThan(step, zero) && greaterThanOrEqual(x, last)\n        ? [x, op_Addition(x, step)] : null;\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = match;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n        }\n        if (rep !== match && rep < 10 && match.length > 1) {\n            rep = \"0\" + rep;\n        }\n        return rep;\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    const d = new Date(date.getTime() + date.offset);\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(date.offset);\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, date.offset);\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport default function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + date.offset, kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(str) {\n    let date = new Date(str);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(str);\n        if (m != null) {\n            let baseDate = null;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds = parseInt(timeParts[0], 10) * 3600 +\n                    parseInt(timeParts[1] || \"0\", 10) * 60 +\n                    parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v) {\n    try {\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, minValue()];\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    return DateTime(d.getTime() + ts, d.kind);\n}\nexport function addDays(d, v) {\n    return DateTime(d.getTime() + v * 86400000, d.kind);\n}\nexport function addHours(d, v) {\n    return DateTime(d.getTime() + v * 3600000, d.kind);\n}\nexport function addMinutes(d, v) {\n    return DateTime(d.getTime() + v * 60000, d.kind);\n}\nexport function addSeconds(d, v) {\n    return DateTime(d.getTime() + v * 1000, d.kind);\n}\nexport function addMilliseconds(d, v) {\n    return DateTime(d.getTime() + v, d.kind);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? DateTime(d.getTime() - that, d.kind)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\n","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 20, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -7, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 21, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros.\n    for (i = 0; i < nl && n.charAt(i) == '0';)\n        ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        // Determine trailing zeros.\n        for (; nl > 0 && n.charAt(--nl) == '0';)\n            ;\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading/trailing zeros.\n        for (e = 0; i <= nl;)\n            x.c[e++] = +n.charAt(i++);\n    }\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n    // Compare digit by digit.\n    for (i = -1; ++i < j;) {\n        if (xc[i] != yc[i])\n            return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    }\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var x = this, Big = x.constructor, a = x.c, // dividend\n    b = (y = new Big(y)).c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var x = this, one = new x.constructor(1), y = one, isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, x = this, Big = x.constructor, s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, x = this, Big = x.constructor, xc = x.c, yc = (y = new Big(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n","import Decimal from \"./lib/big\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, x.cmp(0) >= 0 ? 1 /* ROUND_HALF_UP */ : 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str) {\n    try {\n        return [true, new Decimal(str.trim())];\n    }\n    catch (_a) {\n        return [false, get_Zero];\n    }\n}\nexport function parse(str) {\n    const [ok, value] = tryParse(str);\n    if (ok) {\n        return value;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (const d of dec) {\n        let val = d;\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + val | 0;\n            hex[i] = digit & 0xF;\n            val = digit >> 4;\n        }\n        if (val !== 0) {\n            hex[hexCount++] = val;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (const d of hex) {\n        let carry = d;\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits.reverse(), bitSize);\n    const sign = isNegative ? \"-\" : \"\";\n    const pos = scale & 0x7F;\n    let decStr = \"\";\n    for (let i = 0; i < decDigits.length; i++) {\n        if (i === pos) {\n            decStr = \".\" + decStr;\n        }\n        decStr = \"0123456789\".charAt(decDigits[i]) + decStr;\n    }\n    const d = new Decimal(sign + decStr);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const pos = decStr.indexOf(\".\");\n    const scale = (pos < 0) ? 0 : decStr.length - pos - 1;\n    const signExp = ((scale & 0x7F) << 16) * d.s;\n    return [low, mid, high, signExp];\n}\n","export function create(pattern, options) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit !== 0) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            for (let i = 0; i < len - 2; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[len - 2];\n            match.input = arguments[len - 1];\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        // $0 doesn't work with JS regex, see #1155\n        replacement = replacement.replace(/\\$0/g, (s) => \"$&\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date\";\nimport Decimal from \"./Decimal\";\nimport Long, { fromBytes as longFromBytes, toBytes as longToBytes, toString as longToString } from \"./Long\";\nimport { escape } from \"./RegExp\";\nconst fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:(.+?))?\\}/g;\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return longToString(x.unsigned ? x : longFromBytes(longToBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return arg.cont((x) => { console.log(x); });\n}\nexport function toConsoleError(arg) {\n    return arg.cont((x) => { console.error(x); });\n}\nexport function toText(arg) {\n    return arg.cont((x) => x);\n}\nexport function toFail(arg) {\n    return arg.cont((x) => { throw new Error(x); });\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, pad, precision, format) => {\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                rep = Number(rep).toFixed(precision || 6);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = Number(rep).toPrecision(precision);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = Number(rep).toExponential(precision);\n                break;\n            case \"O\":\n            case \"A\":\n                rep = String(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n        }\n        const plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep, 10) >= 0;\n        pad = parseInt(pad, 10);\n        if (!isNaN(pad)) {\n            const ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\n            rep = padLeft(String(rep), Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\n        }\n        const once = prefix + (plusPrefix ? \"+\" + rep : rep);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (match, idx, pad, pattern) => {\n        let rep = args[idx];\n        let padSymbol = \" \";\n        if (typeof rep === \"number\" || rep instanceof Long || rep instanceof Decimal) {\n            switch ((pattern || \"\").substring(0, 1)) {\n                case \"f\":\n                case \"F\":\n                    rep = pattern.length > 1 ? rep.toFixed(pattern.substring(1)) : rep.toFixed(2);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = pattern.length > 1 ? rep.toPrecision(pattern.substring(1)) : rep.toPrecision();\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = pattern.length > 1 ? rep.toExponential(pattern.substring(1)) : rep.toExponential();\n                    break;\n                case \"p\":\n                case \"P\":\n                    rep = (pattern.length > 1 ? (rep * 100).toFixed(pattern.substring(1)) : (rep * 100).toFixed(2)) + \" %\";\n                    break;\n                case \"x\":\n                    rep = toHex(rep);\n                    break;\n                case \"X\":\n                    rep = toHex(rep).toUpperCase();\n                    break;\n                default:\n                    const m = /^(0+)(\\.0+)?$/.exec(pattern);\n                    if (m != null) {\n                        let decs = 0;\n                        if (m[2] != null) {\n                            rep = rep.toFixed(decs = m[2].length - 1);\n                        }\n                        pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\n                        padSymbol = \"0\";\n                    }\n                    else if (pattern) {\n                        rep = pattern;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern);\n        }\n        pad = parseInt((pad || \"\").substring(1), 10);\n        if (!isNaN(pad)) {\n            rep = padLeft(String(rep), Math.abs(pad), padSymbol, pad < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function join(delimiter, ...xs) {\n    return xs.map((x) => String(x)).join(delimiter);\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return join(delimiter, ...xs.slice(startIndex, endIndexPlusOne));\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). Trims braces. */\nexport function validateGuid(str, doNotThrow) {\n    const trimmedAndLowered = trim(str, \"{\", \"}\").toLowerCase();\n    if (guidRegex.test(trimmedAndLowered)) {\n        return doNotThrow ? [true, trimmedAndLowered] : trimmedAndLowered;\n    }\n    else if (doNotThrow) {\n        return [false, \"00000000-0000-0000-0000-000000000000\"];\n    }\n    throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    return _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : null;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : null;\n    if (count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Notification =\n\n    type Option =\n        | Color of IColor\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"notification\"></div>\n    let notification (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Color color -> ofColor color |> result.AddClass\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"notification\").ToReactElement(div, children)\n\n    /// Generate <button class=\"delete\"></button>\n    let delete (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"delete\").ToReactElement(button, children)\n","import { declare, Union } from \"./Types\";\nimport { compare, equals, structuralHash } from \"./Util\";\n// Options are erased in runtime by Fable, but we have\n// the `Some` type below to wrap values that would evaluate\n// to null in runtime. These two rules must be followed:\n// 1- None is always null in runtime, a non-strict null check\n//    (`x == null`) is enough to check the case of an option.\n// 2- To get the value of an option the `getValue` helper\n//    below must **always** be used.\n// export type Option<T> = T | Some<T>;\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    toJSON() {\n        return this.value;\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        return other == null\n            ? false\n            : equals(this.value, other instanceof Some ? other.value : other);\n    }\n    CompareTo(other) {\n        return other == null\n            ? 1\n            : compare(this.value, other instanceof Some ? other.value : other);\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x, acceptNull) {\n    if (x == null) {\n        if (!acceptNull) {\n            throw new Error(\"Option has no value\");\n        }\n        return null;\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function defaultArg(arg, defaultValue, f) {\n    return arg == null ? defaultValue : (f != null ? f(value(arg)) : value(arg));\n}\nexport function defaultArgWith(arg, defThunk) {\n    return arg == null ? defThunk() : value(arg);\n}\nexport function filter(predicate, arg) {\n    return arg != null ? (!predicate(value(arg)) ? null : arg) : arg;\n}\n// CHOICE\nexport const Choice = declare(function Choice(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function choice1(x) {\n    return new Choice(0, \"Choice1Of2\", x);\n}\nexport function choice2(x) {\n    return new Choice(1, \"Choice2Of2\", x);\n}\nexport function tryValueIfChoice1(x) {\n    return x.tag === 0 ? some(x.fields[0]) : null;\n}\nexport function tryValueIfChoice2(x) {\n    return x.tag === 1 ? some(x.fields[0]) : null;\n}\n// RESULT\nexport const Result = declare(function Result(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function ok(x) {\n    return new Result(0, \"Ok\", x);\n}\nexport function error(x) {\n    return new Result(1, \"Error\", x);\n}\nexport function mapOk(f, result) {\n    return result.tag === 0 ? ok(f(result.fields[0])) : result;\n}\nexport function mapError(f, result) {\n    return result.tag === 1 ? error(f(result.fields[0])) : result;\n}\nexport function bindOk(f, result) {\n    return result.tag === 0 ? f(result.fields[0]) : result;\n}\n","import { makeRangeStepFunction } from \"./Long\";\nimport { some, value } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() {\n        return this.current;\n    }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            let cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? value(nonZero) : length(xs) - length(ys);\n}\nexport function delay(f) {\n    return {\n        [Symbol.iterator]: () => f()[Symbol.iterator](),\n    };\n}\nexport function empty() {\n    return unfold(() => void 0);\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? some(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => f(x), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => f(x, y), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => f(i, x), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => f(i, x, y), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? null : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan((last, next) => [last[1], next], [0, 0], xs));\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return [y];\n}\nexport function skip(n, xs) {\n    return {\n        [Symbol.iterator]: () => {\n            const iter = xs[Symbol.iterator]();\n            for (let i = 1; i <= n; i++) {\n                if (iter.next().done) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return iter;\n        },\n    };\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    return {\n        [Symbol.iterator]: () => iter,\n    };\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return {\n        [Symbol.iterator]: () => {\n            // Capture a copy of the first value in the closure\n            // so the sequence is restarted every time, see #1230\n            let acc = fst;\n            return {\n                next: () => {\n                    const res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                },\n            };\n        },\n    };\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return {\n        [Symbol.iterator]: () => {\n            let window = [];\n            const iter = source[Symbol.iterator]();\n            return {\n                next: () => {\n                    let cur;\n                    while (window.length < windowSize) {\n                        if ((cur = iter.next()).done) {\n                            return { done: true };\n                        }\n                        window.push(cur.value);\n                    }\n                    const value = window;\n                    window = window.slice(1);\n                    return { done: false, value };\n                },\n            };\n        },\n    };\n}\n","import { Record, List, declare, Union } from \"./Types\";\nimport { type, record, bool, list, union, int32 } from \"./Reflection\";\nimport { value as value$$3, some } from \"./Option\";\nimport { iterate as iterate$$1, empty as empty$$1, toIterator, map as map$$1, unfold, getEnumerator, fold as fold$$1 } from \"./Seq\";\nimport { compare, structuralHash, isDisposable } from \"./Util\";\nimport { join, toText, printf } from \"./String\";\nexport const MapTree$00602 = declare(function Map_MapTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function MapTree$00602$reflection($gen$$3, $gen$$4) {\n  return union(\"Map.MapTree`2\", [$gen$$3, $gen$$4], MapTree$00602, () => [\"MapEmpty\", [\"MapOne\", [$gen$$3, $gen$$4]], [\"MapNode\", [$gen$$3, $gen$$4, MapTree$00602$reflection($gen$$3, $gen$$4), MapTree$00602$reflection($gen$$3, $gen$$4), int32]]]);\n}\nexport function MapTreeModule$$$sizeAux(acc, m) {\n  MapTreeModule$$$sizeAux: while (true) {\n    switch (m.tag) {\n      case 1:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 2:\n        {\n          const r = m.fields[3];\n          const l = m.fields[2];\n          const $acc$$5 = acc;\n          acc = MapTreeModule$$$sizeAux($acc$$5 + 1, l);\n          m = r;\n          continue MapTreeModule$$$sizeAux;\n        }\n\n      default:\n        {\n          return acc | 0;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$size(x) {\n  return MapTreeModule$$$sizeAux(0, x);\n}\nexport function MapTreeModule$$$empty() {\n  return new MapTree$00602(0, \"MapEmpty\");\n}\nexport function MapTreeModule$$$height(_arg1) {\n  switch (_arg1.tag) {\n    case 1:\n      {\n        return 1;\n      }\n\n    case 2:\n      {\n        const h = _arg1.fields[4] | 0;\n        return h | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport function MapTreeModule$$$isEmpty(m$$1) {\n  if (m$$1.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function MapTreeModule$$$mk(l$$1, k, v, r$$1) {\n  const matchValue = [l$$1, r$$1];\n  var $target$$6;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$6 = 0;\n    } else {\n      $target$$6 = 1;\n    }\n  } else {\n    $target$$6 = 1;\n  }\n\n  switch ($target$$6) {\n    case 0:\n      {\n        return new MapTree$00602(1, \"MapOne\", k, v);\n      }\n\n    case 1:\n      {\n        const hl = MapTreeModule$$$height(l$$1) | 0;\n        const hr = MapTreeModule$$$height(r$$1) | 0;\n        const m$$2 = (hl < hr ? hr : hl) | 0;\n        return new MapTree$00602(2, \"MapNode\", k, v, l$$1, r$$1, m$$2 + 1);\n      }\n  }\n}\nexport function MapTreeModule$$$rebalance(t1, k$$1, v$$1, t2) {\n  const t1h = MapTreeModule$$$height(t1) | 0;\n  const t2h = MapTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + 2) {\n    if (t2.tag === 2) {\n      const t2v = t2.fields[1];\n      const t2r = t2.fields[3];\n      const t2l = t2.fields[2];\n      const t2k = t2.fields[0];\n\n      if (MapTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 2) {\n          const t2lv = t2l.fields[1];\n          const t2lr = t2l.fields[3];\n          const t2ll = t2l.fields[2];\n          const t2lk = t2l.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2ll), t2lk, t2lv, MapTreeModule$$$mk(t2lr, t2k, t2v, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2l), t2k, t2v, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + 2) {\n    if (t1.tag === 2) {\n      const t1v = t1.fields[1];\n      const t1r = t1.fields[3];\n      const t1l = t1.fields[2];\n      const t1k = t1.fields[0];\n\n      if (MapTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 2) {\n          const t1rv = t1r.fields[1];\n          const t1rr = t1r.fields[3];\n          const t1rl = t1r.fields[2];\n          const t1rk = t1r.fields[0];\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1l, t1k, t1v, t1rl), t1rk, t1rv, MapTreeModule$$$mk(t1rr, k$$1, v$$1, t2));\n        } else {\n          throw new Error(\"re  balance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(t1l, t1k, t1v, MapTreeModule$$$mk(t1r, k$$1, v$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return MapTreeModule$$$mk(t1, k$$1, v$$1, t2);\n  }\n}\nexport function MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3) {\n  switch (m$$3.tag) {\n    case 1:\n      {\n        const k2 = m$$3.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, new MapTree$00602(0, \"MapEmpty\"), m$$3, 2);\n        } else if (c === 0) {\n          return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n        } else {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3, new MapTree$00602(0, \"MapEmpty\"), 2);\n        }\n      }\n\n    case 2:\n      {\n        const v2 = m$$3.fields[1];\n        const r$$2 = m$$3.fields[3];\n        const l$$2 = m$$3.fields[2];\n        const k2$$1 = m$$3.fields[0];\n        const h$$1 = m$$3.fields[4] | 0;\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$add(comparer, k$$2, v$$2, l$$2), k2$$1, v2, r$$2);\n        } else if (c$$1 === 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, l$$2, r$$2, h$$1);\n        } else {\n          return MapTreeModule$$$rebalance(l$$2, k2$$1, v2, MapTreeModule$$$add(comparer, k$$2, v$$2, r$$2));\n        }\n      }\n\n    default:\n      {\n        return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n      }\n  }\n}\nexport function MapTreeModule$$$find(comparer$$1, k$$3, m$$4) {\n  MapTreeModule$$$find: while (true) {\n    switch (m$$4.tag) {\n      case 1:\n        {\n          const v2$$1 = m$$4.fields[1];\n          const k2$$2 = m$$4.fields[0];\n          const c$$2 = comparer$$1.Compare(k$$3, k2$$2) | 0;\n\n          if (c$$2 === 0) {\n            return v2$$1;\n          } else {\n            throw new Error(\"key not found\");\n          }\n        }\n\n      case 2:\n        {\n          const v2$$2 = m$$4.fields[1];\n          const r$$3 = m$$4.fields[3];\n          const l$$3 = m$$4.fields[2];\n          const k2$$3 = m$$4.fields[0];\n          const c$$3 = comparer$$1.Compare(k$$3, k2$$3) | 0;\n\n          if (c$$3 < 0) {\n            const $comparer$$1$$7 = comparer$$1;\n            const $k$$3$$8 = k$$3;\n            comparer$$1 = $comparer$$1$$7;\n            k$$3 = $k$$3$$8;\n            m$$4 = l$$3;\n            continue MapTreeModule$$$find;\n          } else if (c$$3 === 0) {\n            return v2$$2;\n          } else {\n            const $comparer$$1$$9 = comparer$$1;\n            const $k$$3$$10 = k$$3;\n            comparer$$1 = $comparer$$1$$9;\n            k$$3 = $k$$3$$10;\n            m$$4 = r$$3;\n            continue MapTreeModule$$$find;\n          }\n        }\n\n      default:\n        {\n          throw new Error(\"key not found\");\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryFind(comparer$$2, k$$4, m$$5) {\n  MapTreeModule$$$tryFind: while (true) {\n    switch (m$$5.tag) {\n      case 1:\n        {\n          const v2$$3 = m$$5.fields[1];\n          const k2$$4 = m$$5.fields[0];\n          const c$$4 = comparer$$2.Compare(k$$4, k2$$4) | 0;\n\n          if (c$$4 === 0) {\n            return some(v2$$3);\n          } else {\n            return null;\n          }\n        }\n\n      case 2:\n        {\n          const v2$$4 = m$$5.fields[1];\n          const r$$4 = m$$5.fields[3];\n          const l$$4 = m$$5.fields[2];\n          const k2$$5 = m$$5.fields[0];\n          const c$$5 = comparer$$2.Compare(k$$4, k2$$5) | 0;\n\n          if (c$$5 < 0) {\n            const $comparer$$2$$11 = comparer$$2;\n            const $k$$4$$12 = k$$4;\n            comparer$$2 = $comparer$$2$$11;\n            k$$4 = $k$$4$$12;\n            m$$5 = l$$4;\n            continue MapTreeModule$$$tryFind;\n          } else if (c$$5 === 0) {\n            return some(v2$$4);\n          } else {\n            const $comparer$$2$$13 = comparer$$2;\n            const $k$$4$$14 = k$$4;\n            comparer$$2 = $comparer$$2$$13;\n            k$$4 = $k$$4$$14;\n            m$$5 = r$$4;\n            continue MapTreeModule$$$tryFind;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition1(comparer$$3, f, k$$5, v$$3, acc1, acc2) {\n  if (f(k$$5, v$$3)) {\n    return [MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc1), acc2];\n  } else {\n    return [acc1, MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc2)];\n  }\n}\nexport function MapTreeModule$$$partitionAux($arg$$21, $arg$$22, $arg$$23, $arg$$24, $arg$$25) {\n  MapTreeModule$$$partitionAux: while (true) {\n    const comparer$$4 = $arg$$21,\n          f$$1 = $arg$$22,\n          s = $arg$$23,\n          acc_0 = $arg$$24,\n          acc_1 = $arg$$25;\n    const acc$$1 = [acc_0, acc_1];\n\n    switch (s.tag) {\n      case 1:\n        {\n          const v$$4 = s.fields[1];\n          const k$$6 = s.fields[0];\n          return MapTreeModule$$$partition1(comparer$$4, f$$1, k$$6, v$$4, acc$$1[0], acc$$1[1]);\n        }\n\n      case 2:\n        {\n          const v$$5 = s.fields[1];\n          const r$$5 = s.fields[3];\n          const l$$5 = s.fields[2];\n          const k$$7 = s.fields[0];\n          const acc$$2 = MapTreeModule$$$partitionAux(comparer$$4, f$$1, r$$5, acc$$1[0], acc$$1[1]);\n          const acc$$3 = MapTreeModule$$$partition1(comparer$$4, f$$1, k$$7, v$$5, acc$$2[0], acc$$2[1]);\n          $arg$$21 = comparer$$4;\n          $arg$$22 = f$$1;\n          $arg$$23 = l$$5;\n          $arg$$24 = acc$$3[0];\n          $arg$$25 = acc$$3[1];\n          continue MapTreeModule$$$partitionAux;\n        }\n\n      default:\n        {\n          return acc$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition(comparer$$5, f$$2, s$$1) {\n  return MapTreeModule$$$partitionAux(comparer$$5, f$$2, s$$1, MapTreeModule$$$empty(), MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$filter1(comparer$$6, f$$3, k$$8, v$$6, acc$$4) {\n  if (f$$3(k$$8, v$$6)) {\n    return MapTreeModule$$$add(comparer$$6, k$$8, v$$6, acc$$4);\n  } else {\n    return acc$$4;\n  }\n}\nexport function MapTreeModule$$$filterAux($arg$$34, $arg$$35, $arg$$36, $arg$$37) {\n  MapTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$34,\n          f$$4 = $arg$$35,\n          s$$2 = $arg$$36,\n          acc$$5 = $arg$$37;\n\n    switch (s$$2.tag) {\n      case 1:\n        {\n          const v$$7 = s$$2.fields[1];\n          const k$$9 = s$$2.fields[0];\n          return MapTreeModule$$$filter1(comparer$$7, f$$4, k$$9, v$$7, acc$$5);\n        }\n\n      case 2:\n        {\n          const v$$8 = s$$2.fields[1];\n          const r$$6 = s$$2.fields[3];\n          const l$$6 = s$$2.fields[2];\n          const k$$10 = s$$2.fields[0];\n          const acc$$6 = MapTreeModule$$$filterAux(comparer$$7, f$$4, l$$6, acc$$5);\n          const acc$$7 = MapTreeModule$$$filter1(comparer$$7, f$$4, k$$10, v$$8, acc$$6);\n          $arg$$34 = comparer$$7;\n          $arg$$35 = f$$4;\n          $arg$$36 = r$$6;\n          $arg$$37 = acc$$7;\n          continue MapTreeModule$$$filterAux;\n        }\n\n      default:\n        {\n          return acc$$5;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$filter(comparer$$8, f$$5, s$$3) {\n  return MapTreeModule$$$filterAux(comparer$$8, f$$5, s$$3, MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$spliceOutSuccessor(m$$6) {\n  switch (m$$6.tag) {\n    case 1:\n      {\n        const v2$$5 = m$$6.fields[1];\n        const k2$$6 = m$$6.fields[0];\n        return [k2$$6, v2$$5, new MapTree$00602(0, \"MapEmpty\")];\n      }\n\n    case 2:\n      {\n        const v2$$6 = m$$6.fields[1];\n        const r$$7 = m$$6.fields[3];\n        const l$$7 = m$$6.fields[2];\n        const k2$$7 = m$$6.fields[0];\n\n        if (l$$7.tag === 0) {\n          return [k2$$7, v2$$6, r$$7];\n        } else {\n          const patternInput = MapTreeModule$$$spliceOutSuccessor(l$$7);\n          return [patternInput[0], patternInput[1], MapTreeModule$$$mk(patternInput[2], k2$$7, v2$$6, r$$7)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n      }\n  }\n}\nexport function MapTreeModule$$$remove(comparer$$9, k$$11, m$$7) {\n  switch (m$$7.tag) {\n    case 1:\n      {\n        const k2$$8 = m$$7.fields[0];\n        const c$$6 = comparer$$9.Compare(k$$11, k2$$8) | 0;\n\n        if (c$$6 === 0) {\n          return new MapTree$00602(0, \"MapEmpty\");\n        } else {\n          return m$$7;\n        }\n      }\n\n    case 2:\n      {\n        const v2$$7 = m$$7.fields[1];\n        const r$$8 = m$$7.fields[3];\n        const l$$8 = m$$7.fields[2];\n        const k2$$9 = m$$7.fields[0];\n        const c$$7 = comparer$$9.Compare(k$$11, k2$$9) | 0;\n\n        if (c$$7 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$remove(comparer$$9, k$$11, l$$8), k2$$9, v2$$7, r$$8);\n        } else if (c$$7 === 0) {\n          const matchValue$$1 = [l$$8, r$$8];\n\n          if (matchValue$$1[0].tag === 0) {\n            return r$$8;\n          } else if (matchValue$$1[1].tag === 0) {\n            return l$$8;\n          } else {\n            const patternInput$$1 = MapTreeModule$$$spliceOutSuccessor(r$$8);\n            return MapTreeModule$$$mk(l$$8, patternInput$$1[0], patternInput$$1[1], patternInput$$1[2]);\n          }\n        } else {\n          return MapTreeModule$$$rebalance(l$$8, k2$$9, v2$$7, MapTreeModule$$$remove(comparer$$9, k$$11, r$$8));\n        }\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mem(comparer$$10, k$$12, m$$8) {\n  MapTreeModule$$$mem: while (true) {\n    switch (m$$8.tag) {\n      case 1:\n        {\n          const k2$$10 = m$$8.fields[0];\n          return comparer$$10.Compare(k$$12, k2$$10) === 0;\n        }\n\n      case 2:\n        {\n          const r$$9 = m$$8.fields[3];\n          const l$$9 = m$$8.fields[2];\n          const k2$$11 = m$$8.fields[0];\n          const c$$8 = comparer$$10.Compare(k$$12, k2$$11) | 0;\n\n          if (c$$8 < 0) {\n            const $comparer$$10$$41 = comparer$$10;\n            const $k$$12$$42 = k$$12;\n            comparer$$10 = $comparer$$10$$41;\n            k$$12 = $k$$12$$42;\n            m$$8 = l$$9;\n            continue MapTreeModule$$$mem;\n          } else if (c$$8 === 0) {\n            return true;\n          } else {\n            const $comparer$$10$$43 = comparer$$10;\n            const $k$$12$$44 = k$$12;\n            comparer$$10 = $comparer$$10$$43;\n            k$$12 = $k$$12$$44;\n            m$$8 = r$$9;\n            continue MapTreeModule$$$mem;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$iter($arg$$45, $arg$$46) {\n  MapTreeModule$$$iter: while (true) {\n    const f$$6 = $arg$$45,\n          m$$9 = $arg$$46;\n\n    switch (m$$9.tag) {\n      case 1:\n        {\n          const v2$$8 = m$$9.fields[1];\n          const k2$$12 = m$$9.fields[0];\n          f$$6(k2$$12, v2$$8);\n          break;\n        }\n\n      case 2:\n        {\n          const v2$$9 = m$$9.fields[1];\n          const r$$10 = m$$9.fields[3];\n          const l$$10 = m$$9.fields[2];\n          const k2$$13 = m$$9.fields[0];\n          MapTreeModule$$$iter(f$$6, l$$10);\n          f$$6(k2$$13, v2$$9);\n          $arg$$45 = f$$6;\n          $arg$$46 = r$$10;\n          continue MapTreeModule$$$iter;\n          break;\n        }\n\n      default:\n        {}\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryPick($arg$$47, $arg$$48) {\n  MapTreeModule$$$tryPick: while (true) {\n    const f$$7 = $arg$$47,\n          m$$10 = $arg$$48;\n\n    switch (m$$10.tag) {\n      case 1:\n        {\n          const v2$$10 = m$$10.fields[1];\n          const k2$$14 = m$$10.fields[0];\n          return f$$7(k2$$14, v2$$10);\n        }\n\n      case 2:\n        {\n          const v2$$11 = m$$10.fields[1];\n          const r$$11 = m$$10.fields[3];\n          const l$$11 = m$$10.fields[2];\n          const k2$$15 = m$$10.fields[0];\n          const matchValue$$2 = MapTreeModule$$$tryPick(f$$7, l$$11);\n\n          if (matchValue$$2 == null) {\n            const matchValue$$3 = f$$7(k2$$15, v2$$11);\n\n            if (matchValue$$3 == null) {\n              $arg$$47 = f$$7;\n              $arg$$48 = r$$11;\n              continue MapTreeModule$$$tryPick;\n            } else {\n              const res$$1 = matchValue$$3;\n              return res$$1;\n            }\n          } else {\n            const res = matchValue$$2;\n            return res;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$exists($arg$$49, $arg$$50) {\n  MapTreeModule$$$exists: while (true) {\n    const f$$8 = $arg$$49,\n          m$$11 = $arg$$50;\n\n    switch (m$$11.tag) {\n      case 1:\n        {\n          const v2$$12 = m$$11.fields[1];\n          const k2$$16 = m$$11.fields[0];\n          return f$$8(k2$$16, v2$$12);\n        }\n\n      case 2:\n        {\n          const v2$$13 = m$$11.fields[1];\n          const r$$12 = m$$11.fields[3];\n          const l$$12 = m$$11.fields[2];\n          const k2$$17 = m$$11.fields[0];\n\n          if (MapTreeModule$$$exists(f$$8, l$$12) ? true : f$$8(k2$$17, v2$$13)) {\n            return true;\n          } else {\n            $arg$$49 = f$$8;\n            $arg$$50 = r$$12;\n            continue MapTreeModule$$$exists;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$forall($arg$$51, $arg$$52) {\n  MapTreeModule$$$forall: while (true) {\n    const f$$9 = $arg$$51,\n          m$$12 = $arg$$52;\n\n    switch (m$$12.tag) {\n      case 1:\n        {\n          const v2$$14 = m$$12.fields[1];\n          const k2$$18 = m$$12.fields[0];\n          return f$$9(k2$$18, v2$$14);\n        }\n\n      case 2:\n        {\n          const v2$$15 = m$$12.fields[1];\n          const r$$13 = m$$12.fields[3];\n          const l$$13 = m$$12.fields[2];\n          const k2$$19 = m$$12.fields[0];\n\n          if (MapTreeModule$$$forall(f$$9, l$$13) ? f$$9(k2$$19, v2$$15) : false) {\n            $arg$$51 = f$$9;\n            $arg$$52 = r$$13;\n            continue MapTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$map(f$$10, m$$13) {\n  switch (m$$13.tag) {\n    case 1:\n      {\n        const v$$9 = m$$13.fields[1];\n        const k$$13 = m$$13.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$13, f$$10(v$$9));\n      }\n\n    case 2:\n      {\n        const v$$10 = m$$13.fields[1];\n        const r$$14 = m$$13.fields[3];\n        const l$$14 = m$$13.fields[2];\n        const k$$14 = m$$13.fields[0];\n        const h$$2 = m$$13.fields[4] | 0;\n        const l2 = MapTreeModule$$$map(f$$10, l$$14);\n        const v2$$16 = f$$10(v$$10);\n        const r2 = MapTreeModule$$$map(f$$10, r$$14);\n        return new MapTree$00602(2, \"MapNode\", k$$14, v2$$16, l2, r2, h$$2);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mapi(f$$11, m$$14) {\n  switch (m$$14.tag) {\n    case 1:\n      {\n        const v$$11 = m$$14.fields[1];\n        const k$$15 = m$$14.fields[0];\n        return new MapTree$00602(1, \"MapOne\", k$$15, f$$11(k$$15, v$$11));\n      }\n\n    case 2:\n      {\n        const v$$12 = m$$14.fields[1];\n        const r$$15 = m$$14.fields[3];\n        const l$$15 = m$$14.fields[2];\n        const k$$16 = m$$14.fields[0];\n        const h$$3 = m$$14.fields[4] | 0;\n        const l2$$1 = MapTreeModule$$$mapi(f$$11, l$$15);\n        const v2$$17 = f$$11(k$$16, v$$12);\n        const r2$$1 = MapTreeModule$$$mapi(f$$11, r$$15);\n        return new MapTree$00602(2, \"MapNode\", k$$16, v2$$17, l2$$1, r2$$1, h$$3);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$foldBack($arg$$57, $arg$$58, $arg$$59) {\n  MapTreeModule$$$foldBack: while (true) {\n    const f$$12 = $arg$$57,\n          m$$15 = $arg$$58,\n          x$$1 = $arg$$59;\n\n    switch (m$$15.tag) {\n      case 1:\n        {\n          const v$$13 = m$$15.fields[1];\n          const k$$17 = m$$15.fields[0];\n          return f$$12(k$$17, v$$13, x$$1);\n        }\n\n      case 2:\n        {\n          const v$$14 = m$$15.fields[1];\n          const r$$16 = m$$15.fields[3];\n          const l$$16 = m$$15.fields[2];\n          const k$$18 = m$$15.fields[0];\n          const x$$2 = MapTreeModule$$$foldBack(f$$12, r$$16, x$$1);\n          const x$$3 = f$$12(k$$18, v$$14, x$$2);\n          $arg$$57 = f$$12;\n          $arg$$58 = l$$16;\n          $arg$$59 = x$$3;\n          continue MapTreeModule$$$foldBack;\n        }\n\n      default:\n        {\n          return x$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$fold($arg$$60, $arg$$61, $arg$$62) {\n  MapTreeModule$$$fold: while (true) {\n    const f$$13 = $arg$$60,\n          x$$4 = $arg$$61,\n          m$$16 = $arg$$62;\n\n    switch (m$$16.tag) {\n      case 1:\n        {\n          const v$$15 = m$$16.fields[1];\n          const k$$19 = m$$16.fields[0];\n          return f$$13(x$$4, k$$19, v$$15);\n        }\n\n      case 2:\n        {\n          const v$$16 = m$$16.fields[1];\n          const r$$17 = m$$16.fields[3];\n          const l$$17 = m$$16.fields[2];\n          const k$$20 = m$$16.fields[0];\n          const x$$5 = MapTreeModule$$$fold(f$$13, x$$4, l$$17);\n          const x$$6 = f$$13(x$$5, k$$20, v$$16);\n          $arg$$60 = f$$13;\n          $arg$$61 = x$$6;\n          $arg$$62 = r$$17;\n          continue MapTreeModule$$$fold;\n        }\n\n      default:\n        {\n          return x$$4;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17, x$$7) {\n  switch (m$$17.tag) {\n    case 1:\n      {\n        const v$$17 = m$$17.fields[1];\n        const k$$21 = m$$17.fields[0];\n        const cLoKey = comparer$$11.Compare(lo, k$$21) | 0;\n        const cKeyHi = comparer$$11.Compare(k$$21, hi) | 0;\n        const x$$8 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f$$14(k$$21, v$$17, x$$7) : x$$7;\n        return x$$8;\n      }\n\n    case 2:\n      {\n        const v$$18 = m$$17.fields[1];\n        const r$$18 = m$$17.fields[3];\n        const l$$18 = m$$17.fields[2];\n        const k$$22 = m$$17.fields[0];\n        const cLoKey$$1 = comparer$$11.Compare(lo, k$$22) | 0;\n        const cKeyHi$$1 = comparer$$11.Compare(k$$22, hi) | 0;\n        const x$$9 = cLoKey$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, l$$18, x$$7) : x$$7;\n        const x$$10 = (cLoKey$$1 <= 0 ? cKeyHi$$1 <= 0 : false) ? f$$14(k$$22, v$$18, x$$9) : x$$9;\n        const x$$11 = cKeyHi$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, r$$18, x$$10) : x$$10;\n        return x$$11;\n      }\n\n    default:\n      {\n        return x$$7;\n      }\n  }\n}\nexport function MapTreeModule$$$foldSection(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12) {\n  if (comparer$$12.Compare(lo$$1, hi$$1) === 1) {\n    return x$$12;\n  } else {\n    return MapTreeModule$$$foldFromTo(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12);\n  }\n}\nexport function MapTreeModule$$$loop(m$$19, acc$$8) {\n  MapTreeModule$$$loop: while (true) {\n    switch (m$$19.tag) {\n      case 1:\n        {\n          const v$$19 = m$$19.fields[1];\n          const k$$23 = m$$19.fields[0];\n          return new List([k$$23, v$$19], acc$$8);\n        }\n\n      case 2:\n        {\n          const v$$20 = m$$19.fields[1];\n          const r$$19 = m$$19.fields[3];\n          const l$$19 = m$$19.fields[2];\n          const k$$24 = m$$19.fields[0];\n          const $acc$$8$$75 = acc$$8;\n          m$$19 = l$$19;\n          acc$$8 = new List([k$$24, v$$20], MapTreeModule$$$loop(r$$19, $acc$$8$$75));\n          continue MapTreeModule$$$loop;\n        }\n\n      default:\n        {\n          return acc$$8;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$toList(m$$20) {\n  return MapTreeModule$$$loop(m$$20, new List());\n}\nexport function MapTreeModule$$$ofList(comparer$$13, l$$20) {\n  return fold$$1(function (acc$$9, tupledArg) {\n    return MapTreeModule$$$add(comparer$$13, tupledArg[0], tupledArg[1], acc$$9);\n  }, MapTreeModule$$$empty(), l$$20);\n}\nexport function MapTreeModule$$$mkFromEnumerator(comparer$$14, acc$$10, e) {\n  MapTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const patternInput$$2 = e.Current;\n      const $acc$$10$$77 = acc$$10;\n      const $comparer$$14$$76 = comparer$$14;\n      const $e$$78 = e;\n      comparer$$14 = $comparer$$14$$76;\n      acc$$10 = MapTreeModule$$$add($comparer$$14$$76, patternInput$$2[0], patternInput$$2[1], $acc$$10$$77);\n      e = $e$$78;\n      continue MapTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$10;\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$ofArray(comparer$$15, arr) {\n  let res$$2 = MapTreeModule$$$empty();\n\n  for (let i = 0; i <= arr.length - 1; i++) {\n    const patternInput$$3 = arr[i];\n    res$$2 = MapTreeModule$$$add(comparer$$15, patternInput$$3[0], patternInput$$3[1], res$$2);\n  }\n\n  return res$$2;\n}\nexport function MapTreeModule$$$ofSeq(comparer$$16, c$$9) {\n  const ie = getEnumerator(c$$9);\n\n  try {\n    return MapTreeModule$$$mkFromEnumerator(comparer$$16, MapTreeModule$$$empty(), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function MapTreeModule$$$copyToArray(s$$4, arr$$1, i$$1) {\n  let j = i$$1 | 0;\n  MapTreeModule$$$iter(function f$$16(x$$15, y$$2) {\n    arr$$1[j] = [x$$15, y$$2];\n    j = j + 1;\n  }, s$$4);\n}\nexport const MapTreeModule$002EMapIterator$00602 = declare(function Map_MapTreeModule_MapIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function MapTreeModule$002EMapIterator$00602$reflection($gen$$79, $gen$$80) {\n  return record(\"Map.MapTreeModule.MapIterator`2\", [$gen$$79, $gen$$80], MapTreeModule$002EMapIterator$00602, () => [[\"stack\", list(MapTree$00602$reflection($gen$$79, $gen$$80))], [\"started\", bool]]);\n}\nexport function MapTreeModule$$$collapseLHS(stack) {\n  MapTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 1) {\n        return stack;\n      } else if (stack.head.tag === 2) {\n        const $stack$$81 = stack;\n        stack = new List($stack$$81.head.fields[2], new List(new MapTree$00602(1, \"MapOne\", $stack$$81.head.fields[0], $stack$$81.head.fields[1]), new List($stack$$81.head.fields[3], $stack$$81.tail)));\n        continue MapTreeModule$$$collapseLHS;\n      } else {\n        const $stack$$82 = stack;\n        stack = $stack$$82.tail;\n        continue MapTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$mkIterator(s$$5) {\n  return new MapTreeModule$002EMapIterator$00602(MapTreeModule$$$collapseLHS(new List(s$$5, new List())), false);\n}\nexport function MapTreeModule$$$notStarted() {\n  throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule$$$alreadyFinished() {\n  throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule$$$current(i$$2) {\n  if (i$$2.started) {\n    const matchValue$$4 = i$$2.stack;\n\n    if (matchValue$$4.tail == null) {\n      return MapTreeModule$$$alreadyFinished();\n    } else if (matchValue$$4.head.tag === 1) {\n      return [matchValue$$4.head.fields[0], matchValue$$4.head.fields[1]];\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n  } else {\n    return MapTreeModule$$$notStarted();\n  }\n}\nexport function MapTreeModule$$$moveNext(i$$3) {\n  if (i$$3.started) {\n    const matchValue$$5 = i$$3.stack;\n\n    if (matchValue$$5.tail == null) {\n      return false;\n    } else if (matchValue$$5.head.tag === 1) {\n      i$$3.stack = MapTreeModule$$$collapseLHS(matchValue$$5.tail);\n      return !(i$$3.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$3.started = true;\n    return !(i$$3.stack.tail == null);\n  }\n}\nexport const MapTreeModule$002EmkIEnumerator$0027$00602 = declare(function Map_MapTreeModule_mkIEnumerator_(s$$6) {\n  const $this$$1 = this;\n  $this$$1.s = s$$6;\n  $this$$1.i = MapTreeModule$$$mkIterator($this$$1.s);\n});\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$reflection($gen$$83, $gen$$84) {\n  return type(\"Map.MapTreeModule.mkIEnumerator'`2\", [$gen$$83, $gen$$84]);\n}\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$6) {\n  return this != null ? MapTreeModule$002EmkIEnumerator$0027$00602.call(this, s$$6) : new MapTreeModule$002EmkIEnumerator$0027$00602(s$$6);\n}\nObject.defineProperty(MapTreeModule$002EmkIEnumerator$0027$00602.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return MapTreeModule$$$current(__.i);\n  }\n});\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return MapTreeModule$$$moveNext(__$$1.i);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = MapTreeModule$$$mkIterator(__$$2.s);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Dispose = function () {};\n\nexport function MapTreeModule$$$mkIEnumerator(s$$7) {\n  return MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$7);\n}\nexport function MapTreeModule$$$toSeq(s$$8) {\n  const en = MapTreeModule$$$mkIEnumerator(s$$8);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport const FSharpMap = declare(function Map_Map(comparer$$17, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$17;\n  $this$$2.tree = tree;\n});\nexport function FSharpMap$reflection($gen$$85, $gen$$86) {\n  return type(\"Map.FSharpMap\", [$gen$$85, $gen$$86]);\n}\nexport function FSharpMap$$$$002Ector$$58ADD115(comparer$$17, tree) {\n  return this != null ? FSharpMap.call(this, comparer$$17, tree) : new FSharpMap(comparer$$17, tree);\n}\nexport function FSharpMap$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpMap$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpMap$$Add$$5BDDA1(__$$6, k$$28, v$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$6.comparer, MapTreeModule$$$add(__$$6.comparer, k$$28, v$$24, __$$6.tree));\n}\nexport function FSharpMap$$get_IsEmpty(__$$7) {\n  return MapTreeModule$$$isEmpty(__$$7.tree);\n}\nexport function FSharpMap$$get_Item$$2B595(__$$8, k$$29) {\n  return MapTreeModule$$$find(__$$8.comparer, k$$29, __$$8.tree);\n}\nexport function FSharpMap$$TryGetValue$$5BDDA1(__$$9, k$$30, defValue) {\n  const matchValue$$6 = MapTreeModule$$$tryFind(__$$9.comparer, k$$30, __$$9.tree);\n\n  if (matchValue$$6 == null) {\n    return [false, defValue];\n  } else {\n    const v$$25 = value$$3(matchValue$$6);\n    return [true, v$$25];\n  }\n}\nexport function FSharpMap$$TryPick$$72321DD7(__$$10, f$$17) {\n  return MapTreeModule$$$tryPick(f$$17, __$$10.tree);\n}\nexport function FSharpMap$$Exists$$Z395DDC35(__$$11, f$$18) {\n  return MapTreeModule$$$exists(f$$18, __$$11.tree);\n}\nexport function FSharpMap$$Filter$$Z395DDC35(__$$12, f$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$12.comparer, MapTreeModule$$$filter(__$$12.comparer, f$$19, __$$12.tree));\n}\nexport function FSharpMap$$ForAll$$Z395DDC35(__$$13, f$$20) {\n  return MapTreeModule$$$forall(f$$20, __$$13.tree);\n}\nexport function FSharpMap$$Fold(__$$14, f$$21, acc$$11) {\n  return MapTreeModule$$$foldBack(f$$21, __$$14.tree, acc$$11);\n}\nexport function FSharpMap$$FoldSection(__$$15, lo$$2, hi$$2, f$$22, acc$$12) {\n  return MapTreeModule$$$foldSection(__$$15.comparer, lo$$2, hi$$2, f$$22, __$$15.tree, acc$$12);\n}\nexport function FSharpMap$$Iterate$$1DCFB91D(__$$16, f$$23) {\n  MapTreeModule$$$iter(f$$23, __$$16.tree);\n}\nexport function FSharpMap$$MapRange$$6DC7247(__$$17, f$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$17.comparer, MapTreeModule$$$map(f$$24, __$$17.tree));\n}\nexport function FSharpMap$$Map$$Z6F6B671C(__$$18, f$$25) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$18.comparer, MapTreeModule$$$mapi(f$$25, __$$18.tree));\n}\nexport function FSharpMap$$Partition$$Z395DDC35(__$$19, f$$26) {\n  const patternInput$$4 = MapTreeModule$$$partition(__$$19.comparer, f$$26, __$$19.tree);\n  return [FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[0]), FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[1])];\n}\nexport function FSharpMap$$get_Count(__$$20) {\n  return MapTreeModule$$$size(__$$20.tree);\n}\nexport function FSharpMap$$ContainsKey$$2B595(__$$21, k$$31) {\n  return MapTreeModule$$$mem(__$$21.comparer, k$$31, __$$21.tree);\n}\nexport function FSharpMap$$Remove$$2B595(__$$22, k$$32) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$22.comparer, MapTreeModule$$$remove(__$$22.comparer, k$$32, __$$22.tree));\n}\nexport function FSharpMap$$TryFind$$2B595(__$$23, k$$33) {\n  return MapTreeModule$$$tryFind(__$$23.comparer, k$$33, __$$23.tree);\n}\nexport function FSharpMap$$ToList(__$$24) {\n  return MapTreeModule$$$toList(__$$24.tree);\n}\n\nFSharpMap.prototype.toString = function () {\n  const this$ = this;\n  return \"map [\" + join(\"; \", ...map$$1(function mapping(kv) {\n    return toText(printf(\"(%A, %A)\"))(kv[0])(kv[1]);\n  }, this$)) + \"]\";\n};\n\nFSharpMap.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$16, y$$3) {\n    return (x$$16 << 1) + y$$3 + 631;\n  };\n\n  let res$$3 = 0;\n  const e$$1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const activePatternResult3058 = e$$1.Current;\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3058[0]));\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3058[1]));\n  }\n\n  return Math.abs(res$$3) | 0;\n};\n\nFSharpMap.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return this$$$2.CompareTo(that) === 0;\n};\n\nFSharpMap.prototype[Symbol.iterator] = function () {\n  const __$$25 = this;\n  return toIterator(MapTreeModule$$$mkIEnumerator(__$$25.tree));\n};\n\nFSharpMap.prototype.CompareTo = function (obj) {\n  const m$$22 = this;\n  const m2 = obj;\n  let res$$4 = 0;\n  let finished = false;\n  const e1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m$$22));\n\n  try {\n    const e2 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m2));\n\n    try {\n      while (!finished ? res$$4 === 0 : false) {\n        const matchValue$$7 = [e1.MoveNext(), e2.MoveNext()];\n\n        if (matchValue$$7[0]) {\n          if (matchValue$$7[1]) {\n            const kvp1 = e1.Current;\n            const kvp2 = e2.Current;\n            const c$$10 = m$$22.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n            res$$4 = c$$10 !== 0 ? c$$10 : compare(kvp1[1], kvp2[1]);\n          } else {\n            res$$4 = 1;\n          }\n        } else if (matchValue$$7[1]) {\n          res$$4 = -1;\n        } else {\n          finished = true;\n        }\n      }\n\n      return res$$4 | 0;\n    } finally {\n      if (isDisposable(e2)) {\n        e2.Dispose();\n      }\n    }\n  } finally {\n    if (isDisposable(e1)) {\n      e1.Dispose();\n    }\n  }\n};\n\nexport function isEmpty(m$$23) {\n  return FSharpMap$$get_IsEmpty(m$$23);\n}\nexport function add(k$$34, v$$26, m$$24) {\n  return FSharpMap$$Add$$5BDDA1(m$$24, k$$34, v$$26);\n}\nexport function find(k$$35, m$$25) {\n  return FSharpMap$$get_Item$$2B595(m$$25, k$$35);\n}\nexport function tryFind(k$$36, m$$26) {\n  return FSharpMap$$TryFind$$2B595(m$$26, k$$36);\n}\nexport function remove(k$$37, m$$27) {\n  return FSharpMap$$Remove$$2B595(m$$27, k$$37);\n}\nexport function containsKey(k$$38, m$$28) {\n  return FSharpMap$$ContainsKey$$2B595(m$$28, k$$38);\n}\nexport function iterate(f$$27, m$$29) {\n  FSharpMap$$Iterate$$1DCFB91D(m$$29, f$$27);\n}\nexport function tryPick(f$$28, m$$30) {\n  return FSharpMap$$TryPick$$72321DD7(m$$30, f$$28);\n}\nexport function pick(f$$29, m$$31) {\n  const matchValue$$8 = tryPick(f$$29, m$$31);\n\n  if (matchValue$$8 != null) {\n    const res$$5 = value$$3(matchValue$$8);\n    return res$$5;\n  } else {\n    throw new Error(\"key not found\");\n  }\n}\nexport function exists(f$$30, m$$32) {\n  return FSharpMap$$Exists$$Z395DDC35(m$$32, f$$30);\n}\nexport function filter(f$$31, m$$33) {\n  return FSharpMap$$Filter$$Z395DDC35(m$$33, f$$31);\n}\nexport function partition(f$$32, m$$34) {\n  return FSharpMap$$Partition$$Z395DDC35(m$$34, f$$32);\n}\nexport function forAll(f$$33, m$$35) {\n  return FSharpMap$$ForAll$$Z395DDC35(m$$35, f$$33);\n}\nexport function mapRange(f$$34, m$$36) {\n  return FSharpMap$$MapRange$$6DC7247(m$$36, f$$34);\n}\nexport function map(f$$35, m$$37) {\n  return FSharpMap$$Map$$Z6F6B671C(m$$37, f$$35);\n}\nexport function fold(f$$36, z, m$$38) {\n  return MapTreeModule$$$fold(f$$36, z, FSharpMap$$get_Tree(m$$38));\n}\nexport function foldBack(f$$37, m$$39, z$$1) {\n  return MapTreeModule$$$foldBack(f$$37, FSharpMap$$get_Tree(m$$39), z$$1);\n}\nexport function toSeq(m$$40) {\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(m$$40));\n}\nexport function findKey(f$$38, m$$41) {\n  const _arg1$$1 = MapTreeModule$$$tryPick(function f$$39(k$$39, v$$27) {\n    if (f$$38(k$$39, v$$27)) {\n      return some(k$$39);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$41));\n\n  if (_arg1$$1 == null) {\n    throw new Error(\"Key not found\");\n  } else {\n    const k$$40 = value$$3(_arg1$$1);\n    return k$$40;\n  }\n}\nexport function tryFindKey(f$$40, m$$43) {\n  return MapTreeModule$$$tryPick(function f$$41(k$$41, v$$28) {\n    if (f$$40(k$$41, v$$28)) {\n      return some(k$$41);\n    } else {\n      return null;\n    }\n  }, FSharpMap$$get_Tree(m$$43));\n}\nexport function ofList(l$$22, comparer$$18) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$18, MapTreeModule$$$ofList(comparer$$18, l$$22));\n}\nexport function ofSeq(l$$23, comparer$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$19, MapTreeModule$$$ofSeq(comparer$$19, l$$23));\n}\nexport function ofArray(array, comparer$$20) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$20, MapTreeModule$$$ofArray(comparer$$20, array));\n}\nexport function toList(m$$45) {\n  return FSharpMap$$ToList(m$$45);\n}\nexport function toArray(m$$46) {\n  const res$$6 = new Array(FSharpMap$$get_Count(m$$46));\n  MapTreeModule$$$copyToArray(FSharpMap$$get_Tree(m$$46), res$$6, 0);\n  return res$$6;\n}\nexport function empty(comparer$$21) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$21, new MapTree$00602(0, \"MapEmpty\"));\n}\n\nfunction createMutablePrivate(comparer$$22, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return MapTreeModule$$$size(tree$$1);\n    },\n\n    clear() {\n      tree$$1 = new MapTree$00602(0, \"MapEmpty\");\n    },\n\n    delete(x$$18) {\n      if (MapTreeModule$$$mem(comparer$$22, x$$18, tree$$1)) {\n        tree$$1 = MapTreeModule$$$remove(comparer$$22, x$$18, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    entries() {\n      return MapTreeModule$$$toSeq(tree$$1);\n    },\n\n    get(k$$42) {\n      return MapTreeModule$$$find(comparer$$22, k$$42, tree$$1);\n    },\n\n    has(x$$19) {\n      return MapTreeModule$$$mem(comparer$$22, x$$19, tree$$1);\n    },\n\n    keys() {\n      return map$$1(function mapping$$1(kv$$1) {\n        return kv$$1[0];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    set(k$$43, v$$29) {\n      const this$$$3 = this;\n      tree$$1 = MapTreeModule$$$add(comparer$$22, k$$43, v$$29, tree$$1);\n      return this$$$3;\n    },\n\n    values() {\n      return map$$1(function mapping$$2(kv$$2) {\n        return kv$$2[1];\n      }, MapTreeModule$$$toSeq(tree$$1));\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(MapTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return MapTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$3, comparer$$23) {\n  return createMutablePrivate(comparer$$23, MapTreeModule$$$ofSeq(comparer$$23, source$$3));\n}\nexport function groupBy(projection, xs, comparer$$24) {\n  const dict = createMutable(empty$$1(), comparer$$24);\n  iterate$$1(function (v$$30) {\n    const key = projection(v$$30);\n\n    if (dict.has(key)) {\n      dict.get(key).push(v$$30);\n    } else {\n      dict.set(key, Array.from([v$$30]));\n    }\n  }, xs);\n  return map$$1(function mapping$$3(kv$$3) {\n    return [kv$$3[0], kv$$3[1]];\n  }, dict);\n}\nexport function countBy(projection$$1, xs$$1, comparer$$25) {\n  const dict$$1 = createMutable(empty$$1(), comparer$$25);\n  iterate$$1(function (value$$1) {\n    const key$$1 = projection$$1(value$$1);\n    dict$$1.has(key$$1) ? dict$$1.set(key$$1, dict$$1.get(key$$1) + 1) : dict$$1.set(key$$1, 1);\n  }, xs$$1);\n  return map$$1(function mapping$$4(kv$$4) {\n    return [kv$$4[0], kv$$4[1]];\n  }, dict$$1);\n}","import { List, Record, declare, Union } from \"./Types\";\nimport { type, record, bool, list, union as union$$1, int32 } from \"./Reflection\";\nimport { value as value$$2, some, Choice } from \"./Option\";\nimport { iterate as iterate$$1, empty as empty$$1, fold as fold$$1, toIterator, map as map$$1, reduce, getEnumerator, unfold } from \"./Seq\";\nimport { structuralHash, isDisposable } from \"./Util\";\nimport { join } from \"./String\";\nexport const SetTree$00601 = declare(function Set_SetTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function SetTree$00601$reflection($gen$$3) {\n  return union$$1(\"Set.SetTree`1\", [$gen$$3], SetTree$00601, () => [\"SetEmpty\", [\"SetNode\", [$gen$$3, SetTree$00601$reflection($gen$$3), SetTree$00601$reflection($gen$$3), int32]], [\"SetOne\", [$gen$$3]]]);\n}\nexport function SetTreeModule$$$countAux(s, acc) {\n  SetTreeModule$$$countAux: while (true) {\n    switch (s.tag) {\n      case 2:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 0:\n        {\n          return acc | 0;\n        }\n\n      default:\n        {\n          const r = s.fields[2];\n          const l = s.fields[1];\n          const $acc$$4 = acc;\n          s = l;\n          acc = SetTreeModule$$$countAux(r, $acc$$4 + 1);\n          continue SetTreeModule$$$countAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$count(s$$1) {\n  return SetTreeModule$$$countAux(s$$1, 0);\n}\nexport function SetTreeModule$$$SetOne(n) {\n  return new SetTree$00601(2, \"SetOne\", n);\n}\nexport function SetTreeModule$$$SetNode(x, l$$1, r$$1, h) {\n  return new SetTree$00601(1, \"SetNode\", x, l$$1, r$$1, h);\n}\nexport function SetTreeModule$$$height(t) {\n  switch (t.tag) {\n    case 2:\n      {\n        return 1;\n      }\n\n    case 1:\n      {\n        const h$$1 = t.fields[3] | 0;\n        return h$$1 | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport const SetTreeModule$$$tolerance = 2;\nexport function SetTreeModule$$$mk(l$$2, k, r$$2) {\n  const matchValue = [l$$2, r$$2];\n  var $target$$5;\n\n  if (matchValue[0].tag === 0) {\n    if (matchValue[1].tag === 0) {\n      $target$$5 = 0;\n    } else {\n      $target$$5 = 1;\n    }\n  } else {\n    $target$$5 = 1;\n  }\n\n  switch ($target$$5) {\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k);\n      }\n\n    case 1:\n      {\n        const hl = SetTreeModule$$$height(l$$2) | 0;\n        const hr = SetTreeModule$$$height(r$$2) | 0;\n        const m = (hl < hr ? hr : hl) | 0;\n        return SetTreeModule$$$SetNode(k, l$$2, r$$2, m + 1);\n      }\n  }\n}\nexport function SetTreeModule$$$rebalance(t1, k$$1, t2) {\n  const t1h = SetTreeModule$$$height(t1) | 0;\n  const t2h = SetTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + SetTreeModule$$$tolerance) {\n    if (t2.tag === 1) {\n      const t2r = t2.fields[2];\n      const t2l = t2.fields[1];\n      const t2k = t2.fields[0];\n\n      if (SetTreeModule$$$height(t2l) > t1h + 1) {\n        if (t2l.tag === 1) {\n          const t2lr = t2l.fields[2];\n          const t2ll = t2l.fields[1];\n          const t2lk = t2l.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2ll), t2lk, SetTreeModule$$$mk(t2lr, t2k, t2r));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2l), t2k, t2r);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + SetTreeModule$$$tolerance) {\n    if (t1.tag === 1) {\n      const t1r = t1.fields[2];\n      const t1l = t1.fields[1];\n      const t1k = t1.fields[0];\n\n      if (SetTreeModule$$$height(t1r) > t2h + 1) {\n        if (t1r.tag === 1) {\n          const t1rr = t1r.fields[2];\n          const t1rl = t1r.fields[1];\n          const t1rk = t1r.fields[0];\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1l, t1k, t1rl), t1rk, SetTreeModule$$$mk(t1rr, k$$1, t2));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(t1l, t1k, SetTreeModule$$$mk(t1r, k$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return SetTreeModule$$$mk(t1, k$$1, t2);\n  }\n}\nexport function SetTreeModule$$$add(comparer, k$$2, t$$1) {\n  switch (t$$1.tag) {\n    case 2:\n      {\n        const k2$$1 = t$$1.fields[0];\n        const c$$1 = comparer.Compare(k$$2, k2$$1) | 0;\n\n        if (c$$1 < 0) {\n          return SetTreeModule$$$SetNode(k$$2, new SetTree$00601(0, \"SetEmpty\"), t$$1, 2);\n        } else if (c$$1 === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$SetNode(k$$2, t$$1, new SetTree$00601(0, \"SetEmpty\"), 2);\n        }\n      }\n\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k$$2);\n      }\n\n    default:\n      {\n        const r$$3 = t$$1.fields[2];\n        const l$$3 = t$$1.fields[1];\n        const k2 = t$$1.fields[0];\n        const c = comparer.Compare(k$$2, k2) | 0;\n\n        if (c < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$add(comparer, k$$2, l$$3), k2, r$$3);\n        } else if (c === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$rebalance(l$$3, k2, SetTreeModule$$$add(comparer, k$$2, r$$3));\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t2$$1) {\n  const matchValue$$1 = [t1$$1, t2$$1];\n  var $target$$6, t2$$2, t1$$2, k1, t2$$3, k2$$2, t1$$3, h1, h2, k1$$1, k2$$3, t11, t12, t21, t22;\n\n  if (matchValue$$1[0].tag === 2) {\n    if (matchValue$$1[1].tag === 0) {\n      $target$$6 = 1;\n      t1$$2 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 2) {\n      $target$$6 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    } else {\n      $target$$6 = 2;\n      k1 = matchValue$$1[0].fields[0];\n      t2$$3 = matchValue$$1[1];\n    }\n  } else if (matchValue$$1[0].tag === 1) {\n    if (matchValue$$1[1].tag === 2) {\n      $target$$6 = 3;\n      k2$$2 = matchValue$$1[1].fields[0];\n      t1$$3 = matchValue$$1[0];\n    } else if (matchValue$$1[1].tag === 1) {\n      $target$$6 = 4;\n      h1 = matchValue$$1[0].fields[3];\n      h2 = matchValue$$1[1].fields[3];\n      k1$$1 = matchValue$$1[0].fields[0];\n      k2$$3 = matchValue$$1[1].fields[0];\n      t11 = matchValue$$1[0].fields[1];\n      t12 = matchValue$$1[0].fields[2];\n      t21 = matchValue$$1[1].fields[1];\n      t22 = matchValue$$1[1].fields[2];\n    } else {\n      $target$$6 = 1;\n      t1$$2 = matchValue$$1[0];\n    }\n  } else {\n    $target$$6 = 0;\n    t2$$2 = matchValue$$1[1];\n  }\n\n  switch ($target$$6) {\n    case 0:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t2$$2);\n      }\n\n    case 1:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t1$$2);\n      }\n\n    case 2:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k1, t2$$3));\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k2$$2, t1$$3));\n      }\n\n    case 4:\n      {\n        if (h1 + SetTreeModule$$$tolerance < h2) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t21), k2$$3, t22);\n        } else if (h2 + SetTreeModule$$$tolerance < h1) {\n          return SetTreeModule$$$rebalance(t11, k1$$1, SetTreeModule$$$balance(comparer$$1, t12, k$$3, t2$$1));\n        } else {\n          return SetTreeModule$$$mk(t1$$1, k$$3, t2$$1);\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$split(comparer$$2, pivot, t$$2) {\n  switch (t$$2.tag) {\n    case 2:\n      {\n        const k1$$3 = t$$2.fields[0];\n        const c$$3 = comparer$$2.Compare(k1$$3, pivot) | 0;\n\n        if (c$$3 < 0) {\n          return [t$$2, false, new SetTree$00601(0, \"SetEmpty\")];\n        } else if (c$$3 === 0) {\n          return [new SetTree$00601(0, \"SetEmpty\"), true, new SetTree$00601(0, \"SetEmpty\")];\n        } else {\n          return [new SetTree$00601(0, \"SetEmpty\"), false, t$$2];\n        }\n      }\n\n    case 0:\n      {\n        return [new SetTree$00601(0, \"SetEmpty\"), false, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    default:\n      {\n        const t12$$1 = t$$2.fields[2];\n        const t11$$1 = t$$2.fields[1];\n        const k1$$2 = t$$2.fields[0];\n        const c$$2 = comparer$$2.Compare(pivot, k1$$2) | 0;\n\n        if (c$$2 < 0) {\n          const patternInput = SetTreeModule$$$split(comparer$$2, pivot, t11$$1);\n          return [patternInput[0], patternInput[1], SetTreeModule$$$balance(comparer$$2, patternInput[2], k1$$2, t12$$1)];\n        } else if (c$$2 === 0) {\n          return [t11$$1, true, t12$$1];\n        } else {\n          const patternInput$$1 = SetTreeModule$$$split(comparer$$2, pivot, t12$$1);\n          return [SetTreeModule$$$balance(comparer$$2, t11$$1, k1$$2, patternInput$$1[0]), patternInput$$1[1], patternInput$$1[2]];\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$spliceOutSuccessor(t$$3) {\n  switch (t$$3.tag) {\n    case 2:\n      {\n        const k2$$4 = t$$3.fields[0];\n        return [k2$$4, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    case 1:\n      {\n        const r$$4 = t$$3.fields[2];\n        const l$$4 = t$$3.fields[1];\n        const k2$$5 = t$$3.fields[0];\n\n        if (l$$4.tag === 0) {\n          return [k2$$5, r$$4];\n        } else {\n          const patternInput$$2 = SetTreeModule$$$spliceOutSuccessor(l$$4);\n          return [patternInput$$2[0], SetTreeModule$$$mk(patternInput$$2[1], k2$$5, r$$4)];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n      }\n  }\n}\nexport function SetTreeModule$$$remove(comparer$$3, k$$4, t$$4) {\n  switch (t$$4.tag) {\n    case 2:\n      {\n        const k2$$6 = t$$4.fields[0];\n        const c$$4 = comparer$$3.Compare(k$$4, k2$$6) | 0;\n\n        if (c$$4 === 0) {\n          return new SetTree$00601(0, \"SetEmpty\");\n        } else {\n          return t$$4;\n        }\n      }\n\n    case 1:\n      {\n        const r$$5 = t$$4.fields[2];\n        const l$$5 = t$$4.fields[1];\n        const k2$$7 = t$$4.fields[0];\n        const c$$5 = comparer$$3.Compare(k$$4, k2$$7) | 0;\n\n        if (c$$5 < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$remove(comparer$$3, k$$4, l$$5), k2$$7, r$$5);\n        } else if (c$$5 === 0) {\n          const matchValue$$2 = [l$$5, r$$5];\n\n          if (matchValue$$2[0].tag === 0) {\n            return r$$5;\n          } else if (matchValue$$2[1].tag === 0) {\n            return l$$5;\n          } else {\n            const patternInput$$3 = SetTreeModule$$$spliceOutSuccessor(r$$5);\n            return SetTreeModule$$$mk(l$$5, patternInput$$3[0], patternInput$$3[1]);\n          }\n        } else {\n          return SetTreeModule$$$rebalance(l$$5, k2$$7, SetTreeModule$$$remove(comparer$$3, k$$4, r$$5));\n        }\n      }\n\n    default:\n      {\n        return t$$4;\n      }\n  }\n}\nexport function SetTreeModule$$$mem(comparer$$4, k$$5, t$$5) {\n  SetTreeModule$$$mem: while (true) {\n    switch (t$$5.tag) {\n      case 2:\n        {\n          const k2$$9 = t$$5.fields[0];\n          return comparer$$4.Compare(k$$5, k2$$9) === 0;\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$6 = t$$5.fields[2];\n          const l$$6 = t$$5.fields[1];\n          const k2$$8 = t$$5.fields[0];\n          const c$$6 = comparer$$4.Compare(k$$5, k2$$8) | 0;\n\n          if (c$$6 < 0) {\n            const $comparer$$4$$7 = comparer$$4;\n            const $k$$5$$8 = k$$5;\n            comparer$$4 = $comparer$$4$$7;\n            k$$5 = $k$$5$$8;\n            t$$5 = l$$6;\n            continue SetTreeModule$$$mem;\n          } else if (c$$6 === 0) {\n            return true;\n          } else {\n            const $comparer$$4$$9 = comparer$$4;\n            const $k$$5$$10 = k$$5;\n            comparer$$4 = $comparer$$4$$9;\n            k$$5 = $k$$5$$10;\n            t$$5 = r$$6;\n            continue SetTreeModule$$$mem;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$iter($arg$$11, $arg$$12) {\n  SetTreeModule$$$iter: while (true) {\n    const f = $arg$$11,\n          t$$6 = $arg$$12;\n\n    switch (t$$6.tag) {\n      case 2:\n        {\n          const k2$$11 = t$$6.fields[0];\n          f(k2$$11);\n          break;\n        }\n\n      case 0:\n        {\n          break;\n        }\n\n      default:\n        {\n          const r$$7 = t$$6.fields[2];\n          const l$$7 = t$$6.fields[1];\n          const k2$$10 = t$$6.fields[0];\n          SetTreeModule$$$iter(f, l$$7);\n          f(k2$$10);\n          $arg$$11 = f;\n          $arg$$12 = r$$7;\n          continue SetTreeModule$$$iter;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$foldBack($arg$$13, $arg$$14, $arg$$15) {\n  SetTreeModule$$$foldBack: while (true) {\n    const f$$1 = $arg$$13,\n          m$$1 = $arg$$14,\n          x$$1 = $arg$$15;\n\n    switch (m$$1.tag) {\n      case 2:\n        {\n          const k$$7 = m$$1.fields[0];\n          return f$$1(k$$7, x$$1);\n        }\n\n      case 0:\n        {\n          return x$$1;\n        }\n\n      default:\n        {\n          const r$$8 = m$$1.fields[2];\n          const l$$8 = m$$1.fields[1];\n          const k$$6 = m$$1.fields[0];\n          $arg$$13 = f$$1;\n          $arg$$14 = l$$8;\n          $arg$$15 = f$$1(k$$6, SetTreeModule$$$foldBack(f$$1, r$$8, x$$1));\n          continue SetTreeModule$$$foldBack;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$fold($arg$$16, $arg$$17, $arg$$18) {\n  SetTreeModule$$$fold: while (true) {\n    const f$$2 = $arg$$16,\n          x$$2 = $arg$$17,\n          m$$2 = $arg$$18;\n\n    switch (m$$2.tag) {\n      case 2:\n        {\n          const k$$9 = m$$2.fields[0];\n          return f$$2(x$$2, k$$9);\n        }\n\n      case 0:\n        {\n          return x$$2;\n        }\n\n      default:\n        {\n          const r$$9 = m$$2.fields[2];\n          const l$$9 = m$$2.fields[1];\n          const k$$8 = m$$2.fields[0];\n          const x$$3 = SetTreeModule$$$fold(f$$2, x$$2, l$$9);\n          const x$$4 = f$$2(x$$3, k$$8);\n          $arg$$16 = f$$2;\n          $arg$$17 = x$$4;\n          $arg$$18 = r$$9;\n          continue SetTreeModule$$$fold;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$forall($arg$$19, $arg$$20) {\n  SetTreeModule$$$forall: while (true) {\n    const f$$3 = $arg$$19,\n          m$$3 = $arg$$20;\n\n    switch (m$$3.tag) {\n      case 2:\n        {\n          const k2$$13 = m$$3.fields[0];\n          return f$$3(k2$$13);\n        }\n\n      case 0:\n        {\n          return true;\n        }\n\n      default:\n        {\n          const r$$10 = m$$3.fields[2];\n          const l$$10 = m$$3.fields[1];\n          const k2$$12 = m$$3.fields[0];\n\n          if (f$$3(k2$$12) ? SetTreeModule$$$forall(f$$3, l$$10) : false) {\n            $arg$$19 = f$$3;\n            $arg$$20 = r$$10;\n            continue SetTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$exists($arg$$21, $arg$$22) {\n  SetTreeModule$$$exists: while (true) {\n    const f$$4 = $arg$$21,\n          m$$4 = $arg$$22;\n\n    switch (m$$4.tag) {\n      case 2:\n        {\n          const k2$$15 = m$$4.fields[0];\n          return f$$4(k2$$15);\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const r$$11 = m$$4.fields[2];\n          const l$$11 = m$$4.fields[1];\n          const k2$$14 = m$$4.fields[0];\n\n          if (f$$4(k2$$14) ? true : SetTreeModule$$$exists(f$$4, l$$11)) {\n            return true;\n          } else {\n            $arg$$21 = f$$4;\n            $arg$$22 = r$$11;\n            continue SetTreeModule$$$exists;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$isEmpty(m$$5) {\n  if (m$$5.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$subset(comparer$$5, a, b) {\n  return SetTreeModule$$$forall(function (x$$5) {\n    return SetTreeModule$$$mem(comparer$$5, x$$5, b);\n  }, a);\n}\nexport function SetTreeModule$$$psubset(comparer$$6, a$$1, b$$1) {\n  if (SetTreeModule$$$forall(function (x$$6) {\n    return SetTreeModule$$$mem(comparer$$6, x$$6, b$$1);\n  }, a$$1)) {\n    return SetTreeModule$$$exists(function (x$$7) {\n      return !SetTreeModule$$$mem(comparer$$6, x$$7, a$$1);\n    }, b$$1);\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$filterAux($arg$$23, $arg$$24, $arg$$25, $arg$$26) {\n  SetTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $arg$$23,\n          f$$5 = $arg$$24,\n          s$$2 = $arg$$25,\n          acc$$1 = $arg$$26;\n\n    switch (s$$2.tag) {\n      case 2:\n        {\n          const k$$11 = s$$2.fields[0];\n\n          if (f$$5(k$$11)) {\n            return SetTreeModule$$$add(comparer$$7, k$$11, acc$$1);\n          } else {\n            return acc$$1;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$1;\n        }\n\n      default:\n        {\n          const r$$12 = s$$2.fields[2];\n          const l$$12 = s$$2.fields[1];\n          const k$$10 = s$$2.fields[0];\n          const acc$$2 = f$$5(k$$10) ? SetTreeModule$$$add(comparer$$7, k$$10, acc$$1) : acc$$1;\n          $arg$$23 = comparer$$7;\n          $arg$$24 = f$$5;\n          $arg$$25 = l$$12;\n          $arg$$26 = SetTreeModule$$$filterAux(comparer$$7, f$$5, r$$12, acc$$2);\n          continue SetTreeModule$$$filterAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$filter(comparer$$8, f$$6, s$$3) {\n  return SetTreeModule$$$filterAux(comparer$$8, f$$6, s$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$diffAux(comparer$$9, m$$6, acc$$3) {\n  SetTreeModule$$$diffAux: while (true) {\n    switch (m$$6.tag) {\n      case 2:\n        {\n          const k$$13 = m$$6.fields[0];\n          return SetTreeModule$$$remove(comparer$$9, k$$13, acc$$3);\n        }\n\n      case 0:\n        {\n          return acc$$3;\n        }\n\n      default:\n        {\n          const r$$13 = m$$6.fields[2];\n          const l$$13 = m$$6.fields[1];\n          const k$$12 = m$$6.fields[0];\n          const $acc$$3$$31 = acc$$3;\n          const $comparer$$9$$30 = comparer$$9;\n          comparer$$9 = $comparer$$9$$30;\n          m$$6 = l$$13;\n          acc$$3 = SetTreeModule$$$diffAux($comparer$$9$$30, r$$13, SetTreeModule$$$remove($comparer$$9$$30, k$$12, $acc$$3$$31));\n          continue SetTreeModule$$$diffAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$diff(comparer$$10, a$$2, b$$2) {\n  return SetTreeModule$$$diffAux(comparer$$10, b$$2, a$$2);\n}\nexport function SetTreeModule$$$union(comparer$$11, t1$$4, t2$$4) {\n  const matchValue$$3 = [t1$$4, t2$$4];\n  var $target$$32, h1$$1, h2$$1, k1$$4, k2$$16, t11$$2, t12$$2, t21$$1, t22$$1, t$$7, t$$8, k1$$5, t2$$5, k2$$17, t1$$5;\n\n  if (matchValue$$3[0].tag === 0) {\n    $target$$32 = 1;\n    t$$7 = matchValue$$3[1];\n  } else if (matchValue$$3[0].tag === 2) {\n    if (matchValue$$3[1].tag === 0) {\n      $target$$32 = 2;\n      t$$8 = matchValue$$3[0];\n    } else if (matchValue$$3[1].tag === 2) {\n      $target$$32 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    } else {\n      $target$$32 = 3;\n      k1$$5 = matchValue$$3[0].fields[0];\n      t2$$5 = matchValue$$3[1];\n    }\n  } else if (matchValue$$3[1].tag === 0) {\n    $target$$32 = 2;\n    t$$8 = matchValue$$3[0];\n  } else if (matchValue$$3[1].tag === 2) {\n    $target$$32 = 4;\n    k2$$17 = matchValue$$3[1].fields[0];\n    t1$$5 = matchValue$$3[0];\n  } else {\n    $target$$32 = 0;\n    h1$$1 = matchValue$$3[0].fields[3];\n    h2$$1 = matchValue$$3[1].fields[3];\n    k1$$4 = matchValue$$3[0].fields[0];\n    k2$$16 = matchValue$$3[1].fields[0];\n    t11$$2 = matchValue$$3[0].fields[1];\n    t12$$2 = matchValue$$3[0].fields[2];\n    t21$$1 = matchValue$$3[1].fields[1];\n    t22$$1 = matchValue$$3[1].fields[2];\n  }\n\n  switch ($target$$32) {\n    case 0:\n      {\n        if (h1$$1 > h2$$1) {\n          const patternInput$$4 = SetTreeModule$$$split(comparer$$11, k1$$4, t2$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t11$$2, patternInput$$4[0]), k1$$4, SetTreeModule$$$union(comparer$$11, t12$$2, patternInput$$4[2]));\n        } else {\n          const patternInput$$5 = SetTreeModule$$$split(comparer$$11, k2$$16, t1$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t21$$1, patternInput$$5[0]), k2$$16, SetTreeModule$$$union(comparer$$11, t22$$1, patternInput$$5[2]));\n        }\n      }\n\n    case 1:\n      {\n        return t$$7;\n      }\n\n    case 2:\n      {\n        return t$$8;\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$11, k1$$5, t2$$5);\n      }\n\n    case 4:\n      {\n        return SetTreeModule$$$add(comparer$$11, k2$$17, t1$$5);\n      }\n  }\n}\nexport function SetTreeModule$$$intersectionAux(comparer$$12, b$$3, m$$7, acc$$4) {\n  SetTreeModule$$$intersectionAux: while (true) {\n    switch (m$$7.tag) {\n      case 2:\n        {\n          const k$$15 = m$$7.fields[0];\n\n          if (SetTreeModule$$$mem(comparer$$12, k$$15, b$$3)) {\n            return SetTreeModule$$$add(comparer$$12, k$$15, acc$$4);\n          } else {\n            return acc$$4;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$4;\n        }\n\n      default:\n        {\n          const r$$14 = m$$7.fields[2];\n          const l$$14 = m$$7.fields[1];\n          const k$$14 = m$$7.fields[0];\n          const acc$$5 = SetTreeModule$$$intersectionAux(comparer$$12, b$$3, r$$14, acc$$4);\n          const acc$$6 = SetTreeModule$$$mem(comparer$$12, k$$14, b$$3) ? SetTreeModule$$$add(comparer$$12, k$$14, acc$$5) : acc$$5;\n          const $b$$3$$34 = b$$3;\n          const $comparer$$12$$33 = comparer$$12;\n          comparer$$12 = $comparer$$12$$33;\n          b$$3 = $b$$3$$34;\n          m$$7 = l$$14;\n          acc$$4 = acc$$6;\n          continue SetTreeModule$$$intersectionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$intersection(comparer$$13, a$$3, b$$4) {\n  return SetTreeModule$$$intersectionAux(comparer$$13, b$$4, a$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$partition1(comparer$$14, f$$7, k$$16, acc1, acc2) {\n  if (f$$7(k$$16)) {\n    return [SetTreeModule$$$add(comparer$$14, k$$16, acc1), acc2];\n  } else {\n    return [acc1, SetTreeModule$$$add(comparer$$14, k$$16, acc2)];\n  }\n}\nexport function SetTreeModule$$$partitionAux($arg$$40, $arg$$41, $arg$$42, $arg$$43, $arg$$44) {\n  SetTreeModule$$$partitionAux: while (true) {\n    const comparer$$15 = $arg$$40,\n          f$$8 = $arg$$41,\n          s$$4 = $arg$$42,\n          acc_0 = $arg$$43,\n          acc_1 = $arg$$44;\n    const acc$$7 = [acc_0, acc_1];\n\n    switch (s$$4.tag) {\n      case 2:\n        {\n          const k$$18 = s$$4.fields[0];\n          return SetTreeModule$$$partition1(comparer$$15, f$$8, k$$18, acc$$7[0], acc$$7[1]);\n        }\n\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      default:\n        {\n          const r$$15 = s$$4.fields[2];\n          const l$$15 = s$$4.fields[1];\n          const k$$17 = s$$4.fields[0];\n          const acc$$8 = SetTreeModule$$$partitionAux(comparer$$15, f$$8, r$$15, acc$$7[0], acc$$7[1]);\n          const acc$$9 = SetTreeModule$$$partition1(comparer$$15, f$$8, k$$17, acc$$8[0], acc$$8[1]);\n          $arg$$40 = comparer$$15;\n          $arg$$41 = f$$8;\n          $arg$$42 = l$$15;\n          $arg$$43 = acc$$9[0];\n          $arg$$44 = acc$$9[1];\n          continue SetTreeModule$$$partitionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$partition(comparer$$16, f$$9, s$$5) {\n  const seed = [new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")];\n  return SetTreeModule$$$partitionAux(comparer$$16, f$$9, s$$5, seed[0], seed[1]);\n}\nexport function SetTreeModule$$$$007CMatchSetNode$007CMatchSetEmpty$007C(s$$6) {\n  switch (s$$6.tag) {\n    case 2:\n      {\n        const k2$$19 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$19, new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")]);\n      }\n\n    case 0:\n      {\n        return new Choice(1, \"Choice2Of2\", null);\n      }\n\n    default:\n      {\n        const r$$16 = s$$6.fields[2];\n        const l$$16 = s$$6.fields[1];\n        const k2$$18 = s$$6.fields[0];\n        return new Choice(0, \"Choice1Of2\", [k2$$18, l$$16, r$$16]);\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElementAux(s$$7, n$$1) {\n  SetTreeModule$$$minimumElementAux: while (true) {\n    switch (s$$7.tag) {\n      case 2:\n        {\n          const k$$20 = s$$7.fields[0];\n          return k$$20;\n        }\n\n      case 0:\n        {\n          return n$$1;\n        }\n\n      default:\n        {\n          const l$$17 = s$$7.fields[1];\n          const k$$19 = s$$7.fields[0];\n          s$$7 = l$$17;\n          n$$1 = k$$19;\n          continue SetTreeModule$$$minimumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$minimumElementOpt(s$$8) {\n  switch (s$$8.tag) {\n    case 2:\n      {\n        const k$$22 = s$$8.fields[0];\n        return some(k$$22);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const l$$18 = s$$8.fields[1];\n        const k$$21 = s$$8.fields[0];\n        return some(SetTreeModule$$$minimumElementAux(l$$18, k$$21));\n      }\n  }\n}\nexport function SetTreeModule$$$maximumElementAux(s$$9, n$$2) {\n  SetTreeModule$$$maximumElementAux: while (true) {\n    switch (s$$9.tag) {\n      case 2:\n        {\n          const k$$24 = s$$9.fields[0];\n          return k$$24;\n        }\n\n      case 0:\n        {\n          return n$$2;\n        }\n\n      default:\n        {\n          const r$$17 = s$$9.fields[2];\n          const k$$23 = s$$9.fields[0];\n          s$$9 = r$$17;\n          n$$2 = k$$23;\n          continue SetTreeModule$$$maximumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$maximumElementOpt(s$$10) {\n  switch (s$$10.tag) {\n    case 2:\n      {\n        const k$$26 = s$$10.fields[0];\n        return some(k$$26);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        const r$$18 = s$$10.fields[2];\n        const k$$25 = s$$10.fields[0];\n        return some(SetTreeModule$$$maximumElementAux(r$$18, k$$25));\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElement(s$$11) {\n  const matchValue$$4 = SetTreeModule$$$minimumElementOpt(s$$11);\n\n  if (matchValue$$4 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$27 = value$$2(matchValue$$4);\n    return k$$27;\n  }\n}\nexport function SetTreeModule$$$maximumElement(s$$12) {\n  const matchValue$$5 = SetTreeModule$$$maximumElementOpt(s$$12);\n\n  if (matchValue$$5 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$28 = value$$2(matchValue$$5);\n    return k$$28;\n  }\n}\nexport const SetTreeModule$002ESetIterator$00601 = declare(function Set_SetTreeModule_SetIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function SetTreeModule$002ESetIterator$00601$reflection($gen$$48) {\n  return record(\"Set.SetTreeModule.SetIterator`1\", [$gen$$48], SetTreeModule$002ESetIterator$00601, () => [[\"stack\", list(SetTree$00601$reflection($gen$$48))], [\"started\", bool]]);\n}\nexport function SetTreeModule$$$collapseLHS(stack) {\n  SetTreeModule$$$collapseLHS: while (true) {\n    if (stack.tail != null) {\n      if (stack.head.tag === 2) {\n        return stack;\n      } else if (stack.head.tag === 1) {\n        const $stack$$49 = stack;\n        stack = new List($stack$$49.head.fields[1], new List(SetTreeModule$$$SetOne($stack$$49.head.fields[0]), new List($stack$$49.head.fields[2], $stack$$49.tail)));\n        continue SetTreeModule$$$collapseLHS;\n      } else {\n        const $stack$$50 = stack;\n        stack = $stack$$50.tail;\n        continue SetTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$mkIterator(s$$13) {\n  return new SetTreeModule$002ESetIterator$00601(SetTreeModule$$$collapseLHS(new List(s$$13, new List())), false);\n}\nexport function SetTreeModule$$$notStarted() {\n  throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule$$$alreadyFinished() {\n  throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule$$$current(i) {\n  if (i.started) {\n    const matchValue$$6 = i.stack;\n\n    if (matchValue$$6.tail == null) {\n      return SetTreeModule$$$alreadyFinished();\n    } else if (matchValue$$6.head.tag === 2) {\n      return matchValue$$6.head.fields[0];\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n    }\n  } else {\n    return SetTreeModule$$$notStarted();\n  }\n}\nexport function SetTreeModule$$$moveNext(i$$1) {\n  if (i$$1.started) {\n    const matchValue$$7 = i$$1.stack;\n\n    if (matchValue$$7.tail == null) {\n      return false;\n    } else if (matchValue$$7.head.tag === 2) {\n      i$$1.stack = SetTreeModule$$$collapseLHS(matchValue$$7.tail);\n      return !(i$$1.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$1.started = true;\n    return !(i$$1.stack.tail == null);\n  }\n}\nexport const SetTreeModule$002EmkIEnumerator$00601 = declare(function Set_SetTreeModule_mkIEnumerator(s$$14) {\n  const $this$$1 = this;\n  $this$$1.s = s$$14;\n  $this$$1.i = SetTreeModule$$$mkIterator($this$$1.s);\n});\nexport function SetTreeModule$002EmkIEnumerator$00601$reflection($gen$$51) {\n  return type(\"Set.SetTreeModule.mkIEnumerator`1\", [$gen$$51]);\n}\nexport function SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$14) {\n  return this != null ? SetTreeModule$002EmkIEnumerator$00601.call(this, s$$14) : new SetTreeModule$002EmkIEnumerator$00601(s$$14);\n}\nObject.defineProperty(SetTreeModule$002EmkIEnumerator$00601.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return SetTreeModule$$$current(__.i);\n  }\n});\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return SetTreeModule$$$moveNext(__$$1.i);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = SetTreeModule$$$mkIterator(__$$2.s);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Dispose = function () {};\n\nexport function SetTreeModule$$$mkIEnumerator(s$$15) {\n  return SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$15);\n}\nexport function SetTreeModule$$$toSeq(s$$16) {\n  const en = SetTreeModule$$$mkIEnumerator(s$$16);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport function SetTreeModule$$$compareStacks(comparer$$17, l1, l2) {\n  SetTreeModule$$$compareStacks: while (true) {\n    const matchValue$$8 = [l1, l2];\n    var $target$$52, t1$$6, t2$$6, n1k, n2k, t1$$7, t2$$7, n1k$$1, n2k$$1, n2r, t1$$8, t2$$8, emp, n1k$$2, n1r, n2k$$2, t1$$9, t2$$9, n1k$$3, n1r$$1, n2k$$3, n2r$$1, t1$$10, t2$$10, n1k$$4, t1$$11, n1k$$5, n1l, n1r$$2, t1$$12, n2k$$4, t2$$11, n2k$$5, n2l, n2r$$2, t2$$12;\n\n    if (matchValue$$8[0].tail != null) {\n      if (matchValue$$8[1].tail != null) {\n        if (matchValue$$8[1].head.tag === 2) {\n          if (matchValue$$8[0].head.tag === 2) {\n            $target$$52 = 4;\n            n1k = matchValue$$8[0].head.fields[0];\n            n2k = matchValue$$8[1].head.fields[0];\n            t1$$7 = matchValue$$8[0].tail;\n            t2$$7 = matchValue$$8[1].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            if (matchValue$$8[0].head.fields[1].tag === 0) {\n              $target$$52 = 6;\n              emp = matchValue$$8[0].head.fields[1];\n              n1k$$2 = matchValue$$8[0].head.fields[0];\n              n1r = matchValue$$8[0].head.fields[2];\n              n2k$$2 = matchValue$$8[1].head.fields[0];\n              t1$$9 = matchValue$$8[0].tail;\n              t2$$9 = matchValue$$8[1].tail;\n            } else {\n              $target$$52 = 9;\n              n1k$$5 = matchValue$$8[0].head.fields[0];\n              n1l = matchValue$$8[0].head.fields[1];\n              n1r$$2 = matchValue$$8[0].head.fields[2];\n              t1$$12 = matchValue$$8[0].tail;\n            }\n          } else {\n            $target$$52 = 10;\n            n2k$$4 = matchValue$$8[1].head.fields[0];\n            t2$$11 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[1].head.tag === 1) {\n          if (matchValue$$8[1].head.fields[1].tag === 0) {\n            if (matchValue$$8[0].head.tag === 2) {\n              $target$$52 = 5;\n              n1k$$1 = matchValue$$8[0].head.fields[0];\n              n2k$$1 = matchValue$$8[1].head.fields[0];\n              n2r = matchValue$$8[1].head.fields[2];\n              t1$$8 = matchValue$$8[0].tail;\n              t2$$8 = matchValue$$8[1].tail;\n            } else if (matchValue$$8[0].head.tag === 1) {\n              if (matchValue$$8[0].head.fields[1].tag === 0) {\n                $target$$52 = 7;\n                n1k$$3 = matchValue$$8[0].head.fields[0];\n                n1r$$1 = matchValue$$8[0].head.fields[2];\n                n2k$$3 = matchValue$$8[1].head.fields[0];\n                n2r$$1 = matchValue$$8[1].head.fields[2];\n                t1$$10 = matchValue$$8[0].tail;\n                t2$$10 = matchValue$$8[1].tail;\n              } else {\n                $target$$52 = 9;\n                n1k$$5 = matchValue$$8[0].head.fields[0];\n                n1l = matchValue$$8[0].head.fields[1];\n                n1r$$2 = matchValue$$8[0].head.fields[2];\n                t1$$12 = matchValue$$8[0].tail;\n              }\n            } else {\n              $target$$52 = 11;\n              n2k$$5 = matchValue$$8[1].head.fields[0];\n              n2l = matchValue$$8[1].head.fields[1];\n              n2r$$2 = matchValue$$8[1].head.fields[2];\n              t2$$12 = matchValue$$8[1].tail;\n            }\n          } else if (matchValue$$8[0].head.tag === 2) {\n            $target$$52 = 8;\n            n1k$$4 = matchValue$$8[0].head.fields[0];\n            t1$$11 = matchValue$$8[0].tail;\n          } else if (matchValue$$8[0].head.tag === 1) {\n            $target$$52 = 9;\n            n1k$$5 = matchValue$$8[0].head.fields[0];\n            n1l = matchValue$$8[0].head.fields[1];\n            n1r$$2 = matchValue$$8[0].head.fields[2];\n            t1$$12 = matchValue$$8[0].tail;\n          } else {\n            $target$$52 = 11;\n            n2k$$5 = matchValue$$8[1].head.fields[0];\n            n2l = matchValue$$8[1].head.fields[1];\n            n2r$$2 = matchValue$$8[1].head.fields[2];\n            t2$$12 = matchValue$$8[1].tail;\n          }\n        } else if (matchValue$$8[0].head.tag === 2) {\n          $target$$52 = 8;\n          n1k$$4 = matchValue$$8[0].head.fields[0];\n          t1$$11 = matchValue$$8[0].tail;\n        } else if (matchValue$$8[0].head.tag === 1) {\n          $target$$52 = 9;\n          n1k$$5 = matchValue$$8[0].head.fields[0];\n          n1l = matchValue$$8[0].head.fields[1];\n          n1r$$2 = matchValue$$8[0].head.fields[2];\n          t1$$12 = matchValue$$8[0].tail;\n        } else {\n          $target$$52 = 3;\n          t1$$6 = matchValue$$8[0].tail;\n          t2$$6 = matchValue$$8[1].tail;\n        }\n      } else {\n        $target$$52 = 2;\n      }\n    } else if (matchValue$$8[1].tail != null) {\n      $target$$52 = 1;\n    } else {\n      $target$$52 = 0;\n    }\n\n    switch ($target$$52) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          return -1 | 0;\n        }\n\n      case 2:\n        {\n          return 1;\n        }\n\n      case 3:\n        {\n          const $comparer$$17$$53 = comparer$$17;\n          comparer$$17 = $comparer$$17$$53;\n          l1 = t1$$6;\n          l2 = t2$$6;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 4:\n        {\n          const c$$7 = comparer$$17.Compare(n1k, n2k) | 0;\n\n          if (c$$7 !== 0) {\n            return c$$7 | 0;\n          } else {\n            const $comparer$$17$$54 = comparer$$17;\n            comparer$$17 = $comparer$$17$$54;\n            l1 = t1$$7;\n            l2 = t2$$7;\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 5:\n        {\n          const c$$8 = comparer$$17.Compare(n1k$$1, n2k$$1) | 0;\n\n          if (c$$8 !== 0) {\n            return c$$8 | 0;\n          } else {\n            const $comparer$$17$$55 = comparer$$17;\n            comparer$$17 = $comparer$$17$$55;\n            l1 = new List(new SetTree$00601(0, \"SetEmpty\"), t1$$8);\n            l2 = new List(n2r, t2$$8);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 6:\n        {\n          const c$$9 = comparer$$17.Compare(n1k$$2, n2k$$2) | 0;\n\n          if (c$$9 !== 0) {\n            return c$$9 | 0;\n          } else {\n            const $comparer$$17$$56 = comparer$$17;\n            comparer$$17 = $comparer$$17$$56;\n            l1 = new List(n1r, t1$$9);\n            l2 = new List(emp, t2$$9);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 7:\n        {\n          const c$$10 = comparer$$17.Compare(n1k$$3, n2k$$3) | 0;\n\n          if (c$$10 !== 0) {\n            return c$$10 | 0;\n          } else {\n            const $comparer$$17$$57 = comparer$$17;\n            comparer$$17 = $comparer$$17$$57;\n            l1 = new List(n1r$$1, t1$$10);\n            l2 = new List(n2r$$1, t2$$10);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 8:\n        {\n          const $comparer$$17$$58 = comparer$$17;\n          const $l2$$59 = l2;\n          comparer$$17 = $comparer$$17$$58;\n          l1 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n1k$$4), t1$$11));\n          l2 = $l2$$59;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 9:\n        {\n          const $comparer$$17$$60 = comparer$$17;\n          const $l2$$61 = l2;\n          comparer$$17 = $comparer$$17$$60;\n          l1 = new List(n1l, new List(SetTreeModule$$$SetNode(n1k$$5, new SetTree$00601(0, \"SetEmpty\"), n1r$$2, 0), t1$$12));\n          l2 = $l2$$61;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 10:\n        {\n          const $comparer$$17$$62 = comparer$$17;\n          const $l1$$63 = l1;\n          comparer$$17 = $comparer$$17$$62;\n          l1 = $l1$$63;\n          l2 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n2k$$4), t2$$11));\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 11:\n        {\n          const $comparer$$17$$64 = comparer$$17;\n          const $l1$$65 = l1;\n          comparer$$17 = $comparer$$17$$64;\n          l1 = $l1$$65;\n          l2 = new List(n2l, new List(SetTreeModule$$$SetNode(n2k$$5, new SetTree$00601(0, \"SetEmpty\"), n2r$$2, 0), t2$$12));\n          continue SetTreeModule$$$compareStacks;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$compare(comparer$$18, s1, s2) {\n  const matchValue$$9 = [s1, s2];\n\n  if (matchValue$$9[0].tag === 0) {\n    if (matchValue$$9[1].tag === 0) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (matchValue$$9[1].tag === 0) {\n    return 1;\n  } else {\n    return SetTreeModule$$$compareStacks(comparer$$18, new List(s1, new List()), new List(s2, new List())) | 0;\n  }\n}\nexport function SetTreeModule$$$choose(s$$17) {\n  return SetTreeModule$$$minimumElement(s$$17);\n}\nexport function SetTreeModule$$$loop(m$$8, acc$$10) {\n  SetTreeModule$$$loop: while (true) {\n    switch (m$$8.tag) {\n      case 2:\n        {\n          const k$$32 = m$$8.fields[0];\n          return new List(k$$32, acc$$10);\n        }\n\n      case 0:\n        {\n          return acc$$10;\n        }\n\n      default:\n        {\n          const r$$20 = m$$8.fields[2];\n          const l$$20 = m$$8.fields[1];\n          const k$$31 = m$$8.fields[0];\n          const $acc$$10$$66 = acc$$10;\n          m$$8 = l$$20;\n          acc$$10 = new List(k$$31, SetTreeModule$$$loop(r$$20, $acc$$10$$66));\n          continue SetTreeModule$$$loop;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$toList(s$$18) {\n  return SetTreeModule$$$loop(s$$18, new List());\n}\nexport function SetTreeModule$$$copyToArray(s$$19, arr, i$$2) {\n  let j = i$$2 | 0;\n  SetTreeModule$$$iter(function (x$$8) {\n    arr[j] = x$$8;\n    j = j + 1;\n  }, s$$19);\n}\nexport function SetTreeModule$$$mkFromEnumerator(comparer$$19, acc$$11, e) {\n  SetTreeModule$$$mkFromEnumerator: while (true) {\n    if (e.MoveNext()) {\n      const $acc$$11$$68 = acc$$11;\n      const $comparer$$19$$67 = comparer$$19;\n      const $e$$69 = e;\n      comparer$$19 = $comparer$$19$$67;\n      acc$$11 = SetTreeModule$$$add($comparer$$19$$67, $e$$69.Current, $acc$$11$$68);\n      e = $e$$69;\n      continue SetTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$11;\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$ofSeq(comparer$$20, c$$11) {\n  const ie = getEnumerator(c$$11);\n\n  try {\n    return SetTreeModule$$$mkFromEnumerator(comparer$$20, new SetTree$00601(0, \"SetEmpty\"), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function SetTreeModule$$$ofArray(comparer$$21, arr$$1) {\n  let acc$$12 = new SetTree$00601(0, \"SetEmpty\");\n\n  for (let i$$3 = 0; i$$3 <= arr$$1.length - 1; i$$3++) {\n    acc$$12 = SetTreeModule$$$add(comparer$$21, arr$$1[i$$3], acc$$12);\n  }\n\n  return acc$$12;\n}\nexport const FSharpSet = declare(function Set_Set(comparer$$22, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$22;\n  $this$$2.tree = tree;\n});\nexport function FSharpSet$reflection($gen$$70) {\n  return type(\"Set.FSharpSet\", [$gen$$70]);\n}\nexport function FSharpSet$$$$002Ector$$2528C5CB(comparer$$22, tree) {\n  return this != null ? FSharpSet.call(this, comparer$$22, tree) : new FSharpSet(comparer$$22, tree);\n}\nexport function FSharpSet$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpSet$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpSet$$Add$$2B595(s$$20, x$$9) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$20), SetTreeModule$$$add(FSharpSet$$get_Comparer(s$$20), x$$9, FSharpSet$$get_Tree(s$$20)));\n}\nexport function FSharpSet$$Remove$$2B595(s$$21, x$$10) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$21), SetTreeModule$$$remove(FSharpSet$$get_Comparer(s$$21), x$$10, FSharpSet$$get_Tree(s$$21)));\n}\nexport function FSharpSet$$get_Count(s$$22) {\n  return SetTreeModule$$$count(FSharpSet$$get_Tree(s$$22));\n}\nexport function FSharpSet$$Contains$$2B595(s$$23, x$$11) {\n  return SetTreeModule$$$mem(FSharpSet$$get_Comparer(s$$23), x$$11, FSharpSet$$get_Tree(s$$23));\n}\nexport function FSharpSet$$Iterate$$5028453F(s$$24, x$$12) {\n  SetTreeModule$$$iter(x$$12, FSharpSet$$get_Tree(s$$24));\n}\nexport function FSharpSet$$Fold(s$$25, f$$10, z) {\n  return SetTreeModule$$$fold(function (x$$13, z$$1) {\n    return f$$10(z$$1, x$$13);\n  }, z, FSharpSet$$get_Tree(s$$25));\n}\nexport function FSharpSet$$get_IsEmpty(s$$26) {\n  return SetTreeModule$$$isEmpty(FSharpSet$$get_Tree(s$$26));\n}\nexport function FSharpSet$$Partition$$Z1D55A0D7(s$$27, f$$11) {\n  if (FSharpSet$$get_Tree(s$$27).tag === 0) {\n    return [s$$27, s$$27];\n  } else {\n    const patternInput$$6 = SetTreeModule$$$partition(FSharpSet$$get_Comparer(s$$27), f$$11, FSharpSet$$get_Tree(s$$27));\n    return [FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[0]), FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[1])];\n  }\n}\nexport function FSharpSet$$Filter$$Z1D55A0D7(s$$28, f$$12) {\n  if (FSharpSet$$get_Tree(s$$28).tag === 0) {\n    return s$$28;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$28), SetTreeModule$$$filter(FSharpSet$$get_Comparer(s$$28), f$$12, FSharpSet$$get_Tree(s$$28)));\n  }\n}\nexport function FSharpSet$$Map$$38806891(s$$29, f$$13, comparer$$23) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$23, SetTreeModule$$$fold(function (acc$$13, k$$33) {\n    return SetTreeModule$$$add(comparer$$23, f$$13(k$$33), acc$$13);\n  }, new SetTree$00601(0, \"SetEmpty\"), FSharpSet$$get_Tree(s$$29)));\n}\nexport function FSharpSet$$Exists$$Z1D55A0D7(s$$30, f$$14) {\n  return SetTreeModule$$$exists(f$$14, FSharpSet$$get_Tree(s$$30));\n}\nexport function FSharpSet$$ForAll$$Z1D55A0D7(s$$31, f$$15) {\n  return SetTreeModule$$$forall(f$$15, FSharpSet$$get_Tree(s$$31));\n}\nexport function FSharpSet$$$op_Subtraction(a$$4, b$$5) {\n  if (FSharpSet$$get_Tree(a$$4).tag === 0) {\n    return a$$4;\n  } else if (FSharpSet$$get_Tree(b$$5).tag === 0) {\n    return a$$4;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$4), SetTreeModule$$$diff(FSharpSet$$get_Comparer(a$$4), FSharpSet$$get_Tree(a$$4), FSharpSet$$get_Tree(b$$5)));\n  }\n}\nexport function FSharpSet$$$op_Addition(a$$5, b$$6) {\n  if (FSharpSet$$get_Tree(b$$6).tag === 0) {\n    return a$$5;\n  } else if (FSharpSet$$get_Tree(a$$5).tag === 0) {\n    return b$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$5), SetTreeModule$$$union(FSharpSet$$get_Comparer(a$$5), FSharpSet$$get_Tree(a$$5), FSharpSet$$get_Tree(b$$6)));\n  }\n}\nexport function FSharpSet$$$Intersection$$Z3BE9BFE0(a$$6, b$$7) {\n  if (FSharpSet$$get_Tree(b$$7).tag === 0) {\n    return b$$7;\n  } else if (FSharpSet$$get_Tree(a$$6).tag === 0) {\n    return a$$6;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$6), SetTreeModule$$$intersection(FSharpSet$$get_Comparer(a$$6), FSharpSet$$get_Tree(a$$6), FSharpSet$$get_Tree(b$$7)));\n  }\n}\nexport function FSharpSet$$$IntersectionMany$$Z15B59630(sets) {\n  return reduce(FSharpSet$$$Intersection$$Z3BE9BFE0, sets);\n}\nexport function FSharpSet$$$Equality$$Z3BE9BFE0(a$$7, b$$8) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$7), FSharpSet$$get_Tree(a$$7), FSharpSet$$get_Tree(b$$8)) === 0;\n}\nexport function FSharpSet$$$Compare$$Z3BE9BFE0(a$$8, b$$9) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$8), FSharpSet$$get_Tree(a$$8), FSharpSet$$get_Tree(b$$9));\n}\nexport function FSharpSet$$get_Choose(x$$14) {\n  return SetTreeModule$$$choose(FSharpSet$$get_Tree(x$$14));\n}\nexport function FSharpSet$$get_MinimumElement(x$$15) {\n  return SetTreeModule$$$minimumElement(FSharpSet$$get_Tree(x$$15));\n}\nexport function FSharpSet$$get_MaximumElement(x$$16) {\n  return SetTreeModule$$$maximumElement(FSharpSet$$get_Tree(x$$16));\n}\nexport function FSharpSet$$IsSubsetOf$$6A20B1FF(x$$17, y) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$17), FSharpSet$$get_Tree(x$$17), FSharpSet$$get_Tree(y));\n}\nexport function FSharpSet$$IsSupersetOf$$6A20B1FF(x$$18, y$$1) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$18), FSharpSet$$get_Tree(y$$1), FSharpSet$$get_Tree(x$$18));\n}\nexport function FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$19, y$$2) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$19), FSharpSet$$get_Tree(x$$19), FSharpSet$$get_Tree(y$$2));\n}\nexport function FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$20, y$$3) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$20), FSharpSet$$get_Tree(y$$3), FSharpSet$$get_Tree(x$$20));\n}\n\nFSharpSet.prototype.toString = function () {\n  const this$ = this;\n  return \"set [\" + join(\"; \", ...map$$1(String, this$)) + \"]\";\n};\n\nFSharpSet.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$22, y$$4) {\n    return (x$$22 << 1) + y$$4 + 631;\n  };\n\n  let res = 0;\n  const e$$1 = SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    res = combineHash(res, structuralHash(e$$1.Current));\n  }\n\n  return Math.abs(res) | 0;\n};\n\nFSharpSet.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$2), FSharpSet$$get_Tree(this$$$2), FSharpSet$$get_Tree(that)) === 0;\n};\n\nFSharpSet.prototype.CompareTo = function (that$$1) {\n  const this$$$3 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$3), FSharpSet$$get_Tree(this$$$3), FSharpSet$$get_Tree(that$$1)) | 0;\n};\n\nFSharpSet.prototype[Symbol.iterator] = function () {\n  const s$$32 = this;\n  return toIterator(SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(s$$32)));\n};\n\nexport function isEmpty(s$$33) {\n  return FSharpSet$$get_IsEmpty(s$$33);\n}\nexport function contains(x$$23, s$$34) {\n  return FSharpSet$$Contains$$2B595(s$$34, x$$23);\n}\nexport function add(x$$24, s$$35) {\n  return FSharpSet$$Add$$2B595(s$$35, x$$24);\n}\nexport function singleton(x$$25, comparer$$24) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$24, new SetTree$00601(2, \"SetOne\", x$$25));\n}\nexport function remove(x$$26, s$$36) {\n  return FSharpSet$$Remove$$2B595(s$$36, x$$26);\n}\nexport function union(s1$$2, s2$$2) {\n  return FSharpSet$$$op_Addition(s1$$2, s2$$2);\n}\nexport function unionMany(sets$$1, comparer$$25) {\n  return fold$$1(FSharpSet$$$op_Addition, FSharpSet$$$$002Ector$$2528C5CB(comparer$$25, new SetTree$00601(0, \"SetEmpty\")), sets$$1);\n}\nexport function intersect(s1$$3, s2$$3) {\n  return FSharpSet$$$Intersection$$Z3BE9BFE0(s1$$3, s2$$3);\n}\nexport function intersectMany(sets$$2) {\n  return FSharpSet$$$IntersectionMany$$Z15B59630(sets$$2);\n}\nexport function iterate(f$$16, s$$37) {\n  FSharpSet$$Iterate$$5028453F(s$$37, f$$16);\n}\nexport function empty(comparer$$26) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$26, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function forAll(f$$17, s$$38) {\n  return FSharpSet$$ForAll$$Z1D55A0D7(s$$38, f$$17);\n}\nexport function exists(f$$18, s$$39) {\n  return FSharpSet$$Exists$$Z1D55A0D7(s$$39, f$$18);\n}\nexport function filter(f$$19, s$$40) {\n  return FSharpSet$$Filter$$Z1D55A0D7(s$$40, f$$19);\n}\nexport function partition(f$$20, s$$41) {\n  return FSharpSet$$Partition$$Z1D55A0D7(s$$41, f$$20);\n}\nexport function fold(f$$21, z$$2, s$$42) {\n  return SetTreeModule$$$fold(f$$21, z$$2, FSharpSet$$get_Tree(s$$42));\n}\nexport function foldBack(f$$22, s$$43, z$$3) {\n  return SetTreeModule$$$foldBack(f$$22, FSharpSet$$get_Tree(s$$43), z$$3);\n}\nexport function map(f$$23, s$$44, comparer$$27) {\n  return FSharpSet$$Map$$38806891(s$$44, f$$23, comparer$$27);\n}\nexport function count(s$$45) {\n  return FSharpSet$$get_Count(s$$45);\n}\nexport function minimumElement(s$$46) {\n  return FSharpSet$$get_MinimumElement(s$$46);\n}\nexport function maximumElement(s$$47) {\n  return FSharpSet$$get_MaximumElement(s$$47);\n}\nexport function ofList(li, comparer$$28) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$28, SetTreeModule$$$ofSeq(comparer$$28, li));\n}\nexport function ofArray(arr$$2, comparer$$29) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$29, SetTreeModule$$$ofArray(comparer$$29, arr$$2));\n}\nexport function toList(s$$48) {\n  return SetTreeModule$$$toList(FSharpSet$$get_Tree(s$$48));\n}\nexport function toArray(s$$49, cons) {\n  const n$$3 = count(s$$49) | 0;\n  const res$$1 = new cons(n$$3);\n  SetTreeModule$$$copyToArray(FSharpSet$$get_Tree(s$$49), res$$1, 0);\n  return res$$1;\n}\nexport function toSeq(s$$50) {\n  return SetTreeModule$$$toSeq(FSharpSet$$get_Tree(s$$50));\n}\nexport function ofSeq(elements, comparer$$30) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$30, SetTreeModule$$$ofSeq(comparer$$30, elements));\n}\nexport function difference(x$$28, y$$6) {\n  return FSharpSet$$$op_Subtraction(x$$28, y$$6);\n}\nexport function isSubset(x$$29, y$$7) {\n  return FSharpSet$$IsSubsetOf$$6A20B1FF(x$$29, y$$7);\n}\nexport function isSuperset(x$$30, y$$8) {\n  return FSharpSet$$IsSupersetOf$$6A20B1FF(x$$30, y$$8);\n}\nexport function isProperSubset(x$$31, y$$9) {\n  return FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$31, y$$9);\n}\nexport function isProperSuperset(x$$32, y$$10) {\n  return FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$32, y$$10);\n}\nexport function minElement(s$$51) {\n  return FSharpSet$$get_MinimumElement(s$$51);\n}\nexport function maxElement(s$$52) {\n  return FSharpSet$$get_MaximumElement(s$$52);\n}\n\nfunction createMutablePrivate(comparer$$31, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return SetTreeModule$$$count(tree$$1);\n    },\n\n    add(x$$33) {\n      const this$$$4 = this;\n      tree$$1 = SetTreeModule$$$add(comparer$$31, x$$33, tree$$1);\n      return this$$$4;\n    },\n\n    add_(x$$34) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$34, tree$$1)) {\n        return false;\n      } else {\n        tree$$1 = SetTreeModule$$$add(comparer$$31, x$$34, tree$$1);\n        return true;\n      }\n    },\n\n    clear() {\n      tree$$1 = new SetTree$00601(0, \"SetEmpty\");\n    },\n\n    delete(x$$35) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$35, tree$$1)) {\n        tree$$1 = SetTreeModule$$$remove(comparer$$31, x$$35, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    has(x$$36) {\n      return SetTreeModule$$$mem(comparer$$31, x$$36, tree$$1);\n    },\n\n    values() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(SetTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return SetTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source, comparer$$32) {\n  return createMutablePrivate(comparer$$32, SetTreeModule$$$ofSeq(comparer$$32, source));\n}\nexport function distinct(xs, comparer$$33) {\n  return createMutable(xs, comparer$$33);\n}\nexport function distinctBy(projection, xs$$1, comparer$$34) {\n  const li$$1 = [];\n  const hashSet = createMutable(empty$$1(), comparer$$34);\n  iterate$$1(function (x$$37) {\n    if (hashSet.add_(projection(x$$37))) {\n      li$$1.push(x$$37);\n    }\n  }, xs$$1);\n  return li$$1;\n}\nexport function unionWith(s1$$4, s2$$4) {\n  return fold$$1(function folder(acc$$14, x$$38) {\n    return acc$$14.add(x$$38);\n  }, s1$$4, s2$$4);\n}\nexport function intersectWith(s1$$5, s2$$5, comparer$$35) {\n  const s2$$6 = ofSeq(s2$$5, comparer$$35);\n  iterate$$1(function (x$$39) {\n    if (!FSharpSet$$Contains$$2B595(s2$$6, x$$39)) {\n      s1$$5.delete(x$$39);\n    }\n  }, s1$$5);\n}\nexport function exceptWith(s1$$6, s2$$7) {\n  iterate$$1(function (x$$40) {\n    s1$$6.delete(x$$40);\n  }, s2$$7);\n}\nexport function isSubsetOf(s1$$7, s2$$8, comparer$$36) {\n  return isSubset(ofSeq(s1$$7, comparer$$36), ofSeq(s2$$8, comparer$$36));\n}\nexport function isSupersetOf(s1$$8, s2$$9, comparer$$37) {\n  return isSuperset(ofSeq(s1$$8, comparer$$37), ofSeq(s2$$9, comparer$$37));\n}\nexport function isProperSubsetOf(s1$$9, s2$$10, comparer$$38) {\n  return isProperSubset(ofSeq(s1$$9, comparer$$38), ofSeq(s2$$10, comparer$$38));\n}\nexport function isProperSupersetOf(s1$$10, s2$$11, comparer$$39) {\n  return isProperSuperset(ofSeq(s1$$10, comparer$$39), ofSeq(s2$$11, comparer$$39));\n}","import { defaultArg, value as value$$11, some } from \"./Option\";\nimport { compare, addToSet, tryGetValue, comparerFromEqualityComparer, max as max$$1, comparePrimitives } from \"./Util\";\nimport { createMutable } from \"./Map\";\nimport { delay, map as map$$1, rangeNumber, iterate as iterate$$1 } from \"./Seq\";\nimport { createMutable as createMutable$$1 } from \"./Set\";\nimport { List } from \"./Types\";\nimport { ofSeq as ofSeq$$1 } from \"./Array\";\n\nfunction indexNotFound() {\n  throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\n\nexport function append(array1, array2, cons) {\n  if (ArrayBuffer.isView(array1)) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new cons(len1 + len2);\n\n    for (let i = 0; i <= len1 - 1; i++) {\n      newArray[i] = array1[i];\n    }\n\n    for (let i$$1 = 0; i$$1 <= len2 - 1; i$$1++) {\n      newArray[i$$1 + len1] = array2[i$$1];\n    }\n\n    return newArray;\n  } else {\n    return array1.concat(array2);\n  }\n}\nexport function filter(predicate, array) {\n  return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n  target.fill(value, targetIndex, targetIndex + count);\n  return target;\n}\nexport function getSubArray(array$$3, start$$1, count$$2) {\n  return array$$3.slice(start$$1, start$$1 + count$$2);\n}\nexport function last(array$$5) {\n  if (array$$5.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  return array$$5[array$$5.length - 1];\n}\nexport function tryLast(array$$6) {\n  if (array$$6.length === 0) {\n    return null;\n  } else {\n    return some(array$$6[array$$6.length - 1]);\n  }\n}\nexport function mapIndexed(f, source, cons$$1) {\n  if (ArrayBuffer.isView(source)) {\n    const len = source.length | 0;\n    const target$$1 = new cons$$1(len);\n\n    for (let i$$2 = 0; i$$2 <= len - 1; i$$2++) {\n      target$$1[i$$2] = f(i$$2, source[i$$2]);\n    }\n\n    return target$$1;\n  } else {\n    return source.map(function mapping(x, i$$3) {\n      return f(i$$3, x);\n    });\n  }\n}\nexport function map(f$$1, source$$1, cons$$2) {\n  if (ArrayBuffer.isView(source$$1)) {\n    const len$$1 = source$$1.length | 0;\n    const target$$2 = new cons$$2(len$$1);\n\n    for (let i$$4 = 0; i$$4 <= len$$1 - 1; i$$4++) {\n      target$$2[i$$4] = f$$1(source$$1[i$$4]);\n    }\n\n    return target$$2;\n  } else {\n    return source$$1.map(function mapping$$1(x$$1) {\n      return f$$1(x$$1);\n    });\n  }\n}\nexport function mapIndexed2(f$$2, source1, source2, cons$$3) {\n  if (source1.length !== source2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result = new cons$$3(source1.length);\n\n  for (let i$$5 = 0; i$$5 <= source1.length - 1; i$$5++) {\n    result[i$$5] = f$$2(i$$5, source1[i$$5], source2[i$$5]);\n  }\n\n  return result;\n}\nexport function map2(f$$3, source1$$1, source2$$1, cons$$4) {\n  if (source1$$1.length !== source2$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$1 = new cons$$4(source1$$1.length);\n\n  for (let i$$6 = 0; i$$6 <= source1$$1.length - 1; i$$6++) {\n    result$$1[i$$6] = f$$3(source1$$1[i$$6], source2$$1[i$$6]);\n  }\n\n  return result$$1;\n}\nexport function mapIndexed3(f$$4, source1$$2, source2$$2, source3, cons$$5) {\n  if (source1$$2.length !== source2$$2.length ? true : source2$$2.length !== source3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$2 = new cons$$5(source1$$2.length);\n\n  for (let i$$7 = 0; i$$7 <= source1$$2.length - 1; i$$7++) {\n    result$$2[i$$7] = f$$4(i$$7, source1$$2[i$$7], source2$$2[i$$7], source3[i$$7]);\n  }\n\n  return result$$2;\n}\nexport function map3(f$$5, source1$$3, source2$$3, source3$$1, cons$$6) {\n  if (source1$$3.length !== source2$$3.length ? true : source2$$3.length !== source3$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$3 = new cons$$6(source1$$3.length);\n\n  for (let i$$8 = 0; i$$8 <= source1$$3.length - 1; i$$8++) {\n    result$$3[i$$8] = f$$5(source1$$3[i$$8], source2$$3[i$$8], source3$$1[i$$8]);\n  }\n\n  return result$$3;\n}\nexport function mapFold(mapping$$2, state, array$$9, cons$$7) {\n  const matchValue = array$$9.length | 0;\n\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    const len$$2 = matchValue | 0;\n    let acc = state;\n    const res = new cons$$7(len$$2);\n\n    for (let i$$9 = 0; i$$9 <= array$$9.length - 1; i$$9++) {\n      const patternInput = mapping$$2(acc, array$$9[i$$9]);\n      res[i$$9] = patternInput[0];\n      acc = patternInput[1];\n    }\n\n    return [res, acc];\n  }\n}\nexport function mapFoldBack(mapping$$3, array$$10, state$$1, cons$$8) {\n  const matchValue$$1 = array$$10.length | 0;\n\n  if (matchValue$$1 === 0) {\n    return [[], state$$1];\n  } else {\n    const len$$3 = matchValue$$1 | 0;\n    let acc$$1 = state$$1;\n    const res$$1 = new cons$$8(len$$3);\n\n    for (let i$$10 = array$$10.length - 1; i$$10 >= 0; i$$10--) {\n      const patternInput$$1 = mapping$$3(array$$10[i$$10], acc$$1);\n      res$$1[i$$10] = patternInput$$1[0];\n      acc$$1 = patternInput$$1[1];\n    }\n\n    return [res$$1, acc$$1];\n  }\n}\nexport function indexed(source$$2) {\n  const len$$4 = source$$2.length | 0;\n  const target$$3 = new Array(len$$4);\n\n  for (let i$$11 = 0; i$$11 <= len$$4 - 1; i$$11++) {\n    target$$3[i$$11] = [i$$11, source$$2[i$$11]];\n  }\n\n  return target$$3;\n}\nexport function truncate(count$$4, array$$11) {\n  const count$$5 = max$$1(comparePrimitives, 0, count$$4) | 0;\n  return array$$11.slice(0, 0 + count$$5);\n}\nexport function concat(arrays, cons$$9) {\n  const arrays$$1 = Array.from(arrays);\n  const matchValue$$2 = arrays$$1.length | 0;\n\n  switch (matchValue$$2) {\n    case 0:\n      {\n        return new cons$$9(0);\n      }\n\n    case 1:\n      {\n        return arrays$$1[0];\n      }\n\n    default:\n      {\n        if (ArrayBuffer.isView(arrays$$1[0])) {\n          let totalIdx = 0;\n          let totalLength = 0;\n\n          for (let idx = 0; idx <= arrays$$1.length - 1; idx++) {\n            const arr$$4 = arrays$$1[idx];\n            totalLength = totalLength + arr$$4.length;\n          }\n\n          const result$$4 = new cons$$9(totalLength);\n\n          for (let idx$$1 = 0; idx$$1 <= arrays$$1.length - 1; idx$$1++) {\n            const arr$$5 = arrays$$1[idx$$1];\n\n            for (let j = 0; j <= arr$$5.length - 1; j++) {\n              result$$4[totalIdx] = arr$$5[j];\n              totalIdx = totalIdx + 1;\n            }\n          }\n\n          return result$$4;\n        } else {\n          return arrays$$1[0].concat(...arrays$$1.slice(1));\n        }\n      }\n  }\n}\nexport function collect(mapping$$4, array$$14, cons$$10) {\n  const mapped = map(mapping$$4, array$$14, Array);\n  return concat(mapped, cons$$10);\n}\nexport function countBy(projection, array$$15, eq) {\n  const dict = createMutable([], comparerFromEqualityComparer(eq));\n\n  for (let idx$$2 = 0; idx$$2 <= array$$15.length - 1; idx$$2++) {\n    const value$$2 = array$$15[idx$$2];\n    const key = projection(value$$2);\n    const matchValue$$3 = tryGetValue(dict, key, 0);\n\n    if (matchValue$$3[0]) {\n      dict.set(key, matchValue$$3[1] + 1);\n    } else {\n      dict.set(key, 1);\n    }\n  }\n\n  const res$$2 = new Array(dict.size);\n  let i$$12 = 0;\n  iterate$$1(function (group) {\n    res$$2[i$$12] = [group[0], group[1]];\n    i$$12 = i$$12 + 1;\n  }, dict);\n  return res$$2;\n}\nexport function distinctBy(projection$$1, array$$16, eq$$1) {\n  const hashSet = createMutable$$1([], comparerFromEqualityComparer(eq$$1));\n  return filter(function predicate$$2($arg$$3) {\n    return addToSet(projection$$1($arg$$3), hashSet);\n  }, array$$16);\n}\nexport function distinct(array$$18, eq$$2) {\n  return distinctBy(function (x$$2) {\n    return x$$2;\n  }, array$$18, eq$$2);\n}\nexport function where(predicate$$3, array$$19) {\n  return array$$19.filter(predicate$$3);\n}\nexport function contains(value$$3, array$$21, eq$$3) {\n  const loop = function loop(i$$13) {\n    loop: while (true) {\n      if (i$$13 >= array$$21.length) {\n        return false;\n      } else if (eq$$3.Equals(value$$3, array$$21[i$$13])) {\n        return true;\n      } else {\n        const $i$$13$$49 = i$$13;\n        i$$13 = $i$$13$$49 + 1;\n        continue loop;\n      }\n\n      break;\n    }\n  };\n\n  return loop(0);\n}\nexport function except(itemsToExclude, array$$22, eq$$4) {\n  if (array$$22.length === 0) {\n    return array$$22;\n  } else {\n    const cached = createMutable$$1(itemsToExclude, comparerFromEqualityComparer(eq$$4));\n    return array$$22.filter(function predicate$$5(arg00$$1) {\n      return addToSet(arg00$$1, cached);\n    });\n  }\n}\nexport function groupBy(projection$$2, array$$25, cons$$11, eq$$5) {\n  const dict$$1 = createMutable([], comparerFromEqualityComparer(eq$$5));\n\n  for (let idx$$3 = 0; idx$$3 <= array$$25.length - 1; idx$$3++) {\n    const v = array$$25[idx$$3];\n    const key$$1 = projection$$2(v);\n    const matchValue$$4 = tryGetValue(dict$$1, key$$1, null);\n\n    if (matchValue$$4[0]) {\n      matchValue$$4[1].push(v);\n    } else {\n      const prev$$2 = [v];\n      dict$$1.set(key$$1, prev$$2);\n    }\n  }\n\n  const result$$5 = new Array(dict$$1.size);\n  let i$$14 = 0;\n  iterate$$1(function (group$$1) {\n    result$$5[i$$14] = [group$$1[0], cons$$11.from(group$$1[1])];\n    i$$14 = i$$14 + 1;\n  }, dict$$1);\n  return result$$5;\n}\nexport function empty(cons$$12) {\n  return new cons$$12(0);\n}\nexport function singleton(value$$5, cons$$14) {\n  const ar = new cons$$14(1);\n  ar[0] = value$$5;\n  return ar;\n}\nexport function initialize(count$$8, initializer, cons$$15) {\n  if (count$$8 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$6 = new cons$$15(count$$8);\n\n  for (let i$$15 = 0; i$$15 <= count$$8 - 1; i$$15++) {\n    result$$6[i$$15] = initializer(i$$15);\n  }\n\n  return result$$6;\n}\nexport function pairwise(array$$27) {\n  if (array$$27.length < 2) {\n    return [];\n  } else {\n    const count$$9 = array$$27.length - 1 | 0;\n    const result$$7 = new Array(count$$9);\n\n    for (let i$$16 = 0; i$$16 <= count$$9 - 1; i$$16++) {\n      result$$7[i$$16] = [array$$27[i$$16], array$$27[i$$16 + 1]];\n    }\n\n    return result$$7;\n  }\n}\nexport function replicate(count$$10, initial, cons$$16) {\n  if (count$$10 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$8 = new cons$$16(count$$10);\n\n  for (let i$$17 = 0; i$$17 <= result$$8.length - 1; i$$17++) {\n    result$$8[i$$17] = initial;\n  }\n\n  return result$$8;\n}\nexport function copy(array$$28, cons$$17) {\n  return array$$28.slice();\n}\nexport function reverse(array$$30, cons$$18) {\n  return array$$30.slice().reverse();\n}\nexport function scan(folder, state$$2, array$$34, cons$$19) {\n  const res$$3 = new cons$$19(array$$34.length + 1);\n  res$$3[0] = state$$2;\n\n  for (let i$$18 = 0; i$$18 <= array$$34.length - 1; i$$18++) {\n    res$$3[i$$18 + 1] = folder(res$$3[i$$18], array$$34[i$$18]);\n  }\n\n  return res$$3;\n}\nexport function scanBack(folder$$1, array$$35, state$$3, cons$$20) {\n  const res$$4 = new cons$$20(array$$35.length + 1);\n  res$$4[array$$35.length] = state$$3;\n\n  for (let i$$19 = array$$35.length - 1; i$$19 >= 0; i$$19--) {\n    res$$4[i$$19] = folder$$1(array$$35[i$$19], res$$4[i$$19 + 1]);\n  }\n\n  return res$$4;\n}\nexport function skip(count$$11, array$$36, cons$$21) {\n  if (count$$11 > array$$36.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$11 === array$$36.length) {\n    return new cons$$21(0);\n  } else {\n    const count$$12 = (count$$11 < 0 ? 0 : count$$11) | 0;\n    return array$$36.slice(count$$12);\n  }\n}\nexport function skipWhile(predicate$$7, array$$38, cons$$23) {\n  let count$$14 = 0;\n\n  while (count$$14 < array$$38.length ? predicate$$7(array$$38[count$$14]) : false) {\n    count$$14 = count$$14 + 1;\n  }\n\n  if (count$$14 === array$$38.length) {\n    return new cons$$23(0);\n  } else {\n    return array$$38.slice(count$$14);\n  }\n}\nexport function take(count$$16, array$$40, cons$$25) {\n  if (count$$16 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  if (count$$16 > array$$40.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$16 === 0) {\n    return new cons$$25(0);\n  } else {\n    return array$$40.slice(0, 0 + count$$16);\n  }\n}\nexport function takeWhile(predicate$$8, array$$42, cons$$27) {\n  let count$$18 = 0;\n\n  while (count$$18 < array$$42.length ? predicate$$8(array$$42[count$$18]) : false) {\n    count$$18 = count$$18 + 1;\n  }\n\n  if (count$$18 === 0) {\n    return new cons$$27(0);\n  } else {\n    return array$$42.slice(0, 0 + count$$18);\n  }\n}\nexport function addRangeInPlace(range, array$$44) {\n  const iter = range[Symbol.iterator]();\n  let cur = iter.next();\n\n  while (!cur.done) {\n    array$$44.push(cur.value);\n    cur = iter.next();\n  }\n}\nexport function removeInPlace(item$$3, array$$46) {\n  const i$$20 = array$$46.indexOf(item$$3);\n\n  if (i$$20 > -1) {\n    array$$46.splice(i$$20, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function removeAllInPlace(predicate$$9, array$$49) {\n  const countRemoveAll = function countRemoveAll(count$$20) {\n    const i$$21 = array$$49.findIndex(predicate$$9);\n\n    if (i$$21 > -1) {\n      array$$49.splice(i$$21, 1);\n      return countRemoveAll(count$$20) + 1 | 0;\n    } else {\n      return count$$20 | 0;\n    }\n  };\n\n  return countRemoveAll(0) | 0;\n}\nexport function copyTo(source$$3, sourceIndex, target$$4, targetIndex$$1, count$$21) {\n  const diff = targetIndex$$1 - sourceIndex | 0;\n\n  for (let i$$22 = sourceIndex; i$$22 <= sourceIndex + count$$21 - 1; i$$22++) {\n    target$$4[i$$22 + diff] = source$$3[i$$22];\n  }\n}\nexport function partition(f$$6, source$$4, cons$$29) {\n  const len$$9 = source$$4.length | 0;\n  const res1 = new cons$$29(len$$9);\n  const res2 = new cons$$29(len$$9);\n  let iTrue = 0;\n  let iFalse = 0;\n\n  for (let i$$23 = 0; i$$23 <= len$$9 - 1; i$$23++) {\n    if (f$$6(source$$4[i$$23])) {\n      res1[iTrue] = source$$4[i$$23];\n      iTrue = iTrue + 1;\n    } else {\n      res2[iFalse] = source$$4[i$$23];\n      iFalse = iFalse + 1;\n    }\n  }\n\n  return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\nexport function find(predicate$$11, array$$54) {\n  const matchValue$$5 = array$$54.find(predicate$$11);\n\n  if (matchValue$$5 == null) {\n    return indexNotFound();\n  } else {\n    const res$$5 = value$$11(matchValue$$5);\n    return res$$5;\n  }\n}\nexport function tryFind(predicate$$13, array$$56) {\n  return array$$56.find(predicate$$13);\n}\nexport function findIndex(predicate$$15, array$$58) {\n  var index;\n  const matchValue$$6 = array$$58.findIndex(predicate$$15);\n\n  if (index = matchValue$$6 | 0, index > -1) {\n    const index$$1 = matchValue$$6 | 0;\n    return index$$1 | 0;\n  } else {\n    return indexNotFound() | 0;\n  }\n}\nexport function tryFindIndex(predicate$$17, array$$60) {\n  var index$$2;\n  const matchValue$$7 = array$$60.findIndex(predicate$$17);\n\n  if (index$$2 = matchValue$$7 | 0, index$$2 > -1) {\n    const index$$3 = matchValue$$7 | 0;\n    return index$$3;\n  } else {\n    return null;\n  }\n}\nexport function pick(chooser, array$$62) {\n  const loop$$1 = function loop$$1(i$$24) {\n    loop$$1: while (true) {\n      if (i$$24 >= array$$62.length) {\n        return indexNotFound();\n      } else {\n        const matchValue$$8 = chooser(array$$62[i$$24]);\n\n        if (matchValue$$8 != null) {\n          const res$$6 = value$$11(matchValue$$8);\n          return res$$6;\n        } else {\n          const $i$$24$$86 = i$$24;\n          i$$24 = $i$$24$$86 + 1;\n          continue loop$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(0);\n}\nexport function tryPick(chooser$$1, array$$63) {\n  const loop$$2 = function loop$$2(i$$25) {\n    loop$$2: while (true) {\n      if (i$$25 >= array$$63.length) {\n        return null;\n      } else {\n        const matchValue$$9 = chooser$$1(array$$63[i$$25]);\n\n        if (matchValue$$9 == null) {\n          const $i$$25$$89 = i$$25;\n          i$$25 = $i$$25$$89 + 1;\n          continue loop$$2;\n        } else {\n          const res$$7 = matchValue$$9;\n          return res$$7;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$2(0);\n}\nexport function findBack(predicate$$19, array$$64) {\n  const loop$$3 = function loop$$3(i$$26) {\n    loop$$3: while (true) {\n      if (i$$26 < 0) {\n        return indexNotFound();\n      } else if (predicate$$19(array$$64[i$$26])) {\n        return array$$64[i$$26];\n      } else {\n        const $i$$26$$92 = i$$26;\n        i$$26 = $i$$26$$92 - 1;\n        continue loop$$3;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$3(array$$64.length - 1);\n}\nexport function tryFindBack(predicate$$20, array$$65) {\n  const loop$$4 = function loop$$4(i$$27) {\n    loop$$4: while (true) {\n      if (i$$27 < 0) {\n        return null;\n      } else if (predicate$$20(array$$65[i$$27])) {\n        return some(array$$65[i$$27]);\n      } else {\n        const $i$$27$$95 = i$$27;\n        i$$27 = $i$$27$$95 - 1;\n        continue loop$$4;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$4(array$$65.length - 1);\n}\nexport function findLastIndex(predicate$$21, array$$66) {\n  const loop$$5 = function loop$$5(i$$28) {\n    loop$$5: while (true) {\n      if (i$$28 < 0) {\n        return -1 | 0;\n      } else if (predicate$$21(array$$66[i$$28])) {\n        return i$$28 | 0;\n      } else {\n        const $i$$28$$98 = i$$28;\n        i$$28 = $i$$28$$98 - 1;\n        continue loop$$5;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$5(array$$66.length - 1) | 0;\n}\nexport function findIndexBack(predicate$$22, array$$67) {\n  const loop$$6 = function loop$$6(i$$29) {\n    loop$$6: while (true) {\n      if (i$$29 < 0) {\n        return indexNotFound() | 0;\n      } else if (predicate$$22(array$$67[i$$29])) {\n        return i$$29 | 0;\n      } else {\n        const $i$$29$$101 = i$$29;\n        i$$29 = $i$$29$$101 - 1;\n        continue loop$$6;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$6(array$$67.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate$$23, array$$68) {\n  const loop$$7 = function loop$$7(i$$30) {\n    loop$$7: while (true) {\n      if (i$$30 < 0) {\n        return null;\n      } else if (predicate$$23(array$$68[i$$30])) {\n        return i$$30;\n      } else {\n        const $i$$30$$104 = i$$30;\n        i$$30 = $i$$30$$104 - 1;\n        continue loop$$7;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$7(array$$68.length - 1);\n}\nexport function choose(chooser$$2, array$$69, cons$$30) {\n  const f$$7 = function f$$7(x$$3) {\n    return chooser$$2(x$$3) != null;\n  };\n\n  const g = function g(x$$4) {\n    return value$$11(chooser$$2(x$$4));\n  };\n\n  const arr$$6 = array$$69.filter(f$$7);\n  return map(g, arr$$6, cons$$30);\n}\nexport function foldIndexed(folder$$2, state$$4, array$$71) {\n  return array$$71.reduce(function folder$$3(acc$$2, x$$5, i$$31) {\n    return folder$$2(i$$31, acc$$2, x$$5);\n  }, state$$4);\n}\nexport function fold(folder$$4, state$$6, array$$73) {\n  return array$$73.reduce(folder$$4, state$$6);\n}\nexport function iterate(action, array$$75) {\n  for (let i$$32 = 0; i$$32 <= array$$75.length - 1; i$$32++) {\n    action(array$$75[i$$32]);\n  }\n}\nexport function iterateIndexed(action$$1, array$$76) {\n  for (let i$$33 = 0; i$$33 <= array$$76.length - 1; i$$33++) {\n    action$$1(i$$33, array$$76[i$$33]);\n  }\n}\nexport function iterate2(action$$2, array1$$2, array2$$2) {\n  if (array1$$2.length !== array2$$2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$34 = 0; i$$34 <= array1$$2.length - 1; i$$34++) {\n    action$$2(array1$$2[i$$34], array2$$2[i$$34]);\n  }\n}\nexport function iterateIndexed2(action$$3, array1$$3, array2$$3) {\n  if (array1$$3.length !== array2$$3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$35 = 0; i$$35 <= array1$$3.length - 1; i$$35++) {\n    action$$3(i$$35, array1$$3[i$$35], array2$$3[i$$35]);\n  }\n}\nexport function isEmpty(array$$77) {\n  return array$$77.length === 0;\n}\nexport function forAll(predicate$$25, array$$78) {\n  return array$$78.every(predicate$$25);\n}\nexport function permute(f$$8, array$$80) {\n  const size = array$$80.length | 0;\n  const res$$8 = new array$$80.constructor(array$$80.length);\n  const checkFlags = new Array(size);\n  iterateIndexed(function (i$$36, x$$7) {\n    const j$$1 = f$$8(i$$36) | 0;\n\n    if (j$$1 < 0 ? true : j$$1 >= size) {\n      throw new Error(\"Not a valid permutation\");\n    }\n\n    res$$8[j$$1] = x$$7;\n    checkFlags[j$$1] = 1;\n  }, array$$80);\n  const isValid = forAll(function (y) {\n    return 1 === y;\n  }, checkFlags);\n\n  if (!isValid) {\n    throw new Error(\"Not a valid permutation\");\n  }\n\n  return res$$8;\n}\nexport function setSlice(target$$5, lower, upper, source$$5) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const upper$$1 = defaultArg(upper, 0) | 0;\n  const length = (upper$$1 > 0 ? upper$$1 : target$$5.length - 1) - lower$$1 | 0;\n\n  if (ArrayBuffer.isView(target$$5) ? source$$5.length <= length : false) {\n    return target$$5.set(source$$5, lower$$1);\n  } else {\n    for (let i$$37 = 0; i$$37 <= length; i$$37++) {\n      target$$5[i$$37 + lower$$1] = source$$5[i$$37];\n    }\n  }\n}\nexport function sortInPlaceBy(projection$$3, xs, comparer) {\n  xs.sort(function (x$$9, y$$1) {\n    return comparer.Compare(projection$$3(x$$9), projection$$3(y$$1));\n  });\n}\nexport function sortInPlace(xs$$1, comparer$$1) {\n  xs$$1.sort(function (x$$10, y$$2) {\n    return comparer$$1.Compare(x$$10, y$$2);\n  });\n}\n\nfunction copyArray(array$$81) {\n  const result$$9 = new array$$81.constructor(array$$81.length);\n\n  for (let i$$38 = 0; i$$38 <= array$$81.length - 1; i$$38++) {\n    result$$9[i$$38] = array$$81[i$$38];\n  }\n\n  return result$$9;\n}\n\nexport function sort(xs$$2, comparer$$2) {\n  const xs$$3 = copyArray(xs$$2);\n  xs$$3.sort(function comparer$$3(x$$11, y$$3) {\n    return comparer$$2.Compare(x$$11, y$$3);\n  });\n  return xs$$3;\n}\nexport function sortBy(projection$$4, xs$$4, comparer$$4) {\n  const xs$$5 = copyArray(xs$$4);\n  xs$$5.sort(function comparer$$5(x$$12, y$$4) {\n    return comparer$$4.Compare(projection$$4(x$$12), projection$$4(y$$4));\n  });\n  return xs$$5;\n}\nexport function sortDescending(xs$$6, comparer$$6) {\n  const xs$$7 = copyArray(xs$$6);\n  xs$$7.sort(function comparer$$7(x$$13, y$$5) {\n    return comparer$$6.Compare(x$$13, y$$5) * -1;\n  });\n  return xs$$7;\n}\nexport function sortByDescending(projection$$5, xs$$8, comparer$$8) {\n  const xs$$9 = copyArray(xs$$8);\n  xs$$9.sort(function comparer$$9(x$$14, y$$6) {\n    return comparer$$8.Compare(projection$$5(x$$14), projection$$5(y$$6)) * -1;\n  });\n  return xs$$9;\n}\nexport function sortWith(comparer$$10, xs$$10) {\n  const xs$$11 = copyArray(xs$$10);\n  xs$$11.sort(comparer$$10);\n  return xs$$11;\n}\nexport function unfold(generator, state$$8) {\n  const res$$9 = [];\n\n  const loop$$8 = function loop$$8(state$$9) {\n    loop$$8: while (true) {\n      const matchValue$$10 = generator(state$$9);\n\n      if (matchValue$$10 != null) {\n        const x$$15 = matchValue$$10[0];\n        const s$0027$$2 = matchValue$$10[1];\n        res$$9.push(x$$15);\n        state$$9 = s$0027$$2;\n        continue loop$$8;\n      }\n\n      break;\n    }\n  };\n\n  loop$$8(state$$8);\n  return res$$9;\n}\nexport function unzip(array$$83) {\n  const len$$11 = array$$83.length | 0;\n  const res1$$1 = new Array(len$$11);\n  const res2$$1 = new Array(len$$11);\n  iterateIndexed(function (i$$39, tupledArg) {\n    res1$$1[i$$39] = tupledArg[0];\n    res2$$1[i$$39] = tupledArg[1];\n  }, array$$83);\n  return [res1$$1, res2$$1];\n}\nexport function unzip3(array$$84) {\n  const len$$14 = array$$84.length | 0;\n  const res1$$2 = new Array(len$$14);\n  const res2$$2 = new Array(len$$14);\n  const res3 = new Array(len$$14);\n  iterateIndexed(function (i$$40, tupledArg$$1) {\n    res1$$2[i$$40] = tupledArg$$1[0];\n    res2$$2[i$$40] = tupledArg$$1[1];\n    res3[i$$40] = tupledArg$$1[2];\n  }, array$$84);\n  return [res1$$2, res2$$2, res3];\n}\nexport function zip(array1$$4, array2$$4) {\n  if (array1$$4.length !== array2$$4.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$10 = new Array(array1$$4.length);\n\n  for (let i$$41 = 0; i$$41 <= array1$$4.length - 1; i$$41++) {\n    result$$10[i$$41] = [array1$$4[i$$41], array2$$4[i$$41]];\n  }\n\n  return result$$10;\n}\nexport function zip3(array1$$5, array2$$5, array3) {\n  if (array1$$5.length !== array2$$5.length ? true : array2$$5.length !== array3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$11 = new Array(array1$$5.length);\n\n  for (let i$$42 = 0; i$$42 <= array1$$5.length - 1; i$$42++) {\n    result$$11[i$$42] = [array1$$5[i$$42], array2$$5[i$$42], array3[i$$42]];\n  }\n\n  return result$$11;\n}\nexport function chunkBySize(chunkSize, array$$85) {\n  if (chunkSize < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n  }\n\n  if (array$$85.length === 0) {\n    return [[]];\n  } else {\n    const result$$12 = [];\n\n    for (let x$$16 = 0; x$$16 <= ~~Math.ceil(array$$85.length / chunkSize) - 1; x$$16++) {\n      const start$$8 = x$$16 * chunkSize | 0;\n      const slice = array$$85.slice(start$$8, start$$8 + chunkSize);\n      result$$12.push(slice);\n    }\n\n    return result$$12;\n  }\n}\nexport function splitAt(index$$4, array$$88) {\n  if (index$$4 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: index\");\n  }\n\n  if (index$$4 > array$$88.length) {\n    throw new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\");\n  }\n\n  return [array$$88.slice(0, 0 + index$$4), array$$88.slice(index$$4)];\n}\nexport function compareWith(comparer$$12, array1$$6, array2$$6) {\n  if (array1$$6 == null) {\n    if (array2$$6 == null) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (array2$$6 == null) {\n    return 1;\n  } else {\n    let i$$43 = 0;\n    let result$$13 = 0;\n    const length1 = array1$$6.length | 0;\n    const length2 = array2$$6.length | 0;\n\n    if (length1 > length2) {\n      return 1;\n    } else if (length1 < length2) {\n      return -1 | 0;\n    } else {\n      while (i$$43 < length1 ? result$$13 === 0 : false) {\n        result$$13 = comparer$$12(array1$$6[i$$43], array2$$6[i$$43]);\n        i$$43 = i$$43 + 1;\n      }\n\n      return result$$13 | 0;\n    }\n  }\n}\nexport function equalsWith(comparer$$13, array1$$7, array2$$7) {\n  return compareWith(compare, array1$$7, array2$$7) === 0;\n}\nexport function exactlyOne(array$$91) {\n  if (array$$91.length === 1) {\n    return array$$91[0];\n  } else if (array$$91.length === 0) {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n  } else {\n    throw new Error(\"Input array too long\\\\nParameter name: array\");\n  }\n}\nexport function head(array$$92) {\n  if (array$$92.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  } else {\n    return array$$92[0];\n  }\n}\nexport function tryHead(array$$93) {\n  if (array$$93.length === 0) {\n    return null;\n  } else {\n    return some(array$$93[0]);\n  }\n}\nexport function tail(array$$94) {\n  if (array$$94.length === 0) {\n    throw new Error(\"Not enough elements\\\\nParameter name: array\");\n  }\n\n  return array$$94.slice(1);\n}\nexport function item(index$$5, array$$96) {\n  return array$$96[index$$5];\n}\nexport function tryItem(index$$6, array$$97) {\n  if (index$$6 < 0 ? true : index$$6 >= array$$97.length) {\n    return null;\n  } else {\n    return some(array$$97[index$$6]);\n  }\n}\nexport function foldBackIndexed(folder$$6, array$$98, state$$10) {\n  return array$$98.reduceRight(function folder$$7(acc$$4, x$$17, i$$44) {\n    return folder$$6(i$$44, x$$17, acc$$4);\n  }, state$$10);\n}\nexport function foldBack(folder$$8, array$$100, state$$12) {\n  return array$$100.reduceRight(function folder$$9(acc$$5, x$$18) {\n    return folder$$8(x$$18, acc$$5);\n  }, state$$12);\n}\nexport function foldIndexed2(folder$$10, state$$14, array1$$8, array2$$8) {\n  let acc$$6 = state$$14;\n\n  if (array1$$8.length !== array2$$8.length) {\n    throw new Error(\"Arrays have different lengths\");\n  }\n\n  for (let i$$45 = 0; i$$45 <= array1$$8.length - 1; i$$45++) {\n    acc$$6 = folder$$10(i$$45, acc$$6, array1$$8[i$$45], array2$$8[i$$45]);\n  }\n\n  return acc$$6;\n}\nexport function fold2(folder$$11, state$$15, array1$$9, array2$$9) {\n  return foldIndexed2(function (_arg1, acc$$7, x$$19, y$$7) {\n    return folder$$11(acc$$7, x$$19, y$$7);\n  }, state$$15, array1$$9, array2$$9);\n}\nexport function foldBackIndexed2(folder$$12, array1$$10, array2$$10, state$$16) {\n  let acc$$8 = state$$16;\n\n  if (array1$$10.length !== array2$$10.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const size$$1 = array1$$10.length | 0;\n\n  for (let i$$46 = 1; i$$46 <= size$$1; i$$46++) {\n    acc$$8 = folder$$12(i$$46 - 1, array1$$10[size$$1 - i$$46], array2$$10[size$$1 - i$$46], acc$$8);\n  }\n\n  return acc$$8;\n}\nexport function foldBack2(f$$9, array1$$11, array2$$11, state$$17) {\n  return foldBackIndexed2(function (_arg1$$1, x$$20, y$$8, acc$$9) {\n    return f$$9(x$$20, y$$8, acc$$9);\n  }, array1$$11, array2$$11, state$$17);\n}\nexport function reduce(reduction, array$$102) {\n  if (array$$102.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$102.reduce(reduction);\n}\nexport function reduceBack(reduction$$2, array$$104) {\n  if (array$$104.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$104.reduceRight(reduction$$2);\n}\nexport function forAll2(predicate$$27, array1$$12, array2$$12) {\n  return fold2(function (acc$$10, x$$21, y$$9) {\n    return acc$$10 ? predicate$$27(x$$21, y$$9) : false;\n  }, true, array1$$12, array2$$12);\n}\nexport function existsOffset($arg$$176, $arg$$177, $arg$$178) {\n  existsOffset: while (true) {\n    const predicate$$28 = $arg$$176,\n          array$$106 = $arg$$177,\n          index$$7 = $arg$$178;\n\n    if (index$$7 === array$$106.length) {\n      return false;\n    } else if (predicate$$28(array$$106[index$$7])) {\n      return true;\n    } else {\n      $arg$$176 = predicate$$28;\n      $arg$$177 = array$$106;\n      $arg$$178 = index$$7 + 1;\n      continue existsOffset;\n    }\n\n    break;\n  }\n}\nexport function exists(predicate$$29, array$$107) {\n  return existsOffset(predicate$$29, array$$107, 0);\n}\nexport function existsOffset2($arg$$181, $arg$$182, $arg$$183, $arg$$184) {\n  existsOffset2: while (true) {\n    const predicate$$30 = $arg$$181,\n          array1$$13 = $arg$$182,\n          array2$$13 = $arg$$183,\n          index$$8 = $arg$$184;\n\n    if (index$$8 === array1$$13.length) {\n      return false;\n    } else if (predicate$$30(array1$$13[index$$8], array2$$13[index$$8])) {\n      return true;\n    } else {\n      $arg$$181 = predicate$$30;\n      $arg$$182 = array1$$13;\n      $arg$$183 = array2$$13;\n      $arg$$184 = index$$8 + 1;\n      continue existsOffset2;\n    }\n\n    break;\n  }\n}\nexport function exists2(predicate$$31, array1$$14, array2$$14) {\n  if (array1$$14.length !== array2$$14.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  return existsOffset2(predicate$$31, array1$$14, array2$$14, 0);\n}\nexport function sum(array$$108, adder) {\n  let acc$$11 = adder.GetZero();\n\n  for (let i$$47 = 0; i$$47 <= array$$108.length - 1; i$$47++) {\n    acc$$11 = adder.Add(acc$$11, array$$108[i$$47]);\n  }\n\n  return acc$$11;\n}\nexport function sumBy(projection$$6, array$$109, adder$$1) {\n  let acc$$12 = adder$$1.GetZero();\n\n  for (let i$$48 = 0; i$$48 <= array$$109.length - 1; i$$48++) {\n    acc$$12 = adder$$1.Add(acc$$12, projection$$6(array$$109[i$$48]));\n  }\n\n  return acc$$12;\n}\nexport function maxBy(projection$$7, xs$$12, comparer$$14) {\n  return reduce(function (x$$22, y$$10) {\n    return comparer$$14.Compare(projection$$7(y$$10), projection$$7(x$$22)) > 0 ? y$$10 : x$$22;\n  }, xs$$12);\n}\nexport function max(xs$$13, comparer$$15) {\n  return reduce(function (x$$23, y$$11) {\n    return comparer$$15.Compare(y$$11, x$$23) > 0 ? y$$11 : x$$23;\n  }, xs$$13);\n}\nexport function minBy(projection$$8, xs$$14, comparer$$16) {\n  return reduce(function (x$$24, y$$12) {\n    return comparer$$16.Compare(projection$$8(y$$12), projection$$8(x$$24)) > 0 ? x$$24 : y$$12;\n  }, xs$$14);\n}\nexport function min(xs$$15, comparer$$17) {\n  return reduce(function (x$$25, y$$13) {\n    return comparer$$17.Compare(y$$13, x$$25) > 0 ? x$$25 : y$$13;\n  }, xs$$15);\n}\nexport function average(array$$110, averager) {\n  if (array$$110.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total = averager.GetZero();\n\n  for (let i$$49 = 0; i$$49 <= array$$110.length - 1; i$$49++) {\n    total = averager.Add(total, array$$110[i$$49]);\n  }\n\n  return averager.DivideByInt(total, array$$110.length);\n}\nexport function averageBy(projection$$9, array$$111, averager$$1) {\n  if (array$$111.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total$$1 = averager$$1.GetZero();\n\n  for (let i$$50 = 0; i$$50 <= array$$111.length - 1; i$$50++) {\n    total$$1 = averager$$1.Add(total$$1, projection$$9(array$$111[i$$50]));\n  }\n\n  return averager$$1.DivideByInt(total$$1, array$$111.length);\n}\nexport function ofSeq(source$$7, cons$$31) {\n  return cons$$31.from(source$$7);\n}\nexport function ofList(source$$8, cons$$32) {\n  return cons$$32.from(source$$8);\n}\nexport function toList(source$$9) {\n  const len$$20 = source$$9.length | 0;\n  let target$$7 = new List();\n\n  for (let i$$51 = len$$20 - 1; i$$51 >= 0; i$$51--) {\n    target$$7 = new List(source$$9[i$$51], target$$7);\n  }\n\n  return target$$7;\n}\nexport function windowed(windowSize, source$$10) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  return ofSeq$$1(delay(function () {\n    return map$$1(function (i$$52) {\n      return source$$10.slice(i$$52 - windowSize, i$$52 - 1 + 1);\n    }, rangeNumber(windowSize, 1, source$$10.length));\n  }), Array);\n}","import { defaultArg, value as value$$1, some } from \"./Option\";\nimport { FSharpRef, List } from \"./Types\";\nimport { delay, rangeNumber, iterate as iterate$$1, collect as collect$$1, scanBack as scanBack$$1, scan as scan$$1, foldBack2 as foldBack2$$1, fold2 as fold2$$1, fold as fold$$1, map as map$$1 } from \"./Seq\";\nimport { tryGetValue, addToSet, comparerFromEqualityComparer, count } from \"./Util\";\nimport { ofList } from \"./Array\";\nimport { permute as permute$$1, findIndexBack as findIndexBack$$1, tryFindIndexBack as tryFindIndexBack$$1 } from \"./Array\";\nimport { createMutable } from \"./Set\";\nimport { ofSeq as ofSeq$$1, slice as slice$$1, item as item$$1, length as length$$1 } from \"./List\";\nimport { createMutable as createMutable$$1 } from \"./Map\";\nexport function head(_arg1) {\n  if (_arg1.tail != null) {\n    const x = _arg1.head;\n    return x;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function tryHead(_arg1$$1) {\n  if (_arg1$$1.tail != null) {\n    const x$$1 = _arg1$$1.head;\n    return some(x$$1);\n  } else {\n    return null;\n  }\n}\nexport function tail(_arg1$$2) {\n  if (_arg1$$2.tail != null) {\n    const xs = _arg1$$2.tail;\n    return xs;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function last(_arg1$$3) {\n  last: while (true) {\n    if (_arg1$$3.tail != null) {\n      if (_arg1$$3.tail.tail == null) {\n        return _arg1$$3.head;\n      } else {\n        const $_arg1$$3$$2 = _arg1$$3;\n        _arg1$$3 = $_arg1$$3$$2.tail;\n        continue last;\n      }\n    } else {\n      throw new Error(\"List was empty\");\n    }\n\n    break;\n  }\n}\nexport function tryLast(_arg1$$4) {\n  tryLast: while (true) {\n    if (_arg1$$4.tail != null) {\n      if (_arg1$$4.tail.tail == null) {\n        return some(_arg1$$4.head);\n      } else {\n        const $_arg1$$4$$3 = _arg1$$4;\n        _arg1$$4 = $_arg1$$4$$3.tail;\n        continue tryLast;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function compareWith(comparer, xs$$3, ys) {\n  if (xs$$3 === ys) {\n    return 0;\n  } else {\n    const loop = function loop(xs$$4, ys$$1) {\n      loop: while (true) {\n        const matchValue = [xs$$4, ys$$1];\n\n        if (matchValue[0].tail != null) {\n          if (matchValue[1].tail != null) {\n            const matchValue$$1 = comparer(matchValue[0].head, matchValue[1].head) | 0;\n\n            if (matchValue$$1 === 0) {\n              xs$$4 = matchValue[0].tail;\n              ys$$1 = matchValue[1].tail;\n              continue loop;\n            } else {\n              const res = matchValue$$1 | 0;\n              return res | 0;\n            }\n          } else {\n            return 1;\n          }\n        } else if (matchValue[1].tail == null) {\n          return 0;\n        } else {\n          return -1 | 0;\n        }\n\n        break;\n      }\n    };\n\n    return loop(xs$$3, ys) | 0;\n  }\n}\nexport function foldIndexedAux($arg$$7, $arg$$8, $arg$$9, $arg$$10) {\n  foldIndexedAux: while (true) {\n    const f = $arg$$7,\n          i = $arg$$8,\n          acc = $arg$$9,\n          _arg1$$5 = $arg$$10;\n\n    if (_arg1$$5.tail != null) {\n      const xs$$6 = _arg1$$5.tail;\n      const x$$5 = _arg1$$5.head;\n      $arg$$7 = f;\n      $arg$$8 = i + 1;\n      $arg$$9 = f(i, acc, x$$5);\n      $arg$$10 = xs$$6;\n      continue foldIndexedAux;\n    } else {\n      return acc;\n    }\n\n    break;\n  }\n}\nexport function foldIndexed(f$$1, state, xs$$7) {\n  return foldIndexedAux(f$$1, 0, state, xs$$7);\n}\nexport function fold($arg$$14, $arg$$15, $arg$$16) {\n  fold: while (true) {\n    const f$$2 = $arg$$14,\n          state$$1 = $arg$$15,\n          xs$$8 = $arg$$16;\n\n    if (xs$$8.tail != null) {\n      const t = xs$$8.tail;\n      const h = xs$$8.head;\n      $arg$$14 = f$$2;\n      $arg$$15 = f$$2(state$$1, h);\n      $arg$$16 = t;\n      continue fold;\n    } else {\n      return state$$1;\n    }\n\n    break;\n  }\n}\nexport function reverse(xs$$9) {\n  return fold(function (acc$$1, x$$6) {\n    return new List(x$$6, acc$$1);\n  }, new List(), xs$$9);\n}\nexport function foldBack(f$$3, xs$$10, state$$2) {\n  return fold(function (acc$$2, x$$7) {\n    return f$$3(x$$7, acc$$2);\n  }, state$$2, reverse(xs$$10));\n}\nexport function toSeq(xs$$11) {\n  return map$$1(function (x$$8) {\n    return x$$8;\n  }, xs$$11);\n}\nexport function ofSeq(xs$$12) {\n  return reverse(fold$$1(function (acc$$3, x$$9) {\n    return new List(x$$9, acc$$3);\n  }, new List(), xs$$12));\n}\nexport function concat(lists) {\n  return reverse(fold$$1(function (state$$3, xs$$14) {\n    return fold(function f$$4(acc$$4, x$$10) {\n      return new List(x$$10, acc$$4);\n    }, state$$3, xs$$14);\n  }, new List(), lists));\n}\nexport function foldIndexed2Aux($arg$$20, $arg$$21, $arg$$22, $arg$$23, $arg$$24) {\n  foldIndexed2Aux: while (true) {\n    const f$$5 = $arg$$20,\n          i$$1 = $arg$$21,\n          acc$$5 = $arg$$22,\n          bs = $arg$$23,\n          cs = $arg$$24;\n    const matchValue$$2 = [bs, cs];\n    var $target$$25, x$$11, xs$$16, y$$1, ys$$3;\n\n    if (matchValue$$2[0].tail != null) {\n      if (matchValue$$2[1].tail != null) {\n        $target$$25 = 1;\n        x$$11 = matchValue$$2[0].head;\n        xs$$16 = matchValue$$2[0].tail;\n        y$$1 = matchValue$$2[1].head;\n        ys$$3 = matchValue$$2[1].tail;\n      } else {\n        $target$$25 = 2;\n      }\n    } else if (matchValue$$2[1].tail == null) {\n      $target$$25 = 0;\n    } else {\n      $target$$25 = 2;\n    }\n\n    switch ($target$$25) {\n      case 0:\n        {\n          return acc$$5;\n        }\n\n      case 1:\n        {\n          $arg$$20 = f$$5;\n          $arg$$21 = i$$1 + 1;\n          $arg$$22 = f$$5(i$$1, acc$$5, x$$11, y$$1);\n          $arg$$23 = xs$$16;\n          $arg$$24 = ys$$3;\n          continue foldIndexed2Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed2(f$$6, state$$4, xs$$17, ys$$4) {\n  return foldIndexed2Aux(f$$6, 0, state$$4, xs$$17, ys$$4);\n}\nexport function fold2(f$$7, state$$5, xs$$18, ys$$5) {\n  return fold2$$1(f$$7, state$$5, xs$$18, ys$$5);\n}\nexport function foldBack2(f$$8, xs$$19, ys$$6, state$$6) {\n  return foldBack2$$1(f$$8, xs$$19, ys$$6, state$$6);\n}\nexport function unfold(f$$9, state$$7) {\n  const unfoldInner = function unfoldInner(acc$$6, state$$8) {\n    unfoldInner: while (true) {\n      const matchValue$$3 = f$$9(state$$8);\n\n      if (matchValue$$3 != null) {\n        const x$$12 = matchValue$$3[0];\n        const state$$9 = matchValue$$3[1];\n        const $acc$$6$$40 = acc$$6;\n        acc$$6 = new List(x$$12, $acc$$6$$40);\n        state$$8 = state$$9;\n        continue unfoldInner;\n      } else {\n        return reverse(acc$$6);\n      }\n\n      break;\n    }\n  };\n\n  return unfoldInner(new List(), state$$7);\n}\nexport function foldIndexed3Aux($arg$$41, $arg$$42, $arg$$43, $arg$$44, $arg$$45, $arg$$46) {\n  foldIndexed3Aux: while (true) {\n    const f$$10 = $arg$$41,\n          i$$2 = $arg$$42,\n          acc$$7 = $arg$$43,\n          bs$$1 = $arg$$44,\n          cs$$1 = $arg$$45,\n          ds = $arg$$46;\n    const matchValue$$4 = [bs$$1, cs$$1, ds];\n    var $target$$47, x$$13, xs$$20, y$$2, ys$$7, z, zs;\n\n    if (matchValue$$4[0].tail != null) {\n      if (matchValue$$4[1].tail != null) {\n        if (matchValue$$4[2].tail != null) {\n          $target$$47 = 1;\n          x$$13 = matchValue$$4[0].head;\n          xs$$20 = matchValue$$4[0].tail;\n          y$$2 = matchValue$$4[1].head;\n          ys$$7 = matchValue$$4[1].tail;\n          z = matchValue$$4[2].head;\n          zs = matchValue$$4[2].tail;\n        } else {\n          $target$$47 = 2;\n        }\n      } else {\n        $target$$47 = 2;\n      }\n    } else if (matchValue$$4[1].tail == null) {\n      if (matchValue$$4[2].tail == null) {\n        $target$$47 = 0;\n      } else {\n        $target$$47 = 2;\n      }\n    } else {\n      $target$$47 = 2;\n    }\n\n    switch ($target$$47) {\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      case 1:\n        {\n          $arg$$41 = f$$10;\n          $arg$$42 = i$$2 + 1;\n          $arg$$43 = f$$10(i$$2, acc$$7, x$$13, y$$2, z);\n          $arg$$44 = xs$$20;\n          $arg$$45 = ys$$7;\n          $arg$$46 = zs;\n          continue foldIndexed3Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed3(f$$11, seed, xs$$21, ys$$8, zs$$1) {\n  return foldIndexed3Aux(f$$11, 0, seed, xs$$21, ys$$8, zs$$1);\n}\nexport function fold3(f$$12, state$$10, xs$$22, ys$$9, zs$$2) {\n  return foldIndexed3(function (_arg1$$6, acc$$8, x$$14, y$$3, z$$1) {\n    return f$$12(acc$$8, x$$14, y$$3, z$$1);\n  }, state$$10, xs$$22, ys$$9, zs$$2);\n}\nexport function scan(f$$13, state$$11, xs$$23) {\n  return ofSeq(scan$$1(f$$13, state$$11, xs$$23));\n}\nexport function scanBack(f$$14, xs$$25, state$$12) {\n  return ofSeq(scanBack$$1(f$$14, xs$$25, state$$12));\n}\nexport function length(xs$$27) {\n  return fold(function (acc$$9, _arg1$$7) {\n    return acc$$9 + 1;\n  }, 0, xs$$27);\n}\nexport function append(xs$$28, ys$$10) {\n  return fold(function (acc$$10, x$$15) {\n    return new List(x$$15, acc$$10);\n  }, ys$$10, reverse(xs$$28));\n}\nexport function collect(f$$15, xs$$29) {\n  return ofSeq(collect$$1(f$$15, xs$$29));\n}\nexport function map(f$$16, xs$$31) {\n  return reverse(fold(function (acc$$11, x$$16) {\n    return new List(f$$16(x$$16), acc$$11);\n  }, new List(), xs$$31));\n}\nexport function mapIndexed(f$$17, xs$$33) {\n  return reverse(foldIndexed(function (i$$3, acc$$12, x$$17) {\n    return new List(f$$17(i$$3, x$$17), acc$$12);\n  }, new List(), xs$$33));\n}\nexport function indexed(xs$$35) {\n  return mapIndexed(function (i$$4, x$$18) {\n    return [i$$4, x$$18];\n  }, xs$$35);\n}\nexport function map2(f$$18, xs$$36, ys$$11) {\n  return reverse(fold2(function (acc$$13, x$$19, y$$4) {\n    return new List(f$$18(x$$19, y$$4), acc$$13);\n  }, new List(), xs$$36, ys$$11));\n}\nexport function mapIndexed2(f$$19, xs$$38, ys$$12) {\n  return reverse(foldIndexed2(function (i$$5, acc$$14, x$$20, y$$5) {\n    return new List(f$$19(i$$5, x$$20, y$$5), acc$$14);\n  }, new List(), xs$$38, ys$$12));\n}\nexport function map3(f$$20, xs$$40, ys$$13, zs$$3) {\n  return reverse(fold3(function (acc$$15, x$$21, y$$6, z$$2) {\n    return new List(f$$20(x$$21, y$$6, z$$2), acc$$15);\n  }, new List(), xs$$40, ys$$13, zs$$3));\n}\nexport function mapIndexed3(f$$21, xs$$42, ys$$14, zs$$4) {\n  return reverse(foldIndexed3(function (i$$6, acc$$16, x$$22, y$$7, z$$3) {\n    return new List(f$$21(i$$6, x$$22, y$$7, z$$3), acc$$16);\n  }, new List(), xs$$42, ys$$14, zs$$4));\n}\nexport function mapFold(f$$22, s, xs$$44) {\n  const foldFn = function foldFn(tupledArg, x$$23) {\n    const patternInput = f$$22(tupledArg[1], x$$23);\n    return [new List(patternInput[0], tupledArg[0]), patternInput[1]];\n  };\n\n  const patternInput$$1 = fold(foldFn, [new List(), s], xs$$44);\n  return [reverse(patternInput$$1[0]), patternInput$$1[1]];\n}\nexport function mapFoldBack(f$$23, xs$$45, s$$2) {\n  return mapFold(function (s$$3, v) {\n    return f$$23(v, s$$3);\n  }, s$$2, reverse(xs$$45));\n}\nexport function iterate(f$$24, xs$$46) {\n  fold(function (unitVar0, x$$24) {\n    f$$24(x$$24);\n  }, null, xs$$46);\n}\nexport function iterate2(f$$25, xs$$47, ys$$15) {\n  fold2(function (unitVar0$$1, x$$25, y$$8) {\n    f$$25(x$$25, y$$8);\n  }, null, xs$$47, ys$$15);\n}\nexport function iterateIndexed(f$$26, xs$$48) {\n  foldIndexed(function (i$$7, unitVar1, x$$26) {\n    f$$26(i$$7, x$$26);\n  }, null, xs$$48);\n}\nexport function iterateIndexed2(f$$27, xs$$49, ys$$16) {\n  foldIndexed2(function (i$$8, unitVar1$$1, x$$27, y$$9) {\n    f$$27(i$$8, x$$27, y$$9);\n  }, null, xs$$49, ys$$16);\n}\nexport function ofArray(xs$$50) {\n  let res$$1 = new List();\n\n  for (let i$$9 = count(xs$$50) - 1; i$$9 >= 0; i$$9--) {\n    res$$1 = new List(xs$$50[i$$9], res$$1);\n  }\n\n  return res$$1;\n}\nexport function empty() {\n  return new List();\n}\nexport function isEmpty(_arg1$$8) {\n  if (_arg1$$8.tail == null) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function tryPickIndexedAux($arg$$100, $arg$$101, $arg$$102) {\n  tryPickIndexedAux: while (true) {\n    const f$$28 = $arg$$100,\n          i$$10 = $arg$$101,\n          _arg1$$9 = $arg$$102;\n\n    if (_arg1$$9.tail != null) {\n      const xs$$51 = _arg1$$9.tail;\n      const x$$28 = _arg1$$9.head;\n      const result = f$$28(i$$10, x$$28);\n\n      if (result == null) {\n        $arg$$100 = f$$28;\n        $arg$$101 = i$$10 + 1;\n        $arg$$102 = xs$$51;\n        continue tryPickIndexedAux;\n      } else {\n        return result;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function tryPickIndexed(f$$29, xs$$52) {\n  return tryPickIndexedAux(f$$29, 0, xs$$52);\n}\nexport function tryPick(f$$30, xs$$53) {\n  return tryPickIndexed(function (_arg1$$10, x$$29) {\n    return f$$30(x$$29);\n  }, xs$$53);\n}\nexport function pick(f$$31, xs$$54) {\n  const matchValue$$5 = tryPick(f$$31, xs$$54);\n\n  if (matchValue$$5 != null) {\n    const x$$30 = value$$1(matchValue$$5);\n    return x$$30;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function tryFindIndexed(f$$32, xs$$55) {\n  return tryPickIndexed(function (i$$11, x$$31) {\n    return f$$32(i$$11, x$$31) ? some(x$$31) : null;\n  }, xs$$55);\n}\nexport function tryFind(f$$33, xs$$56) {\n  return tryPickIndexed(function (_arg1$$11, x$$32) {\n    return f$$33(x$$32) ? some(x$$32) : null;\n  }, xs$$56);\n}\nexport function findIndexed(f$$34, xs$$57) {\n  const matchValue$$6 = tryFindIndexed(f$$34, xs$$57);\n\n  if (matchValue$$6 != null) {\n    const x$$33 = value$$1(matchValue$$6);\n    return x$$33;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function find(f$$35, xs$$58) {\n  return findIndexed(function (_arg1$$12, x$$34) {\n    return f$$35(x$$34);\n  }, xs$$58);\n}\nexport function findBack(f$$36, xs$$59) {\n  return find(f$$36, reverse(xs$$59));\n}\nexport function tryFindBack(f$$37, xs$$62) {\n  return tryFind(f$$37, reverse(xs$$62));\n}\nexport function tryFindIndex(f$$38, xs$$65) {\n  return tryPickIndexed(function (i$$12, x$$35) {\n    return f$$38(x$$35) ? i$$12 : null;\n  }, xs$$65);\n}\nexport function tryFindIndexBack(f$$39, xs$$66) {\n  return tryFindIndexBack$$1(f$$39, ofList(xs$$66, Array));\n}\nexport function findIndex(f$$40, xs$$67) {\n  const matchValue$$7 = tryFindIndex(f$$40, xs$$67);\n\n  if (matchValue$$7 != null) {\n    const x$$36 = matchValue$$7 | 0;\n    return x$$36 | 0;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function findIndexBack(f$$41, xs$$68) {\n  return findIndexBack$$1(f$$41, ofList(xs$$68, Array));\n}\nexport function item(n, xs$$69) {\n  return findIndexed(function (i$$13, _arg1$$13) {\n    return n === i$$13;\n  }, xs$$69);\n}\nexport function tryItem(n$$1, xs$$70) {\n  return tryFindIndexed(function (i$$14, _arg1$$14) {\n    return n$$1 === i$$14;\n  }, xs$$70);\n}\nexport function filter(f$$42, xs$$71) {\n  return reverse(fold(function (acc$$17, x$$37) {\n    return f$$42(x$$37) ? new List(x$$37, acc$$17) : acc$$17;\n  }, new List(), xs$$71));\n}\nexport function partition(f$$43, xs$$73) {\n  return fold(function (tupledArg$$1, x$$38) {\n    return f$$43(x$$38) ? [new List(x$$38, tupledArg$$1[0]), tupledArg$$1[1]] : [tupledArg$$1[0], new List(x$$38, tupledArg$$1[1])];\n  }, [new List(), new List()], reverse(xs$$73));\n}\nexport function choose(f$$44, xs$$74) {\n  return reverse(fold(function (acc$$18, x$$39) {\n    const matchValue$$8 = f$$44(x$$39);\n\n    if (matchValue$$8 == null) {\n      return acc$$18;\n    } else {\n      const y$$10 = value$$1(matchValue$$8);\n      return new List(y$$10, acc$$18);\n    }\n  }, new List(), xs$$74));\n}\nexport function contains(value, list, eq) {\n  const loop$$1 = function loop$$1(xs$$76) {\n    loop$$1: while (true) {\n      if (xs$$76.tail != null) {\n        const v$$1 = xs$$76.head;\n        const rest = xs$$76.tail;\n\n        if (eq.Equals(value, v$$1)) {\n          return true;\n        } else {\n          xs$$76 = rest;\n          continue loop$$1;\n        }\n      } else {\n        return false;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(list);\n}\nexport function except(itemsToExclude, array$$2, eq$$1) {\n  if (isEmpty(array$$2)) {\n    return array$$2;\n  } else {\n    const cached = createMutable(itemsToExclude, comparerFromEqualityComparer(eq$$1));\n    return filter(function f$$45(arg00) {\n      return addToSet(arg00, cached);\n    }, array$$2);\n  }\n}\nexport function initialize(n$$2, f$$46) {\n  let xs$$78 = new List();\n\n  for (let i$$15 = 1; i$$15 <= n$$2; i$$15++) {\n    xs$$78 = new List(f$$46(n$$2 - i$$15), xs$$78);\n  }\n\n  return xs$$78;\n}\nexport function replicate(n$$3, x$$40) {\n  return initialize(n$$3, function (_arg1$$15) {\n    return x$$40;\n  });\n}\nexport function reduce(f$$47, _arg1$$16) {\n  if (_arg1$$16.tail != null) {\n    const t$$1 = _arg1$$16.tail;\n    const h$$1 = _arg1$$16.head;\n    return fold(f$$47, h$$1, t$$1);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function reduceBack(f$$48, _arg1$$17) {\n  if (_arg1$$17.tail != null) {\n    const t$$2 = _arg1$$17.tail;\n    const h$$2 = _arg1$$17.head;\n    return foldBack(f$$48, t$$2, h$$2);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function forAll(f$$49, xs$$79) {\n  return fold(function (acc$$19, x$$41) {\n    return acc$$19 ? f$$49(x$$41) : false;\n  }, true, xs$$79);\n}\nexport function forAll2(f$$50, xs$$80, ys$$17) {\n  return fold2(function (acc$$20, x$$42, y$$11) {\n    return acc$$20 ? f$$50(x$$42, y$$11) : false;\n  }, true, xs$$80, ys$$17);\n}\nexport function exists($arg$$146, $arg$$147) {\n  exists: while (true) {\n    const f$$51 = $arg$$146,\n          _arg1$$18 = $arg$$147;\n\n    if (_arg1$$18.tail != null) {\n      const xs$$81 = _arg1$$18.tail;\n      const x$$43 = _arg1$$18.head;\n\n      if (f$$51(x$$43)) {\n        return true;\n      } else {\n        $arg$$146 = f$$51;\n        $arg$$147 = xs$$81;\n        continue exists;\n      }\n    } else {\n      return false;\n    }\n\n    break;\n  }\n}\nexport function exists2($arg$$148, $arg$$149, $arg$$150) {\n  exists2: while (true) {\n    const f$$52 = $arg$$148,\n          bs$$2 = $arg$$149,\n          cs$$2 = $arg$$150;\n    const matchValue$$9 = [bs$$2, cs$$2];\n    var $target$$151, x$$44, xs$$82, y$$12, ys$$18;\n\n    if (matchValue$$9[0].tail != null) {\n      if (matchValue$$9[1].tail != null) {\n        $target$$151 = 1;\n        x$$44 = matchValue$$9[0].head;\n        xs$$82 = matchValue$$9[0].tail;\n        y$$12 = matchValue$$9[1].head;\n        ys$$18 = matchValue$$9[1].tail;\n      } else {\n        $target$$151 = 2;\n      }\n    } else if (matchValue$$9[1].tail == null) {\n      $target$$151 = 0;\n    } else {\n      $target$$151 = 2;\n    }\n\n    switch ($target$$151) {\n      case 0:\n        {\n          return false;\n        }\n\n      case 1:\n        {\n          if (f$$52(x$$44, y$$12)) {\n            return true;\n          } else {\n            $arg$$148 = f$$52;\n            $arg$$149 = xs$$82;\n            $arg$$150 = ys$$18;\n            continue exists2;\n          }\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function unzip(xs$$83) {\n  return foldBack(function (tupledArg$$2, tupledArg$$3) {\n    return [new List(tupledArg$$2[0], tupledArg$$3[0]), new List(tupledArg$$2[1], tupledArg$$3[1])];\n  }, xs$$83, [new List(), new List()]);\n}\nexport function unzip3(xs$$84) {\n  return foldBack(function (tupledArg$$4, tupledArg$$5) {\n    return [new List(tupledArg$$4[0], tupledArg$$5[0]), new List(tupledArg$$4[1], tupledArg$$5[1]), new List(tupledArg$$4[2], tupledArg$$5[2])];\n  }, xs$$84, [new List(), new List(), new List()]);\n}\nexport function zip(xs$$85, ys$$19) {\n  return map2(function (x$$47, y$$15) {\n    return [x$$47, y$$15];\n  }, xs$$85, ys$$19);\n}\nexport function zip3(xs$$86, ys$$20, zs$$5) {\n  return map3(function (x$$48, y$$16, z$$5) {\n    return [x$$48, y$$16, z$$5];\n  }, xs$$86, ys$$20, zs$$5);\n}\nexport function sort(xs$$87, comparer$$1) {\n  var xs$$88;\n  return ofArray((xs$$88 = ofList(xs$$87, Array), (xs$$88.sort(function comparer$$2(x$$49, y$$17) {\n    return comparer$$1.Compare(x$$49, y$$17);\n  }), xs$$88)));\n}\nexport function sortBy(projection, xs$$90, comparer$$3) {\n  var xs$$91;\n  return ofArray((xs$$91 = ofList(xs$$90, Array), (xs$$91.sort(function comparer$$4(x$$50, y$$18) {\n    return comparer$$3.Compare(projection(x$$50), projection(y$$18));\n  }), xs$$91)));\n}\nexport function sortDescending(xs$$93, comparer$$5) {\n  var xs$$94;\n  return ofArray((xs$$94 = ofList(xs$$93, Array), (xs$$94.sort(function comparer$$6(x$$51, y$$19) {\n    return comparer$$5.Compare(x$$51, y$$19) * -1;\n  }), xs$$94)));\n}\nexport function sortByDescending(projection$$1, xs$$96, comparer$$7) {\n  var xs$$97;\n  return ofArray((xs$$97 = ofList(xs$$96, Array), (xs$$97.sort(function comparer$$8(x$$52, y$$20) {\n    return comparer$$7.Compare(projection$$1(x$$52), projection$$1(y$$20)) * -1;\n  }), xs$$97)));\n}\nexport function sortWith(comparer$$9, xs$$99) {\n  var xs$$100;\n  return ofArray((xs$$100 = ofList(xs$$99, Array), (xs$$100.sort(comparer$$9), xs$$100)));\n}\nexport function sum(xs$$102, adder) {\n  return fold(function (acc$$21, x$$53) {\n    return adder.Add(acc$$21, x$$53);\n  }, adder.GetZero(), xs$$102);\n}\nexport function sumBy(f$$53, xs$$103, adder$$1) {\n  return fold(function (acc$$22, x$$54) {\n    return adder$$1.Add(acc$$22, f$$53(x$$54));\n  }, adder$$1.GetZero(), xs$$103);\n}\nexport function maxBy(projection$$2, xs$$104, comparer$$11) {\n  return reduce(function (x$$55, y$$21) {\n    return comparer$$11.Compare(projection$$2(y$$21), projection$$2(x$$55)) > 0 ? y$$21 : x$$55;\n  }, xs$$104);\n}\nexport function max(li, comparer$$12) {\n  return reduce(function (x$$56, y$$22) {\n    return comparer$$12.Compare(y$$22, x$$56) > 0 ? y$$22 : x$$56;\n  }, li);\n}\nexport function minBy(projection$$3, xs$$105, comparer$$13) {\n  return reduce(function (x$$57, y$$23) {\n    return comparer$$13.Compare(projection$$3(y$$23), projection$$3(x$$57)) > 0 ? x$$57 : y$$23;\n  }, xs$$105);\n}\nexport function min(xs$$106, comparer$$14) {\n  return reduce(function (x$$58, y$$24) {\n    return comparer$$14.Compare(y$$24, x$$58) > 0 ? x$$58 : y$$24;\n  }, xs$$106);\n}\nexport function average(xs$$107, averager) {\n  const total = fold(function (acc$$23, x$$59) {\n    return averager.Add(acc$$23, x$$59);\n  }, averager.GetZero(), xs$$107);\n  return averager.DivideByInt(total, length(xs$$107));\n}\nexport function averageBy(f$$54, xs$$108, averager$$1) {\n  const total$$1 = fold(function (acc$$24, x$$60) {\n    return averager$$1.Add(acc$$24, f$$54(x$$60));\n  }, averager$$1.GetZero(), xs$$108);\n  return averager$$1.DivideByInt(total$$1, length(xs$$108));\n}\nexport function permute(f$$55, xs$$109) {\n  return ofArray(permute$$1(f$$55, ofList(xs$$109, Array)));\n}\nexport function skip(i$$16, xs$$111) {\n  const skipInner = function skipInner(i$$17, xs$$112) {\n    skipInner: while (true) {\n      const matchValue$$10 = [i$$17, xs$$112];\n\n      if (matchValue$$10[0] === 0) {\n        return xs$$112;\n      } else if (matchValue$$10[1].tail != null) {\n        const xs$$113 = matchValue$$10[1].tail;\n        const $i$$17$$174 = i$$17;\n        i$$17 = $i$$17$$174 - 1;\n        xs$$112 = xs$$113;\n        continue skipInner;\n      } else {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      }\n\n      break;\n    }\n  };\n\n  const matchValue$$11 = [i$$16, xs$$111];\n\n  if (matchValue$$11[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$175, i$$20, xs$$115;\n\n    if (matchValue$$11[0] === 0) {\n      $target$$175 = 0;\n    } else if (matchValue$$11[0] === 1) {\n      if (matchValue$$11[1].tail != null) {\n        $target$$175 = 1;\n      } else {\n        $target$$175 = 2;\n        i$$20 = matchValue$$11[0];\n        xs$$115 = matchValue$$11[1];\n      }\n    } else {\n      $target$$175 = 2;\n      i$$20 = matchValue$$11[0];\n      xs$$115 = matchValue$$11[1];\n    }\n\n    switch ($target$$175) {\n      case 0:\n        {\n          return xs$$111;\n        }\n\n      case 1:\n        {\n          const xs$$114 = matchValue$$11[1].tail;\n          return xs$$114;\n        }\n\n      case 2:\n        {\n          return skipInner(i$$20, xs$$115);\n        }\n    }\n  }\n}\nexport function skipWhile($arg$$176, $arg$$177) {\n  var t$$3, h$$3;\n\n  skipWhile: while (true) {\n    const predicate = $arg$$176,\n          xs$$116 = $arg$$177;\n    var $target$$178, h$$4, t$$4;\n\n    if (xs$$116.tail != null) {\n      if (t$$3 = xs$$116.tail, (h$$3 = xs$$116.head, predicate(h$$3))) {\n        $target$$178 = 0;\n        h$$4 = xs$$116.head;\n        t$$4 = xs$$116.tail;\n      } else {\n        $target$$178 = 1;\n      }\n    } else {\n      $target$$178 = 1;\n    }\n\n    switch ($target$$178) {\n      case 0:\n        {\n          $arg$$176 = predicate;\n          $arg$$177 = t$$4;\n          continue skipWhile;\n        }\n\n      case 1:\n        {\n          return xs$$116;\n        }\n    }\n\n    break;\n  }\n}\nexport function takeSplitAux(error, i$$21, acc$$25, xs$$117) {\n  takeSplitAux: while (true) {\n    const matchValue$$12 = [i$$21, xs$$117];\n\n    if (matchValue$$12[0] === 0) {\n      return [reverse(acc$$25), xs$$117];\n    } else if (matchValue$$12[1].tail != null) {\n      const xs$$118 = matchValue$$12[1].tail;\n      const x$$61 = matchValue$$12[1].head;\n      const $acc$$25$$181 = acc$$25;\n      const $error$$179 = error;\n      const $i$$21$$180 = i$$21;\n      error = $error$$179;\n      i$$21 = $i$$21$$180 - 1;\n      acc$$25 = new List(x$$61, $acc$$25$$181);\n      xs$$117 = xs$$118;\n      continue takeSplitAux;\n    } else {\n      if (error) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      } else {\n        return [reverse(acc$$25), xs$$117];\n      }\n    }\n\n    break;\n  }\n}\nexport function take(i$$22, xs$$119) {\n  const matchValue$$13 = [i$$22, xs$$119];\n\n  if (matchValue$$13[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$182, i$$25, xs$$120;\n\n    if (matchValue$$13[0] === 0) {\n      $target$$182 = 0;\n    } else if (matchValue$$13[0] === 1) {\n      if (matchValue$$13[1].tail != null) {\n        $target$$182 = 1;\n      } else {\n        $target$$182 = 2;\n        i$$25 = matchValue$$13[0];\n        xs$$120 = matchValue$$13[1];\n      }\n    } else {\n      $target$$182 = 2;\n      i$$25 = matchValue$$13[0];\n      xs$$120 = matchValue$$13[1];\n    }\n\n    switch ($target$$182) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          const x$$62 = matchValue$$13[1].head;\n          return new List(x$$62, new List());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$25, new List(), xs$$120)[0];\n        }\n    }\n  }\n}\nexport function takeWhile(predicate$$1, xs$$121) {\n  if (xs$$121.tail != null) {\n    if (xs$$121.tail.tail == null) {\n      if (predicate$$1(xs$$121.head)) {\n        return xs$$121;\n      } else {\n        return xs$$121.tail;\n      }\n    } else {\n      if (!predicate$$1(xs$$121.head)) {\n        return new List();\n      } else {\n        return new List(xs$$121.head, takeWhile(predicate$$1, xs$$121.tail));\n      }\n    }\n  } else {\n    return xs$$121;\n  }\n}\nexport function truncate(i$$26, xs$$123) {\n  const matchValue$$14 = [i$$26, xs$$123];\n\n  if (matchValue$$14[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$185, i$$29, xs$$124;\n\n    if (matchValue$$14[0] === 0) {\n      $target$$185 = 0;\n    } else if (matchValue$$14[0] === 1) {\n      if (matchValue$$14[1].tail != null) {\n        $target$$185 = 1;\n      } else {\n        $target$$185 = 2;\n        i$$29 = matchValue$$14[0];\n        xs$$124 = matchValue$$14[1];\n      }\n    } else {\n      $target$$185 = 2;\n      i$$29 = matchValue$$14[0];\n      xs$$124 = matchValue$$14[1];\n    }\n\n    switch ($target$$185) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          const x$$65 = matchValue$$14[1].head;\n          return new List(x$$65, new List());\n        }\n\n      case 2:\n        {\n          return takeSplitAux(false, i$$29, new List(), xs$$124)[0];\n        }\n    }\n  }\n}\nexport function splitAt(i$$30, xs$$125) {\n  const matchValue$$15 = [i$$30, xs$$125];\n\n  if (matchValue$$15[0] < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$186, i$$33, xs$$127;\n\n    if (matchValue$$15[0] === 0) {\n      $target$$186 = 0;\n    } else if (matchValue$$15[0] === 1) {\n      if (matchValue$$15[1].tail != null) {\n        $target$$186 = 1;\n      } else {\n        $target$$186 = 2;\n        i$$33 = matchValue$$15[0];\n        xs$$127 = matchValue$$15[1];\n      }\n    } else {\n      $target$$186 = 2;\n      i$$33 = matchValue$$15[0];\n      xs$$127 = matchValue$$15[1];\n    }\n\n    switch ($target$$186) {\n      case 0:\n        {\n          return [new List(), xs$$125];\n        }\n\n      case 1:\n        {\n          const xs$$126 = matchValue$$15[1].tail;\n          const x$$66 = matchValue$$15[1].head;\n          return [new List(x$$66, new List()), xs$$126];\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$33, new List(), xs$$127);\n        }\n    }\n  }\n}\nexport function slice(lower, upper, xs$$128) {\n  const lower$$1 = defaultArg(lower, -1) | 0;\n  const upper$$1 = defaultArg(upper, -1) | 0;\n  return reverse(foldIndexed(function f$$56(i$$34, acc$$26, x$$67) {\n    if ((lower$$1 === -1 ? true : lower$$1 <= i$$34) ? upper$$1 === -1 ? true : i$$34 <= upper$$1 : false) {\n      return new List(x$$67, acc$$26);\n    } else {\n      return acc$$26;\n    }\n  }, new List(), xs$$128));\n}\nexport function distinctBy(projection$$4, xs$$131, eq$$2) {\n  const hashSet = createMutable([], comparerFromEqualityComparer(eq$$2));\n  return filter(function f$$57($arg$$1) {\n    return addToSet(projection$$4($arg$$1), hashSet);\n  }, xs$$131);\n}\nexport function distinct(xs$$133, eq$$3) {\n  return distinctBy(function (x$$68) {\n    return x$$68;\n  }, xs$$133, eq$$3);\n}\nexport function exactlyOne(xs$$134) {\n  if (length$$1(xs$$134) === 1) {\n    return item$$1(0, xs$$134);\n  } else if (length$$1(xs$$134) === 0) {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: list\");\n  } else {\n    throw new Error(\"Input list too long\\\\nParameter name: list\");\n  }\n}\nexport function groupBy(projection$$5, xs$$135, eq$$4) {\n  const dict = createMutable$$1([], comparerFromEqualityComparer(eq$$4));\n  iterate$$1(function (v$$2) {\n    const key = projection$$5(v$$2);\n\n    if (dict.has(key)) {\n      dict.set(key, new List(v$$2, dict.get(key)));\n    } else {\n      dict.set(key, new List(v$$2, new List()));\n    }\n  }, xs$$135);\n  return ofSeq(map$$1(function mapping(kv) {\n    return [kv[0], reverse(kv[1])];\n  }, dict));\n}\nexport function countBy(projection$$6, xs$$137, eq$$5) {\n  const dict$$1 = createMutable$$1([], comparerFromEqualityComparer(eq$$5));\n  iterate(function (v$$3) {\n    const key$$1 = projection$$6(v$$3);\n    const matchValue$$16 = tryGetValue(dict$$1, key$$1, null);\n\n    if (matchValue$$16[0]) {\n      matchValue$$16[1].contents = matchValue$$16[1].contents + 1;\n    } else {\n      dict$$1.set(key$$1, new FSharpRef(1));\n    }\n  }, xs$$137);\n  let result$$1 = new List();\n  iterate$$1(function (group) {\n    result$$1 = new List([group[0], group[1].contents], result$$1);\n  }, dict$$1);\n  return result$$1;\n}\nexport function where(predicate$$2, xs$$138) {\n  return filter(predicate$$2, xs$$138);\n}\nexport function pairwise(xs$$139) {\n  const inner = function inner(xs$$140, acc$$27, x1) {\n    inner: while (true) {\n      if (xs$$140.tail != null) {\n        const xs$$141 = xs$$140.tail;\n        const x2 = xs$$140.head;\n        acc$$27.push([x1, x2]);\n        const $acc$$27$$198 = acc$$27;\n        xs$$140 = xs$$141;\n        acc$$27 = $acc$$27$$198;\n        x1 = x2;\n        continue inner;\n      } else {\n        return ofArray(acc$$27);\n      }\n\n      break;\n    }\n  };\n\n  var $target$$199, x1$$1, x2$$1, xs$$142;\n\n  if (xs$$139.tail != null) {\n    if (xs$$139.tail.tail != null) {\n      $target$$199 = 1;\n      x1$$1 = xs$$139.head;\n      x2$$1 = xs$$139.tail.head;\n      xs$$142 = xs$$139.tail.tail;\n    } else {\n      $target$$199 = 0;\n    }\n  } else {\n    $target$$199 = 0;\n  }\n\n  switch ($target$$199) {\n    case 0:\n      {\n        return new List();\n      }\n\n    case 1:\n      {\n        const acc$$28 = [];\n        acc$$28.push([x1$$1, x2$$1]);\n        return inner(xs$$142, acc$$28, x2$$1);\n      }\n  }\n}\nexport function windowed(windowSize, source$$1) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  return ofSeq$$1(delay(function () {\n    return map$$1(function (i$$35) {\n      return slice$$1(i$$35 - windowSize, i$$35 - 1, source$$1);\n    }, rangeNumber(windowSize, 1, length$$1(source$$1)));\n  }));\n}","export class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    constructor() {\n        this.callCount = 0;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec (dispatch:Dispatch<'msg>) (cmd:Cmd<'msg>) =\n        cmd |> List.iter (fun sub -> sub dispatch)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsync =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n        /// Command that will evaluate an async block to the message\n        let result (task: Async<'msg>)  : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch x\n                    | _ -> ()\n                }\n            [bind >> Async.StartImmediate]\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","namespace Thoth.Json\n\ntype JsonValue = obj\n\ntype ErrorReason =\n    | BadPrimitive of string * JsonValue\n    | BadPrimitiveExtra of string * JsonValue * string\n    | BadType of string * JsonValue\n    | BadField of string * JsonValue\n    | BadPath of string * JsonValue * string\n    | TooSmallArray of string * JsonValue\n    | FailMessage of string\n    | BadOneOf of string list\n\ntype DecoderError = string * ErrorReason\n\ntype Decoder<'T> = string -> JsonValue -> Result<'T, DecoderError>\n\ntype Encoder<'T> = 'T -> JsonValue\n\ntype BoxedDecoder = Decoder<obj>\n\ntype BoxedEncoder = Encoder<obj>\n\ntype ExtraCoders = Map<string, BoxedEncoder * BoxedDecoder>\n\nmodule internal Util =\n    open System.Collections.Generic\n\n    type Cache<'Value>() =\n        let cache = Dictionary<string, 'Value>()\n        member __.GetOrAdd(key, factory) =\n            match cache.TryGetValue(key) with\n            | true, x -> x\n            | false, _ ->\n                let x = factory()\n                cache.Add(key, x)\n                x\n\n    // Tree shaking will remove this if not used\n    // so no need to make them lazy in Fable\n    let CachedEncoders = Cache<BoxedEncoder>()\n    let CachedDecoders = Cache<BoxedDecoder>()\n\n    /// If used from .NET the type resolver won't be injected,\n    /// throw a more informative error than just a null reference.\n    let inline resolveType (resolver: Fable.Core.ITypeResolver<'T> option): System.Type =\n#if !FABLE_COMPILER\n        failwith \"Thoth.Json is only compatible with Fable, use Thoth.Json.Net\"\n#else\n        resolver.Value.ResolveType()\n#endif\n","import { List, declare, Record } from \"../Types\";\nimport { record, array, int32 } from \"../Reflection\";\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, toInt, op_Modulus, op_Multiply, fromInteger, fromBits } from \"../Long\";\nimport { ofList, copy, initialize, map, fill } from \"../Array\";\nimport { int32ToString } from \"../Util\";\nimport { isNullOrEmpty, join } from \"../String\";\nexport const BigNat = declare(function BigInt_BigNat(arg1, arg2) {\n  this.bound = arg1 | 0;\n  this.digits = arg2;\n}, Record);\nexport function BigNat$reflection() {\n  return record(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32], [\"digits\", array(int32)]]);\n}\nexport function BigNatModule$002EFFT$$$pow32(x, n) {\n  BigNatModule$002EFFT$$$pow32: while (true) {\n    if (n === 0) {\n      return 1;\n    } else if (n % 2 === 0) {\n      const $n$$2 = n;\n      const $x$$1 = x;\n      x = $x$$1 * $x$$1;\n      n = ~~($n$$2 / 2);\n      continue BigNatModule$002EFFT$$$pow32;\n    } else {\n      return x * BigNatModule$002EFFT$$$pow32(x * x, ~~(n / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$$$leastBounding2Power(b) {\n  const findBounding2Power = function findBounding2Power(b$$1, tp, i) {\n    findBounding2Power: while (true) {\n      if (b$$1 <= tp) {\n        return [tp, i];\n      } else {\n        const $b$$1$$3 = b$$1;\n        const $i$$5 = i;\n        const $tp$$4 = tp;\n        b$$1 = $b$$1$$3;\n        tp = $tp$$4 * 2;\n        i = $i$$5 + 1;\n        continue findBounding2Power;\n      }\n\n      break;\n    }\n  };\n\n  return findBounding2Power(b, 1, 0);\n}\nconst BigNatModule$002EFFT$$$patternInput$004074 = [fromBits(2013265921, 0, false), 27, 15, 31, 440564289];\nexport const BigNatModule$002EFFT$$$w = BigNatModule$002EFFT$$$patternInput$004074[4];\nexport const BigNatModule$002EFFT$$$p = BigNatModule$002EFFT$$$patternInput$004074[0];\nexport const BigNatModule$002EFFT$$$m = BigNatModule$002EFFT$$$patternInput$004074[2];\nexport const BigNatModule$002EFFT$$$k = BigNatModule$002EFFT$$$patternInput$004074[1];\nexport const BigNatModule$002EFFT$$$g = BigNatModule$002EFFT$$$patternInput$004074[3];\nexport const BigNatModule$002EFFT$$$primeP = BigNatModule$002EFFT$$$p;\nexport const BigNatModule$002EFFT$$$maxBitsInsideFp = 30;\nexport const BigNatModule$002EFFT$002EFp$$$p = 2013265921;\nexport const BigNatModule$002EFFT$002EFp$$$p64 = fromBits(2013265921, 0, true);\nexport function BigNatModule$002EFFT$002EFp$$$toInt(x$$1) {\n  return ~~x$$1;\n}\nexport function BigNatModule$002EFFT$002EFp$$$ofInt32(x$$2) {\n  return x$$2 >>> 0;\n}\nexport const BigNatModule$002EFFT$002EFp$$$mzero = 0;\nexport const BigNatModule$002EFFT$002EFp$$$mone = 1;\nexport const BigNatModule$002EFFT$002EFp$$$mtwo = 2;\nexport function BigNatModule$002EFFT$002EFp$$$mpow(x$$3, n$$1) {\n  BigNatModule$002EFFT$002EFp$$$mpow: while (true) {\n    if (n$$1 === 0) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (n$$1 % 2 === 0) {\n      const $n$$1$$7 = n$$1;\n      const $x$$3$$6 = x$$3;\n      x$$3 = toInt(op_Modulus(op_Multiply(fromInteger($x$$3$$6, true, 6), fromInteger($x$$3$$6, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      n$$1 = ~~($n$$1$$7 / 2);\n      continue BigNatModule$002EFFT$002EFp$$$mpow;\n    } else {\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(BigNatModule$002EFFT$002EFp$$$mpow(toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(x$$3, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, ~~(n$$1 / 2)), true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$mpowL(x$$7, n$$2) {\n  BigNatModule$002EFFT$002EFp$$$mpowL: while (true) {\n    if (equals(n$$2, fromBits(0, 0, false))) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (equals(op_Modulus(n$$2, fromBits(2, 0, false)), fromBits(0, 0, false))) {\n      const $n$$2$$9 = n$$2;\n      const $x$$7$$8 = x$$7;\n      x$$7 = toInt(op_Modulus(op_Multiply(fromInteger($x$$7$$8, true, 6), fromInteger($x$$7$$8, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      n$$2 = op_Division($n$$2$$9, fromBits(2, 0, false));\n      continue BigNatModule$002EFFT$002EFp$$$mpowL;\n    } else {\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(BigNatModule$002EFFT$002EFp$$$mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(x$$7, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, op_Division(n$$2, fromBits(2, 0, false))), true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(n$$3) {\n  return BigNatModule$002EFFT$002EFp$$$mpow(BigNatModule$002EFFT$$$w >>> 0, BigNatModule$002EFFT$$$pow32(2, BigNatModule$002EFFT$$$k - n$$3));\n}\nexport function BigNatModule$002EFFT$002EFp$$$minv(x$$11) {\n  return BigNatModule$002EFFT$002EFp$$$mpowL(x$$11, op_Subtraction(BigNatModule$002EFFT$$$primeP, fromBits(2, 0, false)));\n}\nexport function BigNatModule$002EFFT$$$computeFFT(lambda, mu, n$$4, w, u, res, offset) {\n  if (n$$4 === 1) {\n    res[offset] = u[mu];\n  } else {\n    const halfN = ~~(n$$4 / 2) | 0;\n    const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    const offsetHalfN = offset + halfN | 0;\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\n    let wj = BigNatModule$002EFFT$002EFp$$$mone;\n\n    for (let j = 0; j <= halfN - 1; j++) {\n      const even = res[offset + j];\n      const odd = res[offsetHalfN + j];\n      res[offset + j] = (even + (toInt(op_Modulus(op_Multiply(fromInteger(wj, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0)) % BigNatModule$002EFFT$002EFp$$$p;\n      res[offsetHalfN + j] = (even + BigNatModule$002EFFT$002EFp$$$p - (toInt(op_Modulus(op_Multiply(fromInteger(wj, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0)) % BigNatModule$002EFFT$002EFp$$$p;\n      wj = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(wj, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n  }\n}\nexport function BigNatModule$002EFFT$$$computFftInPlace(n$$5, w$$1, u$$1) {\n  const lambda$$1 = 1;\n  const mu$$1 = 0;\n  const res$$1 = fill(new Uint32Array(n$$5), 0, n$$5, BigNatModule$002EFFT$002EFp$$$mzero);\n  const offset$$1 = 0;\n  BigNatModule$002EFFT$$$computeFFT(lambda$$1, mu$$1, n$$5, w$$1, u$$1, res$$1, offset$$1);\n  return res$$1;\n}\nexport function BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$6, w$$2, uT) {\n  const bigKInv = BigNatModule$002EFFT$002EFp$$$minv(n$$6 >>> 0);\n  return map(function (y$$12) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y$$12, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, BigNatModule$002EFFT$$$computFftInPlace(n$$6, BigNatModule$002EFFT$002EFp$$$minv(w$$2), uT), Uint32Array);\n}\nexport const BigNatModule$002EFFT$$$maxTwoPower = 29;\nexport const BigNatModule$002EFFT$$$twoPowerTable = initialize(BigNatModule$002EFFT$$$maxTwoPower - 1, function (i$$1) {\n  return BigNatModule$002EFFT$$$pow32(2, i$$1);\n}, Int32Array);\nexport function BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(bigK, k, u$$2, v) {\n  const w$$3 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(k);\n  const n$$7 = bigK | 0;\n  const uT$$1 = BigNatModule$002EFFT$$$computFftInPlace(n$$7, w$$3, u$$2);\n  const vT = BigNatModule$002EFFT$$$computFftInPlace(n$$7, w$$3, v);\n  const rT = initialize(n$$7, function (i$$2) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(uT$$1[i$$2], true, 6), fromInteger(vT[i$$2], true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r = BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$7, w$$3, rT);\n  return r;\n}\nexport function BigNatModule$002EFFT$$$padTo(n$$8, u$$3) {\n  const uBound = u$$3.length | 0;\n  return initialize(n$$8, function (i$$3) {\n    return i$$3 < uBound ? BigNatModule$002EFFT$002EFp$$$ofInt32(u$$3[i$$3]) : BigNatModule$002EFFT$002EFp$$$mzero;\n  }, Uint32Array);\n}\nexport function BigNatModule$002EFFT$$$computeFftPolynomialProduct(degu, u$$4, degv, v$$1) {\n  const deguv = degu + degv | 0;\n  const bound = deguv + 1 | 0;\n  const patternInput = BigNatModule$002EFFT$$$leastBounding2Power(bound);\n  const w$$4 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(patternInput[1]);\n  const u$$5 = BigNatModule$002EFFT$$$padTo(patternInput[0], u$$4);\n  const v$$2 = BigNatModule$002EFFT$$$padTo(patternInput[0], v$$1);\n  const n$$9 = patternInput[0] | 0;\n  const uT$$2 = BigNatModule$002EFFT$$$computFftInPlace(n$$9, w$$4, u$$5);\n  const vT$$1 = BigNatModule$002EFFT$$$computFftInPlace(n$$9, w$$4, v$$2);\n  const rT$$1 = initialize(n$$9, function (i$$4) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(uT$$2[i$$4], true, 6), fromInteger(vT$$1[i$$4], true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r$$1 = BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$9, w$$4, rT$$1);\n  return map(BigNatModule$002EFFT$002EFp$$$toInt, r$$1, Int32Array);\n}\nexport const BigNatModule$002EFFT$$$mzero = BigNatModule$002EFFT$002EFp$$$mzero;\nexport const BigNatModule$002EFFT$$$mone = BigNatModule$002EFFT$002EFp$$$mone;\nexport const BigNatModule$002EFFT$$$maxFp = (BigNatModule$002EFFT$002EFp$$$p + BigNatModule$002EFFT$002EFp$$$p - BigNatModule$002EFFT$$$mone) % BigNatModule$002EFFT$002EFp$$$p;\nexport function BigNatModule$$$bound(n$$10) {\n  return n$$10.bound;\n}\nexport function BigNatModule$$$setBound(n$$11, v$$3) {\n  n$$11.bound = v$$3;\n}\nexport function BigNatModule$$$coeff(n$$12, i$$5) {\n  return n$$12.digits[i$$5];\n}\nexport function BigNatModule$$$coeff64(n$$13, i$$6) {\n  return fromInteger(BigNatModule$$$coeff(n$$13, i$$6), false, 2);\n}\nexport function BigNatModule$$$setCoeff(n$$14, i$$7, v$$4) {\n  n$$14.digits[i$$7] = v$$4;\n}\nexport function BigNatModule$$$pow64(x$$23, n$$15) {\n  BigNatModule$$$pow64: while (true) {\n    if (n$$15 === 0) {\n      return fromBits(1, 0, false);\n    } else if (n$$15 % 2 === 0) {\n      const $n$$15$$11 = n$$15;\n      const $x$$23$$10 = x$$23;\n      x$$23 = op_Multiply($x$$23$$10, $x$$23$$10);\n      n$$15 = ~~($n$$15$$11 / 2);\n      continue BigNatModule$$$pow64;\n    } else {\n      return op_Multiply(x$$23, BigNatModule$$$pow64(op_Multiply(x$$23, x$$23), ~~(n$$15 / 2)));\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$pow32(x$$24, n$$16) {\n  BigNatModule$$$pow32: while (true) {\n    if (n$$16 === 0) {\n      return 1;\n    } else if (n$$16 % 2 === 0) {\n      const $n$$16$$13 = n$$16;\n      const $x$$24$$12 = x$$24;\n      x$$24 = $x$$24$$12 * $x$$24$$12;\n      n$$16 = ~~($n$$16$$13 / 2);\n      continue BigNatModule$$$pow32;\n    } else {\n      return x$$24 * BigNatModule$$$pow32(x$$24 * x$$24, ~~(n$$16 / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$hash(n$$17) {\n  let res$$2 = 0;\n\n  for (let i$$8 = 0; i$$8 <= n$$17.bound - 1; i$$8++) {\n    res$$2 = n$$17.digits[i$$8] + (res$$2 << 3);\n  }\n\n  return res$$2 | 0;\n}\nexport function BigNatModule$$$maxInt(a, b$$2) {\n  if (a < b$$2) {\n    return b$$2 | 0;\n  } else {\n    return a | 0;\n  }\n}\nexport function BigNatModule$$$minInt(a$$1, b$$3) {\n  if (a$$1 < b$$3) {\n    return a$$1 | 0;\n  } else {\n    return b$$3 | 0;\n  }\n}\nexport const BigNatModule$$$baseBits = 24;\nexport const BigNatModule$$$baseN = 16777216;\nexport const BigNatModule$$$baseMask = 16777215;\nexport const BigNatModule$$$baseNi64 = fromBits(16777216, 0, false);\nexport const BigNatModule$$$baseMaski64 = fromBits(16777215, 0, false);\nexport const BigNatModule$$$baseMaskU = fromBits(16777215, 0, true);\nexport const BigNatModule$$$baseMask32A = 16777215;\nexport const BigNatModule$$$baseMask32B = 255;\nexport const BigNatModule$$$baseShift32B = 24;\nexport const BigNatModule$$$baseMask64A = 16777215;\nexport const BigNatModule$$$baseMask64B = 16777215;\nexport const BigNatModule$$$baseMask64C = 65535;\nexport const BigNatModule$$$baseShift64B = 24;\nexport const BigNatModule$$$baseShift64C = 48;\nexport function BigNatModule$$$divbase(x$$25) {\n  return ~~(x$$25 >>> 0 >>> BigNatModule$$$baseBits);\n}\nexport function BigNatModule$$$modbase(x$$26) {\n  return x$$26 & BigNatModule$$$baseMask;\n}\nexport function BigNatModule$$$createN(b$$4) {\n  return new BigNat(b$$4, new Int32Array(b$$4));\n}\nexport function BigNatModule$$$copyN(x$$27) {\n  return new BigNat(x$$27.bound, copy(x$$27.digits, Int32Array));\n}\nexport function BigNatModule$$$normN(n$$18) {\n  const findLeastBound = function findLeastBound(na, i$$9) {\n    findLeastBound: while (true) {\n      if (i$$9 === -1 ? true : na[i$$9] !== 0) {\n        return i$$9 + 1 | 0;\n      } else {\n        const $i$$9$$15 = i$$9;\n        const $na$$14 = na;\n        na = $na$$14;\n        i$$9 = $i$$9$$15 - 1;\n        continue findLeastBound;\n      }\n\n      break;\n    }\n  };\n\n  const bound$$1 = findLeastBound(n$$18.digits, n$$18.bound - 1) | 0;\n  n$$18.bound = bound$$1;\n  return n$$18;\n}\nexport const BigNatModule$$$boundInt = 2;\nexport const BigNatModule$$$boundInt64 = 3;\nexport const BigNatModule$$$boundBase = 1;\nexport function BigNatModule$$$embed(x$$28) {\n  const x$$29 = (x$$28 < 0 ? 0 : x$$28) | 0;\n\n  if (x$$29 < BigNatModule$$$baseN) {\n    const r$$2 = BigNatModule$$$createN(1);\n    r$$2.digits[0] = x$$29;\n    return BigNatModule$$$normN(r$$2);\n  } else {\n    const r$$3 = BigNatModule$$$createN(BigNatModule$$$boundInt);\n\n    for (let i$$10 = 0; i$$10 <= BigNatModule$$$boundInt - 1; i$$10++) {\n      r$$3.digits[i$$10] = ~~(x$$29 / BigNatModule$$$pow32(BigNatModule$$$baseN, i$$10)) % BigNatModule$$$baseN;\n    }\n\n    return BigNatModule$$$normN(r$$3);\n  }\n}\nexport function BigNatModule$$$embed64(x$$30) {\n  const x$$31 = compare(x$$30, fromBits(0, 0, false)) < 0 ? fromBits(0, 0, false) : x$$30;\n  const r$$4 = BigNatModule$$$createN(BigNatModule$$$boundInt64);\n\n  for (let i$$11 = 0; i$$11 <= BigNatModule$$$boundInt64 - 1; i$$11++) {\n    r$$4.digits[i$$11] = ~~toInt(op_Modulus(op_Division(x$$31, BigNatModule$$$pow64(BigNatModule$$$baseNi64, i$$11)), BigNatModule$$$baseNi64));\n  }\n\n  return BigNatModule$$$normN(r$$4);\n}\nexport function BigNatModule$$$eval32(n$$19) {\n  if (n$$19.bound === 1) {\n    return n$$19.digits[0] | 0;\n  } else {\n    let acc = 0;\n\n    for (let i$$12 = n$$19.bound - 1; i$$12 >= 0; i$$12--) {\n      acc = n$$19.digits[i$$12] + BigNatModule$$$baseN * acc;\n    }\n\n    return acc | 0;\n  }\n}\nexport function BigNatModule$$$eval64(n$$20) {\n  if (n$$20.bound === 1) {\n    return fromInteger(n$$20.digits[0], false, 2);\n  } else {\n    let acc$$1 = fromBits(0, 0, false);\n\n    for (let i$$13 = n$$20.bound - 1; i$$13 >= 0; i$$13--) {\n      acc$$1 = op_Addition(fromInteger(n$$20.digits[i$$13], false, 2), op_Multiply(BigNatModule$$$baseNi64, acc$$1));\n    }\n\n    return acc$$1;\n  }\n}\nexport const BigNatModule$$$one = BigNatModule$$$embed(1);\nexport const BigNatModule$$$zero = BigNatModule$$$embed(0);\nexport function BigNatModule$$$restrictTo(d, n$$21) {\n  return new BigNat(BigNatModule$$$minInt(d, n$$21.bound), n$$21.digits);\n}\nexport function BigNatModule$$$shiftUp(d$$1, n$$22) {\n  const m = BigNatModule$$$createN(n$$22.bound + d$$1);\n\n  for (let i$$14 = 0; i$$14 <= n$$22.bound - 1; i$$14++) {\n    m.digits[i$$14 + d$$1] = n$$22.digits[i$$14];\n  }\n\n  return m;\n}\nexport function BigNatModule$$$shiftDown(d$$2, n$$23) {\n  if (n$$23.bound - d$$2 <= 0) {\n    return BigNatModule$$$zero;\n  } else {\n    const m$$1 = BigNatModule$$$createN(n$$23.bound - d$$2);\n\n    for (let i$$15 = 0; i$$15 <= m$$1.bound - 1; i$$15++) {\n      m$$1.digits[i$$15] = n$$23.digits[i$$15 + d$$2];\n    }\n\n    return m$$1;\n  }\n}\nexport function BigNatModule$$$degree(n$$24) {\n  return n$$24.bound - 1;\n}\nexport function BigNatModule$$$addP(i$$16, n$$25, c, p, q, r$$5) {\n  BigNatModule$$$addP: while (true) {\n    if (i$$16 < n$$25) {\n      const x$$32 = (i$$16 < p.bound ? p.digits[i$$16] : 0) + (i$$16 < q.bound ? q.digits[i$$16] : 0) + c | 0;\n      r$$5.digits[i$$16] = BigNatModule$$$modbase(x$$32);\n      const c$$1 = BigNatModule$$$divbase(x$$32) | 0;\n      const $i$$16$$16 = i$$16;\n      const $n$$25$$17 = n$$25;\n      const $p$$18 = p;\n      const $q$$19 = q;\n      const $r$$5$$20 = r$$5;\n      i$$16 = $i$$16$$16 + 1;\n      n$$25 = $n$$25$$17;\n      c = c$$1;\n      p = $p$$18;\n      q = $q$$19;\n      r$$5 = $r$$5$$20;\n      continue BigNatModule$$$addP;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$add(p$$1, q$$1) {\n  const rbound = 1 + BigNatModule$$$maxInt(p$$1.bound, q$$1.bound) | 0;\n  const r$$6 = BigNatModule$$$createN(rbound);\n  const carry = 0;\n  BigNatModule$$$addP(0, rbound, carry, p$$1, q$$1, r$$6);\n  return BigNatModule$$$normN(r$$6);\n}\nexport function BigNatModule$$$subP(i$$19, n$$26, c$$2, p$$2, q$$2, r$$7) {\n  BigNatModule$$$subP: while (true) {\n    if (i$$19 < n$$26) {\n      const x$$33 = (i$$19 < p$$2.bound ? p$$2.digits[i$$19] : 0) - (i$$19 < q$$2.bound ? q$$2.digits[i$$19] : 0) + c$$2 | 0;\n\n      if (x$$33 > 0) {\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$33);\n        const c$$3 = BigNatModule$$$divbase(x$$33) | 0;\n        const $i$$19$$21 = i$$19;\n        const $n$$26$$22 = n$$26;\n        const $p$$2$$23 = p$$2;\n        const $q$$2$$24 = q$$2;\n        const $r$$7$$25 = r$$7;\n        i$$19 = $i$$19$$21 + 1;\n        n$$26 = $n$$26$$22;\n        c$$2 = c$$3;\n        p$$2 = $p$$2$$23;\n        q$$2 = $q$$2$$24;\n        r$$7 = $r$$7$$25;\n        continue BigNatModule$$$subP;\n      } else {\n        const x$$34 = x$$33 + BigNatModule$$$baseN | 0;\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$34);\n        const c$$4 = BigNatModule$$$divbase(x$$34) - 1 | 0;\n        const $i$$19$$26 = i$$19;\n        const $n$$26$$27 = n$$26;\n        const $p$$2$$28 = p$$2;\n        const $q$$2$$29 = q$$2;\n        const $r$$7$$30 = r$$7;\n        i$$19 = $i$$19$$26 + 1;\n        n$$26 = $n$$26$$27;\n        c$$2 = c$$4;\n        p$$2 = $p$$2$$28;\n        q$$2 = $q$$2$$29;\n        r$$7 = $r$$7$$30;\n        continue BigNatModule$$$subP;\n      }\n    } else {\n      const underflow = c$$2 !== 0;\n      return underflow;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$sub(p$$3, q$$3) {\n  const rbound$$1 = BigNatModule$$$maxInt(p$$3.bound, q$$3.bound) | 0;\n  const r$$8 = BigNatModule$$$createN(rbound$$1);\n  const carry$$1 = 0;\n  const underflow$$1 = BigNatModule$$$subP(0, rbound$$1, carry$$1, p$$3, q$$3, r$$8);\n\n  if (underflow$$1) {\n    return BigNatModule$$$embed(0);\n  } else {\n    return BigNatModule$$$normN(r$$8);\n  }\n}\nexport function BigNatModule$$$isZero(p$$4) {\n  return p$$4.bound === 0;\n}\nexport function BigNatModule$$$IsZero(p$$5) {\n  return BigNatModule$$$isZero(p$$5);\n}\nexport function BigNatModule$$$isOne(p$$6) {\n  if (p$$6.bound === 1) {\n    return p$$6.digits[0] === 1;\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$equal(p$$7, q$$4) {\n  if (p$$7.bound === q$$4.bound) {\n    const check = function check(pa, qa, i$$22) {\n      check: while (true) {\n        if (i$$22 === -1) {\n          return true;\n        } else if (pa[i$$22] === qa[i$$22]) {\n          const $i$$22$$33 = i$$22;\n          const $pa$$31 = pa;\n          const $qa$$32 = qa;\n          pa = $pa$$31;\n          qa = $qa$$32;\n          i$$22 = $i$$22$$33 - 1;\n          continue check;\n        } else {\n          return false;\n        }\n\n        break;\n      }\n    };\n\n    return check(p$$7.digits, q$$4.digits, p$$7.bound - 1);\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$shiftCompare(p$$8, pn, q$$5, qn) {\n  if (p$$8.bound + pn < q$$5.bound + qn) {\n    return -1 | 0;\n  } else if (p$$8.bound + pn > q$$5.bound + pn) {\n    return 1;\n  } else {\n    const check$$1 = function check$$1(pa$$1, qa$$1, i$$23) {\n      check$$1: while (true) {\n        if (i$$23 === -1) {\n          return 0;\n        } else {\n          const pai = (i$$23 < pn ? 0 : pa$$1[i$$23 - pn]) | 0;\n          const qai = (i$$23 < qn ? 0 : qa$$1[i$$23 - qn]) | 0;\n\n          if (pai === qai) {\n            const $i$$23$$36 = i$$23;\n            const $pa$$1$$34 = pa$$1;\n            const $qa$$1$$35 = qa$$1;\n            pa$$1 = $pa$$1$$34;\n            qa$$1 = $qa$$1$$35;\n            i$$23 = $i$$23$$36 - 1;\n            continue check$$1;\n          } else if (pai < qai) {\n            return -1 | 0;\n          } else {\n            return 1;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return check$$1(p$$8.digits, q$$5.digits, p$$8.bound + pn - 1) | 0;\n  }\n}\nexport function BigNatModule$$$compare(p$$9, q$$6) {\n  if (p$$9.bound < q$$6.bound) {\n    return -1 | 0;\n  } else if (p$$9.bound > q$$6.bound) {\n    return 1;\n  } else {\n    const check$$2 = function check$$2(pa$$2, qa$$2, i$$24) {\n      check$$2: while (true) {\n        if (i$$24 === -1) {\n          return 0;\n        } else if (pa$$2[i$$24] === qa$$2[i$$24]) {\n          const $i$$24$$39 = i$$24;\n          const $pa$$2$$37 = pa$$2;\n          const $qa$$2$$38 = qa$$2;\n          pa$$2 = $pa$$2$$37;\n          qa$$2 = $qa$$2$$38;\n          i$$24 = $i$$24$$39 - 1;\n          continue check$$2;\n        } else if (pa$$2[i$$24] < qa$$2[i$$24]) {\n          return -1 | 0;\n        } else {\n          return 1;\n        }\n\n        break;\n      }\n    };\n\n    return check$$2(p$$9.digits, q$$6.digits, p$$9.bound - 1) | 0;\n  }\n}\nexport function BigNatModule$$$lt(p$$10, q$$7) {\n  return BigNatModule$$$compare(p$$10, q$$7) === -1;\n}\nexport function BigNatModule$$$gt(p$$11, q$$8) {\n  return BigNatModule$$$compare(p$$11, q$$8) === 1;\n}\nexport function BigNatModule$$$lte(p$$12, q$$9) {\n  return BigNatModule$$$compare(p$$12, q$$9) !== 1;\n}\nexport function BigNatModule$$$gte(p$$13, q$$10) {\n  return BigNatModule$$$compare(p$$13, q$$10) !== -1;\n}\nexport function BigNatModule$$$min(a$$2, b$$5) {\n  if (BigNatModule$$$lt(a$$2, b$$5)) {\n    return a$$2;\n  } else {\n    return b$$5;\n  }\n}\nexport function BigNatModule$$$max(a$$3, b$$6) {\n  if (BigNatModule$$$lt(a$$3, b$$6)) {\n    return b$$6;\n  } else {\n    return a$$3;\n  }\n}\nexport function BigNatModule$$$contributeArr(a$$4, i$$25, c$$5) {\n  BigNatModule$$$contributeArr: while (true) {\n    const x$$35 = op_Addition(fromInteger(a$$4[i$$25], false, 2), c$$5);\n    const c$$6 = op_Division(x$$35, BigNatModule$$$baseNi64);\n    const x$$38 = ~~toInt(op_BitwiseAnd(x$$35, BigNatModule$$$baseMaski64)) | 0;\n    a$$4[i$$25] = x$$38;\n\n    if (compare(c$$6, fromBits(0, 0, false)) > 0) {\n      const $a$$4$$40 = a$$4;\n      const $i$$25$$41 = i$$25;\n      a$$4 = $a$$4$$40;\n      i$$25 = $i$$25$$41 + 1;\n      c$$5 = c$$6;\n      continue BigNatModule$$$contributeArr;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$scale(k$$2, p$$14) {\n  const rbound$$2 = p$$14.bound + BigNatModule$$$boundInt | 0;\n  const r$$9 = BigNatModule$$$createN(rbound$$2);\n  const k$$3 = fromInteger(k$$2, false, 2);\n\n  for (let i$$26 = 0; i$$26 <= p$$14.bound - 1; i$$26++) {\n    const kpi = op_Multiply(k$$3, fromInteger(p$$14.digits[i$$26], false, 2));\n    BigNatModule$$$contributeArr(r$$9.digits, i$$26, kpi);\n  }\n\n  return BigNatModule$$$normN(r$$9);\n}\nexport function BigNatModule$$$mulSchoolBookBothSmall(p$$15, q$$11) {\n  const r$$11 = BigNatModule$$$createN(2);\n  const rak = op_Multiply(fromInteger(p$$15, false, 2), fromInteger(q$$11, false, 2));\n  BigNatModule$$$setCoeff(r$$11, 0, ~~toInt(op_BitwiseAnd(rak, BigNatModule$$$baseMaski64)));\n  BigNatModule$$$setCoeff(r$$11, 1, ~~toInt(op_Division(rak, BigNatModule$$$baseNi64)));\n  return BigNatModule$$$normN(r$$11);\n}\nexport function BigNatModule$$$mulSchoolBookCarry(r$$12, c$$8, k$$4) {\n  BigNatModule$$$mulSchoolBookCarry: while (true) {\n    if (compare(c$$8, fromBits(0, 0, false)) > 0) {\n      const rak$$1 = op_Addition(BigNatModule$$$coeff64(r$$12, k$$4), c$$8);\n      BigNatModule$$$setCoeff(r$$12, k$$4, ~~toInt(op_BitwiseAnd(rak$$1, BigNatModule$$$baseMaski64)));\n      const $k$$4$$43 = k$$4;\n      const $r$$12$$42 = r$$12;\n      r$$12 = $r$$12$$42;\n      c$$8 = op_Division(rak$$1, BigNatModule$$$baseNi64);\n      k$$4 = $k$$4$$43 + 1;\n      continue BigNatModule$$$mulSchoolBookCarry;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$mulSchoolBookOneSmall(p$$16, q$$12) {\n  const bp = BigNatModule$$$bound(p$$16) | 0;\n  const rbound$$3 = bp + 1 | 0;\n  const r$$13 = BigNatModule$$$createN(rbound$$3);\n  const q$$13 = fromInteger(q$$12, false, 2);\n  let c$$9 = fromBits(0, 0, false);\n\n  for (let i$$28 = 0; i$$28 <= bp - 1; i$$28++) {\n    const rak$$2 = op_Addition(op_Addition(c$$9, BigNatModule$$$coeff64(r$$13, i$$28)), op_Multiply(BigNatModule$$$coeff64(p$$16, i$$28), q$$13));\n    BigNatModule$$$setCoeff(r$$13, i$$28, ~~toInt(op_BitwiseAnd(rak$$2, BigNatModule$$$baseMaski64)));\n    c$$9 = op_Division(rak$$2, BigNatModule$$$baseNi64);\n  }\n\n  BigNatModule$$$mulSchoolBookCarry(r$$13, c$$9, bp);\n  return BigNatModule$$$normN(r$$13);\n}\nexport function BigNatModule$$$mulSchoolBookNeitherSmall(p$$17, q$$14) {\n  const rbound$$4 = p$$17.bound + q$$14.bound | 0;\n  const r$$14 = BigNatModule$$$createN(rbound$$4);\n  const ra = r$$14.digits;\n  const pa$$3 = p$$17.digits;\n  const qa$$3 = q$$14.digits;\n\n  for (let i$$29 = 0; i$$29 <= p$$17.bound - 1; i$$29++) {\n    const pai$$1 = fromInteger(pa$$3[i$$29], false, 2);\n    let c$$10 = fromBits(0, 0, false);\n    let k$$5 = i$$29 | 0;\n\n    for (let j$$1 = 0; j$$1 <= q$$14.bound - 1; j$$1++) {\n      const qaj = fromInteger(qa$$3[j$$1], false, 2);\n      const rak$$3 = op_Addition(op_Addition(fromInteger(ra[k$$5], false, 2), c$$10), op_Multiply(pai$$1, qaj));\n      ra[k$$5] = ~~toInt(op_BitwiseAnd(rak$$3, BigNatModule$$$baseMaski64));\n      c$$10 = op_Division(rak$$3, BigNatModule$$$baseNi64);\n      k$$5 = k$$5 + 1;\n    }\n\n    BigNatModule$$$mulSchoolBookCarry(r$$14, c$$10, k$$5);\n  }\n\n  return BigNatModule$$$normN(r$$14);\n}\nexport function BigNatModule$$$mulSchoolBook(p$$18, q$$15) {\n  const pSmall = BigNatModule$$$bound(p$$18) === 1;\n  const qSmall = BigNatModule$$$bound(q$$15) === 1;\n\n  if (pSmall ? qSmall : false) {\n    return BigNatModule$$$mulSchoolBookBothSmall(BigNatModule$$$coeff(p$$18, 0), BigNatModule$$$coeff(q$$15, 0));\n  } else if (pSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(q$$15, BigNatModule$$$coeff(p$$18, 0));\n  } else if (qSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(p$$18, BigNatModule$$$coeff(q$$15, 0));\n  } else {\n    return BigNatModule$$$mulSchoolBookNeitherSmall(p$$18, q$$15);\n  }\n}\nexport const BigNatModule$002Eencoding = declare(function BigInt_BigNatModule_encoding(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n  this.bigL = arg1 | 0;\n  this.twoToBigL = arg2 | 0;\n  this.k = arg3 | 0;\n  this.bigK = arg4 | 0;\n  this.bigN = arg5 | 0;\n  this.split = arg6 | 0;\n  this.splits = arg7;\n}, Record);\nexport function BigNatModule$002Eencoding$reflection() {\n  return record(\"BigInt.BigNatModule.encoding\", [], BigNatModule$002Eencoding, () => [[\"bigL\", int32], [\"twoToBigL\", int32], [\"k\", int32], [\"bigK\", int32], [\"bigN\", int32], [\"split\", int32], [\"splits\", array(int32)]]);\n}\nexport function BigNatModule$$$mkEncoding(bigL, k$$6, bigK$$2, bigN) {\n  return new BigNatModule$002Eencoding(bigL, BigNatModule$$$pow32(2, bigL), k$$6, bigK$$2, bigN, ~~(BigNatModule$$$baseBits / bigL), initialize(~~(BigNatModule$$$baseBits / bigL), function (i$$30) {\n    return BigNatModule$$$pow32(2, bigL * i$$30);\n  }, Int32Array));\n}\nexport const BigNatModule$$$table = [BigNatModule$$$mkEncoding(1, 28, 268435456, 268435456), BigNatModule$$$mkEncoding(2, 26, 67108864, 134217728), BigNatModule$$$mkEncoding(3, 24, 16777216, 50331648), BigNatModule$$$mkEncoding(4, 22, 4194304, 16777216), BigNatModule$$$mkEncoding(5, 20, 1048576, 5242880), BigNatModule$$$mkEncoding(6, 18, 262144, 1572864), BigNatModule$$$mkEncoding(7, 16, 65536, 458752), BigNatModule$$$mkEncoding(8, 14, 16384, 131072), BigNatModule$$$mkEncoding(9, 12, 4096, 36864), BigNatModule$$$mkEncoding(10, 10, 1024, 10240), BigNatModule$$$mkEncoding(11, 8, 256, 2816), BigNatModule$$$mkEncoding(12, 6, 64, 768), BigNatModule$$$mkEncoding(13, 4, 16, 208)];\nexport function BigNatModule$$$calculateTableTow(bigL$$1) {\n  const k$$7 = BigNatModule$002EFFT$$$maxBitsInsideFp - 2 * bigL$$1 | 0;\n  const bigK$$3 = BigNatModule$$$pow64(fromBits(2, 0, false), k$$7);\n  const N = op_Multiply(bigK$$3, fromInteger(bigL$$1, false, 2));\n  return [bigL$$1, k$$7, bigK$$3, N];\n}\nexport function BigNatModule$$$encodingGivenResultBits(bitsRes) {\n  const selectFrom = function selectFrom(i$$31) {\n    selectFrom: while (true) {\n      if (i$$31 + 1 < BigNatModule$$$table.length ? bitsRes < BigNatModule$$$table[i$$31 + 1].bigN : false) {\n        const $i$$31$$44 = i$$31;\n        i$$31 = $i$$31$$44 + 1;\n        continue selectFrom;\n      } else {\n        return BigNatModule$$$table[i$$31];\n      }\n\n      break;\n    }\n  };\n\n  if (bitsRes >= BigNatModule$$$table[0].bigN) {\n    throw new Error(\"Product is huge, around 268435456 bits, beyond quickmul\");\n  } else {\n    return selectFrom(0);\n  }\n}\nexport const BigNatModule$$$bitmask = initialize(BigNatModule$$$baseBits, function (i$$32) {\n  return BigNatModule$$$pow32(2, i$$32) - 1;\n}, Int32Array);\nexport const BigNatModule$$$twopowers = initialize(BigNatModule$$$baseBits, function (i$$33) {\n  return BigNatModule$$$pow32(2, i$$33);\n}, Int32Array);\nexport const BigNatModule$$$twopowersI64 = initialize(BigNatModule$$$baseBits, function (i$$34) {\n  return BigNatModule$$$pow64(fromBits(2, 0, false), i$$34);\n}, Array);\nexport function BigNatModule$$$wordBits(word) {\n  const hi = function hi(k$$8) {\n    hi: while (true) {\n      if (k$$8 === 0) {\n        return 0;\n      } else if ((word & BigNatModule$$$twopowers[k$$8 - 1]) !== 0) {\n        return k$$8 | 0;\n      } else {\n        const $k$$8$$45 = k$$8;\n        k$$8 = $k$$8$$45 - 1;\n        continue hi;\n      }\n\n      break;\n    }\n  };\n\n  return hi(BigNatModule$$$baseBits) | 0;\n}\nexport function BigNatModule$$$bits(u$$6) {\n  if (u$$6.bound === 0) {\n    return 0;\n  } else {\n    return BigNatModule$$$degree(u$$6) * BigNatModule$$$baseBits + BigNatModule$$$wordBits(u$$6.digits[BigNatModule$$$degree(u$$6)]) | 0;\n  }\n}\nexport function BigNatModule$$$extractBits(n$$27, enc, bi) {\n  const bj = bi + enc.bigL - 1 | 0;\n  const biw = ~~(bi / BigNatModule$$$baseBits) | 0;\n  const bjw = ~~(bj / BigNatModule$$$baseBits) | 0;\n\n  if (biw !== bjw) {\n    const x$$47 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const y$$17 = (bjw < n$$27.bound ? n$$27.digits[bjw] : 0) | 0;\n    const xbit = bi % BigNatModule$$$baseBits | 0;\n    const nxbits = BigNatModule$$$baseBits - xbit | 0;\n    const x$$48 = x$$47 >> xbit | 0;\n    const y$$18 = y$$17 << nxbits | 0;\n    const x$$49 = x$$48 | y$$18 | 0;\n    const x$$50 = x$$49 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$50 | 0;\n  } else {\n    const x$$51 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const xbit$$1 = bi % BigNatModule$$$baseBits | 0;\n    const x$$52 = x$$51 >> xbit$$1 | 0;\n    const x$$53 = x$$52 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$53 | 0;\n  }\n}\nexport function BigNatModule$$$encodePoly(enc$$1, n$$28) {\n  const poly = fill(new Uint32Array(enc$$1.bigK), 0, enc$$1.bigK, BigNatModule$002EFFT$002EFp$$$ofInt32(0));\n  const biMax = n$$28.bound * BigNatModule$$$baseBits | 0;\n\n  const encoder = function encoder(i$$38, bi$$1) {\n    encoder: while (true) {\n      if (i$$38 === enc$$1.bigK ? true : bi$$1 > biMax) {} else {\n        const pi = BigNatModule$$$extractBits(n$$28, enc$$1, bi$$1) | 0;\n        poly[i$$38] = BigNatModule$002EFFT$002EFp$$$ofInt32(pi);\n        const i$$39 = i$$38 + 1 | 0;\n        const bi$$2 = bi$$1 + enc$$1.bigL | 0;\n        i$$38 = i$$39;\n        bi$$1 = bi$$2;\n        continue encoder;\n      }\n\n      break;\n    }\n  };\n\n  encoder(0, 0);\n  return poly;\n}\nexport function BigNatModule$$$decodeResultBits(enc$$2, poly$$1) {\n  let n$$29 = 0;\n\n  for (let i$$40 = 0; i$$40 <= poly$$1.length - 1; i$$40++) {\n    if (poly$$1[i$$40] !== BigNatModule$002EFFT$$$mzero) {\n      n$$29 = i$$40;\n    }\n  }\n\n  const rbits = BigNatModule$002EFFT$$$maxBitsInsideFp + enc$$2.bigL * n$$29 + 1 | 0;\n  return rbits + 1 | 0;\n}\nexport function BigNatModule$$$decodePoly(enc$$3, poly$$2) {\n  const rbound$$5 = ~~(BigNatModule$$$decodeResultBits(enc$$3, poly$$2) / BigNatModule$$$baseBits) + 1 | 0;\n  const r$$15 = BigNatModule$$$createN(rbound$$5);\n\n  const evaluate = function evaluate(i$$41, j$$2, d$$3) {\n    evaluate: while (true) {\n      if (i$$41 === enc$$3.bigK) {} else {\n        if (j$$2 >= rbound$$5) {} else {\n          const x$$54 = op_Multiply(fromInteger(BigNatModule$002EFFT$002EFp$$$toInt(poly$$2[i$$41]), false, 2), BigNatModule$$$twopowersI64[d$$3]);\n          BigNatModule$$$contributeArr(r$$15.digits, j$$2, x$$54);\n        }\n\n        const i$$43 = i$$41 + 1 | 0;\n        const d$$4 = d$$3 + enc$$3.bigL | 0;\n        const patternInput$$1 = d$$4 >= BigNatModule$$$baseBits ? [j$$2 + 1, d$$4 - BigNatModule$$$baseBits] : [j$$2, d$$4];\n        i$$41 = i$$43;\n        j$$2 = patternInput$$1[0];\n        d$$3 = patternInput$$1[1];\n        continue evaluate;\n      }\n\n      break;\n    }\n  };\n\n  evaluate(0, 0, 0);\n  return BigNatModule$$$normN(r$$15);\n}\nexport function BigNatModule$$$quickMulUsingFft(u$$7, v$$5) {\n  const bitsRes$$1 = BigNatModule$$$bits(u$$7) + BigNatModule$$$bits(v$$5) | 0;\n  const enc$$4 = BigNatModule$$$encodingGivenResultBits(bitsRes$$1);\n  const upoly = BigNatModule$$$encodePoly(enc$$4, u$$7);\n  const vpoly = BigNatModule$$$encodePoly(enc$$4, v$$5);\n  const rpoly = BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(enc$$4.bigK, enc$$4.k, upoly, vpoly);\n  const r$$17 = BigNatModule$$$decodePoly(enc$$4, rpoly);\n  return BigNatModule$$$normN(r$$17);\n}\nexport const BigNatModule$$$minDigitsKaratsuba = 16;\nexport function BigNatModule$$$recMulKaratsuba(mul, p$$19, q$$16) {\n  const bp$$1 = p$$19.bound | 0;\n  const bq = q$$16.bound | 0;\n  const bmax = BigNatModule$$$maxInt(bp$$1, bq) | 0;\n\n  if (bmax > BigNatModule$$$minDigitsKaratsuba) {\n    const k$$9 = ~~(bmax / 2) | 0;\n    const a0 = BigNatModule$$$restrictTo(k$$9, p$$19);\n    const a1 = BigNatModule$$$shiftDown(k$$9, p$$19);\n    const b0 = BigNatModule$$$restrictTo(k$$9, q$$16);\n    const b1 = BigNatModule$$$shiftDown(k$$9, q$$16);\n    const q0 = mul(a0, b0);\n    const q1 = mul(BigNatModule$$$add(a0, a1), BigNatModule$$$add(b0, b1));\n    const q2 = mul(a1, b1);\n    const p0 = q0;\n    const p1 = BigNatModule$$$sub(q1, BigNatModule$$$add(q0, q2));\n    const p2 = q2;\n    const r$$18 = BigNatModule$$$add(p0, BigNatModule$$$shiftUp(k$$9, BigNatModule$$$add(p1, BigNatModule$$$shiftUp(k$$9, p2))));\n    return r$$18;\n  } else {\n    return BigNatModule$$$mulSchoolBook(p$$19, q$$16);\n  }\n}\nexport function BigNatModule$$$mulKaratsuba(x$$55, y$$19) {\n  return BigNatModule$$$recMulKaratsuba(BigNatModule$$$mulKaratsuba, x$$55, y$$19);\n}\nexport const BigNatModule$$$productDigitsUpperSchoolBook = ~~(64000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$singleDigitForceSchoolBook = ~~(32000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$productDigitsUpperFft = ~~(BigNatModule$$$table[0].bigN / BigNatModule$$$baseBits);\nexport function BigNatModule$$$mul(p$$20, q$$17) {\n  return BigNatModule$$$mulSchoolBook(p$$20, q$$17);\n}\nexport function BigNatModule$$$scaleSubInPlace(x$$57, f, a$$5, n$$30) {\n  const invariant = function invariant(tupledArg) {};\n\n  const xres = x$$57;\n  const patternInput$$2 = [x$$57.digits, BigNatModule$$$degree(x$$57)];\n  const patternInput$$3 = [a$$5.digits, BigNatModule$$$degree(a$$5)];\n  const f$$1 = fromInteger(f, false, 2);\n  let j$$4 = 0;\n  let z$$7 = op_Multiply(f$$1, fromInteger(patternInput$$3[0][0], false, 2));\n\n  while (compare(z$$7, fromBits(0, 0, false)) > 0 ? true : j$$4 < patternInput$$3[1]) {\n    if (j$$4 > patternInput$$2[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    invariant([z$$7, j$$4, n$$30]);\n    let zLo = ~~toInt(op_BitwiseAnd(z$$7, BigNatModule$$$baseMaski64)) | 0;\n    let zHi = op_Division(z$$7, BigNatModule$$$baseNi64);\n\n    if (zLo <= patternInput$$2[0][j$$4 + n$$30]) {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] - zLo;\n    } else {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] + (BigNatModule$$$baseN - zLo);\n      zHi = op_Addition(zHi, fromBits(1, 0, false));\n    }\n\n    if (j$$4 < patternInput$$3[1]) {\n      z$$7 = op_Addition(zHi, op_Multiply(f$$1, fromInteger(patternInput$$3[0][j$$4 + 1], false, 2)));\n    } else {\n      z$$7 = zHi;\n    }\n\n    j$$4 = j$$4 + 1;\n  }\n\n  BigNatModule$$$normN(xres);\n}\nexport function BigNatModule$$$scaleSub(x$$61, f$$2, a$$7, n$$31) {\n  const freshx = BigNatModule$$$add(x$$61, BigNatModule$$$zero);\n  BigNatModule$$$scaleSubInPlace(freshx, f$$2, a$$7, n$$31);\n  return BigNatModule$$$normN(freshx);\n}\nexport function BigNatModule$$$scaleAddInPlace(x$$62, f$$3, a$$8, n$$32) {\n  const invariant$$1 = function invariant$$1(tupledArg$$1) {};\n\n  const xres$$1 = x$$62;\n  const patternInput$$4 = [x$$62.digits, BigNatModule$$$degree(x$$62)];\n  const patternInput$$5 = [a$$8.digits, BigNatModule$$$degree(a$$8)];\n  const f$$4 = fromInteger(f$$3, false, 2);\n  let j$$5 = 0;\n  let z$$8 = op_Multiply(f$$4, fromInteger(patternInput$$5[0][0], false, 2));\n\n  while (compare(z$$8, fromBits(0, 0, false)) > 0 ? true : j$$5 < patternInput$$5[1]) {\n    if (j$$5 > patternInput$$4[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    invariant$$1([z$$8, j$$5, n$$32]);\n    let zLo$$1 = ~~toInt(op_BitwiseAnd(z$$8, BigNatModule$$$baseMaski64)) | 0;\n    let zHi$$1 = op_Division(z$$8, BigNatModule$$$baseNi64);\n\n    if (zLo$$1 < BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]) {\n      patternInput$$4[0][j$$5 + n$$32] = patternInput$$4[0][j$$5 + n$$32] + zLo$$1;\n    } else {\n      patternInput$$4[0][j$$5 + n$$32] = zLo$$1 - (BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]);\n      zHi$$1 = op_Addition(zHi$$1, fromBits(1, 0, false));\n    }\n\n    if (j$$5 < patternInput$$5[1]) {\n      z$$8 = op_Addition(zHi$$1, op_Multiply(f$$4, fromInteger(patternInput$$5[0][j$$5 + 1], false, 2)));\n    } else {\n      z$$8 = zHi$$1;\n    }\n\n    j$$5 = j$$5 + 1;\n  }\n\n  BigNatModule$$$normN(xres$$1);\n}\nexport function BigNatModule$$$scaleAdd(x$$66, f$$5, a$$10, n$$33) {\n  const freshx$$1 = BigNatModule$$$add(x$$66, BigNatModule$$$zero);\n  BigNatModule$$$scaleAddInPlace(freshx$$1, f$$5, a$$10, n$$33);\n  return BigNatModule$$$normN(freshx$$1);\n}\nexport function BigNatModule$$$removeFactor(x$$67, a$$11, n$$34) {\n  const patternInput$$6 = [BigNatModule$$$degree(a$$11), BigNatModule$$$degree(x$$67)];\n\n  if (patternInput$$6[1] < patternInput$$6[0] + n$$34) {\n    return 0;\n  } else {\n    const patternInput$$7 = [a$$11.digits, x$$67.digits];\n    let f$$6;\n\n    if (patternInput$$6[0] === 0) {\n      if (patternInput$$6[1] === n$$34) {\n        f$$6 = ~~(patternInput$$7[1][n$$34] / patternInput$$7[0][0]);\n      } else {\n        const f64 = op_Division(op_Addition(op_Multiply(fromInteger(patternInput$$7[1][patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(patternInput$$7[1][patternInput$$6[1] - 1], false, 2)), fromInteger(patternInput$$7[0][0], false, 2));\n        f$$6 = ~~toInt(f64);\n      }\n    } else if (patternInput$$6[1] === patternInput$$6[0] + n$$34) {\n      f$$6 = ~~(patternInput$$7[1][patternInput$$6[1]] / (patternInput$$7[0][patternInput$$6[0]] + 1));\n    } else {\n      const f64$$1 = op_Division(op_Addition(op_Multiply(fromInteger(patternInput$$7[1][patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(patternInput$$7[1][patternInput$$6[1] - 1], false, 2)), op_Addition(fromInteger(patternInput$$7[0][patternInput$$6[0]], false, 2), fromBits(1, 0, false)));\n      f$$6 = ~~toInt(f64$$1);\n    }\n\n    if (f$$6 === 0) {\n      const lte = BigNatModule$$$shiftCompare(a$$11, n$$34, x$$67, 0) !== 1;\n\n      if (lte) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else {\n      return f$$6 | 0;\n    }\n  }\n}\nexport function BigNatModule$$$divmod(b$$7, a$$12) {\n  if (BigNatModule$$$isZero(a$$12)) {\n    throw new Error();\n  } else if (BigNatModule$$$degree(b$$7) < BigNatModule$$$degree(a$$12)) {\n    return [BigNatModule$$$zero, b$$7];\n  } else {\n    const x$$68 = BigNatModule$$$copyN(b$$7);\n    const d$$6 = BigNatModule$$$createN(BigNatModule$$$degree(b$$7) - BigNatModule$$$degree(a$$12) + 1 + 1);\n    let p$$21 = BigNatModule$$$degree(b$$7) | 0;\n    const m$$2 = BigNatModule$$$degree(a$$12) | 0;\n    let n$$35 = p$$21 - m$$2 | 0;\n\n    const Invariant = function Invariant(tupledArg$$2) {};\n\n    let finished = false;\n\n    while (!finished) {\n      Invariant([d$$6, x$$68, n$$35, p$$21]);\n      const f$$7 = BigNatModule$$$removeFactor(x$$68, a$$12, n$$35) | 0;\n\n      if (f$$7 > 0) {\n        BigNatModule$$$scaleSubInPlace(x$$68, f$$7, a$$12, n$$35);\n        BigNatModule$$$scaleAddInPlace(d$$6, f$$7, BigNatModule$$$one, n$$35);\n        Invariant([d$$6, x$$68, n$$35, p$$21]);\n      } else {\n        finished = f$$7 === 0 ? n$$35 === 0 : false;\n\n        if (!finished) {\n          if (p$$21 === m$$2 + n$$35) {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21]);\n            n$$35 = n$$35 - 1;\n          } else {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21 - 1]);\n            n$$35 = n$$35 - 1;\n            p$$21 = p$$21 - 1;\n          }\n        }\n      }\n    }\n\n    return [BigNatModule$$$normN(d$$6), BigNatModule$$$normN(x$$68)];\n  }\n}\nexport function BigNatModule$$$div(b$$8, a$$13) {\n  return BigNatModule$$$divmod(b$$8, a$$13)[0];\n}\nexport function BigNatModule$$$rem(b$$9, a$$14) {\n  return BigNatModule$$$divmod(b$$9, a$$14)[1];\n}\nexport function BigNatModule$$$bitAnd(a$$15, b$$10) {\n  const rbound$$6 = BigNatModule$$$minInt(a$$15.bound, b$$10.bound) | 0;\n  const r$$19 = BigNatModule$$$createN(rbound$$6);\n\n  for (let i$$44 = 0; i$$44 <= r$$19.bound - 1; i$$44++) {\n    r$$19.digits[i$$44] = a$$15.digits[i$$44] & b$$10.digits[i$$44];\n  }\n\n  return BigNatModule$$$normN(r$$19);\n}\nexport function BigNatModule$$$bitOr(a$$16, b$$11) {\n  const rbound$$7 = BigNatModule$$$maxInt(a$$16.bound, b$$11.bound) | 0;\n  const r$$20 = BigNatModule$$$createN(rbound$$7);\n\n  for (let i$$45 = 0; i$$45 <= a$$16.bound - 1; i$$45++) {\n    r$$20.digits[i$$45] = r$$20.digits[i$$45] | a$$16.digits[i$$45];\n  }\n\n  for (let i$$46 = 0; i$$46 <= b$$11.bound - 1; i$$46++) {\n    r$$20.digits[i$$46] = r$$20.digits[i$$46] | b$$11.digits[i$$46];\n  }\n\n  return BigNatModule$$$normN(r$$20);\n}\nexport function BigNatModule$$$hcf(a$$17, b$$12) {\n  const hcfloop = function hcfloop(a$$18, b$$13) {\n    hcfloop: while (true) {\n      if (BigNatModule$$$equal(BigNatModule$$$zero, a$$18)) {\n        return b$$13;\n      } else {\n        const patternInput$$8 = BigNatModule$$$divmod(b$$13, a$$18);\n        const $a$$18$$49 = a$$18;\n        a$$18 = patternInput$$8[1];\n        b$$13 = $a$$18$$49;\n        continue hcfloop;\n      }\n\n      break;\n    }\n  };\n\n  if (BigNatModule$$$lt(a$$17, b$$12)) {\n    return hcfloop(a$$17, b$$12);\n  } else {\n    return hcfloop(b$$12, a$$17);\n  }\n}\nexport const BigNatModule$$$two = BigNatModule$$$embed(2);\nexport function BigNatModule$$$powi(x$$69, n$$36) {\n  const power = function power(acc$$2, x$$70, n$$37) {\n    power: while (true) {\n      if (n$$37 === 0) {\n        return acc$$2;\n      } else if (n$$37 % 2 === 0) {\n        const $acc$$2$$50 = acc$$2;\n        const $n$$37$$52 = n$$37;\n        const $x$$70$$51 = x$$70;\n        acc$$2 = $acc$$2$$50;\n        x$$70 = BigNatModule$$$mul($x$$70$$51, $x$$70$$51);\n        n$$37 = ~~($n$$37$$52 / 2);\n        continue power;\n      } else {\n        const $acc$$2$$53 = acc$$2;\n        const $n$$37$$55 = n$$37;\n        const $x$$70$$54 = x$$70;\n        acc$$2 = BigNatModule$$$mul($x$$70$$54, $acc$$2$$53);\n        x$$70 = BigNatModule$$$mul($x$$70$$54, $x$$70$$54);\n        n$$37 = ~~($n$$37$$55 / 2);\n        continue power;\n      }\n\n      break;\n    }\n  };\n\n  return power(BigNatModule$$$one, x$$69, n$$36);\n}\nexport function BigNatModule$$$pow(x$$71, n$$38) {\n  const power$$1 = function power$$1(acc$$3, x$$72, n$$39) {\n    power$$1: while (true) {\n      if (BigNatModule$$$isZero(n$$39)) {\n        return acc$$3;\n      } else {\n        const patternInput$$9 = BigNatModule$$$divmod(n$$39, BigNatModule$$$two);\n\n        if (BigNatModule$$$isZero(patternInput$$9[1])) {\n          const $acc$$3$$56 = acc$$3;\n          const $x$$72$$57 = x$$72;\n          acc$$3 = $acc$$3$$56;\n          x$$72 = BigNatModule$$$mul($x$$72$$57, $x$$72$$57);\n          n$$39 = patternInput$$9[0];\n          continue power$$1;\n        } else {\n          const $acc$$3$$58 = acc$$3;\n          const $x$$72$$59 = x$$72;\n          acc$$3 = BigNatModule$$$mul($x$$72$$59, $acc$$3$$58);\n          x$$72 = BigNatModule$$$mul($x$$72$$59, $x$$72$$59);\n          n$$39 = patternInput$$9[0];\n          continue power$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return power$$1(BigNatModule$$$one, x$$71, n$$38);\n}\nexport function BigNatModule$$$toFloat(n$$40) {\n  const basef = BigNatModule$$$baseN;\n\n  const evalFloat = function evalFloat(acc$$4, k$$10, i$$47) {\n    evalFloat: while (true) {\n      if (i$$47 === n$$40.bound) {\n        return acc$$4;\n      } else {\n        const $acc$$4$$60 = acc$$4;\n        const $i$$47$$62 = i$$47;\n        const $k$$10$$61 = k$$10;\n        acc$$4 = $acc$$4$$60 + $k$$10$$61 * n$$40.digits[$i$$47$$62];\n        k$$10 = $k$$10$$61 * basef;\n        i$$47 = $i$$47$$62 + 1;\n        continue evalFloat;\n      }\n\n      break;\n    }\n  };\n\n  return evalFloat(0, 1, 0);\n}\nexport function BigNatModule$$$ofInt32(n$$41) {\n  return BigNatModule$$$embed(n$$41);\n}\nexport function BigNatModule$$$ofInt64(n$$42) {\n  return BigNatModule$$$embed64(n$$42);\n}\nexport function BigNatModule$$$toUInt32(n$$43) {\n  const matchValue = n$$43.bound | 0;\n\n  switch (matchValue) {\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        return n$$43.digits[0] >>> 0;\n      }\n\n    case 2:\n      {\n        const patternInput$$10 = [n$$43.digits[0], n$$43.digits[1]];\n\n        if (patternInput$$10[1] > BigNatModule$$$baseMask32B) {\n          throw new Error();\n        }\n\n        return ((patternInput$$10[0] & BigNatModule$$$baseMask32A) >>> 0) + ((patternInput$$10[1] & BigNatModule$$$baseMask32B) >>> 0 << BigNatModule$$$baseShift32B >>> 0);\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toUInt64(n$$44) {\n  const matchValue$$1 = n$$44.bound | 0;\n\n  switch (matchValue$$1) {\n    case 0:\n      {\n        return fromBits(0, 0, true);\n      }\n\n    case 1:\n      {\n        return fromInteger(n$$44.digits[0], true, 2);\n      }\n\n    case 2:\n      {\n        const patternInput$$11 = [n$$44.digits[0], n$$44.digits[1]];\n        return op_Addition(fromInteger(patternInput$$11[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$11[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B));\n      }\n\n    case 3:\n      {\n        const patternInput$$12 = [n$$44.digits[0], n$$44.digits[1], n$$44.digits[2]];\n\n        if (patternInput$$12[2] > BigNatModule$$$baseMask64C) {\n          throw new Error();\n        }\n\n        return op_Addition(op_Addition(fromInteger(patternInput$$12[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$12[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B)), op_LeftShift(fromInteger(patternInput$$12[2] & BigNatModule$$$baseMask64C, true, 2), BigNatModule$$$baseShift64C));\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toString(n$$45) {\n  const degn = BigNatModule$$$degree(n$$45) | 0;\n\n  const route = function route(prior, k$$11, ten2k) {\n    route: while (true) {\n      if (BigNatModule$$$degree(ten2k) > degn) {\n        return new List([k$$11, ten2k], prior);\n      } else {\n        const $k$$11$$64 = k$$11;\n        const $prior$$63 = prior;\n        const $ten2k$$65 = ten2k;\n        prior = new List([$k$$11$$64, $ten2k$$65], $prior$$63);\n        k$$11 = $k$$11$$64 + 1;\n        ten2k = BigNatModule$$$mul($ten2k$$65, $ten2k$$65);\n        continue route;\n      }\n\n      break;\n    }\n  };\n\n  const kten2ks = route(new List(), 0, BigNatModule$$$embed(10));\n\n  const collect = function collect(isLeading, digits, n$$46, _arg1$$3) {\n    if (_arg1$$3.tail != null) {\n      const ten2k$$1 = _arg1$$3.head[1];\n      const prior$$1 = _arg1$$3.tail;\n      const patternInput$$13 = BigNatModule$$$divmod(n$$46, ten2k$$1);\n\n      if (isLeading ? BigNatModule$$$isZero(patternInput$$13[0]) : false) {\n        const digits$$1 = collect(isLeading, digits, patternInput$$13[1], prior$$1);\n        return digits$$1;\n      } else {\n        const digits$$2 = collect(false, digits, patternInput$$13[1], prior$$1);\n        const digits$$3 = collect(isLeading, digits$$2, patternInput$$13[0], prior$$1);\n        return digits$$3;\n      }\n    } else {\n      const n$$47 = BigNatModule$$$eval32(n$$46) | 0;\n\n      if (isLeading ? n$$47 === 0 : false) {\n        return digits;\n      } else {\n        return new List(int32ToString(n$$47), digits);\n      }\n    }\n  };\n\n  const prior$$2 = kten2ks;\n  const digits$$4 = collect(true, new List(), n$$45, prior$$2);\n\n  if (digits$$4.tail == null) {\n    return \"0\";\n  } else {\n    return join(\"\", ...ofList(digits$$4, Array));\n  }\n}\nexport function BigNatModule$$$ofString(str) {\n  const len = str.length | 0;\n\n  if (isNullOrEmpty(str)) {\n    throw new Error(\"empty string\\\\nParameter name: str\");\n  }\n\n  const ten = BigNatModule$$$embed(10);\n\n  const build = function build(acc$$5, i$$48) {\n    build: while (true) {\n      if (i$$48 === len) {\n        return acc$$5;\n      } else {\n        const c$$12 = str[i$$48];\n        const d$$7 = c$$12.charCodeAt(0) - \"0\".charCodeAt(0) | 0;\n\n        if (0 <= d$$7 ? d$$7 <= 9 : false) {\n          const $acc$$5$$66 = acc$$5;\n          const $i$$48$$67 = i$$48;\n          acc$$5 = BigNatModule$$$add(BigNatModule$$$mul(ten, $acc$$5$$66), BigNatModule$$$embed(d$$7));\n          i$$48 = $i$$48$$67 + 1;\n          continue build;\n        } else {\n          throw new Error();\n        }\n      }\n\n      break;\n    }\n  };\n\n  return build(BigNatModule$$$embed(0), 0);\n}\nexport function BigNatModule$$$isSmall(n$$48) {\n  return n$$48.bound <= 1;\n}\nexport function BigNatModule$$$getSmall(n$$49) {\n  if (0 < n$$49.bound) {\n    return n$$49.digits[0] | 0;\n  } else {\n    return 0;\n  }\n}\nexport function BigNatModule$$$factorial(n$$50) {\n  const productR = function productR(a$$19, b$$14) {\n    if (BigNatModule$$$equal(a$$19, b$$14)) {\n      return a$$19;\n    } else {\n      const m$$3 = BigNatModule$$$div(BigNatModule$$$add(a$$19, b$$14), BigNatModule$$$ofInt32(2));\n      return BigNatModule$$$mul(productR(a$$19, m$$3), productR(BigNatModule$$$add(m$$3, BigNatModule$$$one), b$$14));\n    }\n  };\n\n  return productR(BigNatModule$$$one, n$$50);\n}","import { declare, Record } from \"../Types\";\nimport { type } from \"../Reflection\";\nimport { BigNatModule$$$factorial as BigNatModule$0024$0024$0024factorial, BigNatModule$$$ofString as BigNatModule$0024$0024$0024ofString, BigNatModule$$$toFloat as BigNatModule$0024$0024$0024toFloat, BigNatModule$$$toUInt64 as BigNatModule$0024$0024$0024toUInt64, BigNatModule$$$toUInt32 as BigNatModule$0024$0024$0024toUInt32, BigNatModule$$$pow as BigNatModule$0024$0024$0024pow, BigNatModule$$$rem as BigNatModule$0024$0024$0024rem, BigNatModule$$$two as BigNatModule$0024$0024$0024two, BigNatModule$$$lte as BigNatModule$0024$0024$0024lte, BigNatModule$$$hcf as BigNatModule$0024$0024$0024hcf, BigNatModule$$$bitOr as BigNatModule$0024$0024$0024bitOr, BigNatModule$$$bitAnd as BigNatModule$0024$0024$0024bitAnd, BigNatModule$$$divmod as BigNatModule$0024$0024$0024divmod, BigNatModule$$$mul as BigNatModule$0024$0024$0024mul, BigNatModule$$$isOne as BigNatModule$0024$0024$0024isOne, BigNatModule$$$sub as BigNatModule$0024$0024$0024sub, BigNatModule$$$gte as BigNatModule$0024$0024$0024gte, BigNatModule$$$scale as BigNatModule$0024$0024$0024scale, BigNatModule$$$add as BigNatModule$0024$0024$0024add, BigNatModule$$$one as BigNatModule$0024$0024$0024one, BigNatModule$$$ofInt64 as BigNatModule$0024$0024$0024ofInt64, BigNatModule$$$toString as BigNatModule$0024$0024$0024toString, BigNatModule$$$hash as BigNatModule$0024$0024$0024hash, BigNatModule$$$gt as BigNatModule$0024$0024$0024gt, BigNatModule$$$lt as BigNatModule$0024$0024$0024lt, BigNatModule$$$isZero as BigNatModule$0024$0024$0024isZero, BigNatModule$$$equal as BigNatModule$0024$0024$0024equal, BigNatModule$$$getSmall as BigNatModule$0024$0024$0024getSmall, BigNatModule$$$isSmall as BigNatModule$0024$0024$0024isSmall, BigNatModule$$$ofInt32 as BigNatModule$0024$0024$0024ofInt32 } from \"./n\";\nimport { initialize } from \"../Array\";\nimport { op_Addition, op_Multiply, fromValue, equals, compare, fromBits, op_UnaryNegation, fromInteger } from \"../Long\";\nimport Decimal from \"../Decimal\";\nexport const BigInteger = declare(function BigInt_BigInteger(signInt, v) {\n  const $this$$1 = this;\n  $this$$1.signInt = signInt;\n  $this$$1.v = v;\n}, Record);\nexport function BigInteger$reflection() {\n  return type(\"BigInt.BigInteger\");\n}\nexport function BigInteger$$$$002Ector$$Z2BE94A1(signInt, v) {\n  return this != null ? BigInteger.call(this, signInt, v) : new BigInteger(signInt, v);\n}\n\n(function BigInteger$$$$002Ecctor() {\n  BigInteger.smallLim = 4096;\n  BigInteger.smallPosTab = initialize(BigInteger.smallLim, BigNatModule$0024$0024$0024ofInt32, Array);\n  BigInteger.one = BigInteger$$$$002Ector$$Z524259A4(1);\n  BigInteger.two = BigInteger$$$$002Ector$$Z524259A4(2);\n  BigInteger.zero = BigInteger$$$$002Ector$$Z524259A4(0);\n})();\n\nexport function BigInteger$$$nat$$Z67CCE57D(n$$1) {\n  if (BigNatModule$0024$0024$0024isSmall(n$$1) ? BigNatModule$0024$0024$0024getSmall(n$$1) < BigInteger.smallLim : false) {\n    return BigInteger.smallPosTab[BigNatModule$0024$0024$0024getSmall(n$$1)];\n  } else {\n    return n$$1;\n  }\n}\nexport function BigInteger$$$create$$Z2BE94A1(s, n$$2) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(s, BigInteger$$$nat$$Z67CCE57D(n$$2));\n}\nexport function BigInteger$$$posn$$Z67CCE57D(n$$3) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(1, BigInteger$$$nat$$Z67CCE57D(n$$3));\n}\nexport function BigInteger$$$negn$$Z67CCE57D(n$$4) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(-1, BigInteger$$$nat$$Z67CCE57D(n$$4));\n}\nexport function BigInteger$$get_Sign(x) {\n  if (BigInteger$$get_IsZero(x)) {\n    return 0;\n  } else {\n    return x.signInt | 0;\n  }\n}\nexport function BigInteger$$get_SignInt(x$$1) {\n  return x$$1.signInt;\n}\nexport function BigInteger$$get_V(x$$2) {\n  return x$$2.v;\n}\nexport function BigInteger$$$op_Equality$$56F059C0(x$$3, y) {\n  const matchValue = [BigInteger$$get_SignInt(x$$3), BigInteger$$get_SignInt(y)];\n  var $target$$2;\n\n  if (matchValue[0] === -1) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 1;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 8;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 3;\n    } else {\n      $target$$2 = 9;\n    }\n  } else if (matchValue[0] === 0) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 6;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 4;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 5;\n    } else {\n      $target$$2 = 9;\n    }\n  } else if (matchValue[0] === 1) {\n    if (matchValue[1] === -1) {\n      $target$$2 = 2;\n    } else if (matchValue[1] === 0) {\n      $target$$2 = 7;\n    } else if (matchValue[1] === 1) {\n      $target$$2 = 0;\n    } else {\n      $target$$2 = 9;\n    }\n  } else {\n    $target$$2 = 9;\n  }\n\n  switch ($target$$2) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_Inequality$$56F059C0(x$$4, y$$1) {\n  return !BigInteger$$$op_Equality$$56F059C0(x$$4, y$$1);\n}\nexport function BigInteger$$$op_LessThan$$56F059C0(x$$5, y$$2) {\n  const matchValue$$1 = [BigInteger$$get_SignInt(x$$5), BigInteger$$get_SignInt(y$$2)];\n  var $target$$3;\n\n  if (matchValue$$1[0] === -1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 1;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 8;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 3;\n    } else {\n      $target$$3 = 9;\n    }\n  } else if (matchValue$$1[0] === 0) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 6;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 4;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 5;\n    } else {\n      $target$$3 = 9;\n    }\n  } else if (matchValue$$1[0] === 1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$3 = 2;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$3 = 7;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$3 = 0;\n    } else {\n      $target$$3 = 9;\n    }\n  } else {\n    $target$$3 = 9;\n  }\n\n  switch ($target$$3) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(x$$5), BigInteger$$get_V(y$$2));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(y$$2), BigInteger$$get_V(x$$5));\n      }\n\n    case 2:\n      {\n        return false;\n      }\n\n    case 3:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n        }\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n      }\n\n    case 6:\n      {\n        return false;\n      }\n\n    case 7:\n      {\n        return false;\n      }\n\n    case 8:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThan$$56F059C0(x$$6, y$$3) {\n  const matchValue$$2 = [BigInteger$$get_SignInt(x$$6), BigInteger$$get_SignInt(y$$3)];\n  var $target$$4;\n\n  if (matchValue$$2[0] === -1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 1;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 8;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 3;\n    } else {\n      $target$$4 = 9;\n    }\n  } else if (matchValue$$2[0] === 0) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 6;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 4;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 5;\n    } else {\n      $target$$4 = 9;\n    }\n  } else if (matchValue$$2[0] === 1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$4 = 2;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$4 = 7;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$4 = 0;\n    } else {\n      $target$$4 = 9;\n    }\n  } else {\n    $target$$4 = 9;\n  }\n\n  switch ($target$$4) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(x$$6), BigInteger$$get_V(y$$3));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(y$$3), BigInteger$$get_V(x$$6));\n      }\n\n    case 2:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n        }\n      }\n\n    case 3:\n      {\n        return false;\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return false;\n      }\n\n    case 6:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n      }\n\n    case 7:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6));\n      }\n\n    case 8:\n      {\n        return false;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$compare$$56F059C0(n$$5, nn) {\n  if (BigInteger$$$op_LessThan$$56F059C0(n$$5, nn)) {\n    return -1 | 0;\n  } else if (BigInteger$$$op_Equality$$56F059C0(n$$5, nn)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\nexport function BigInteger$$$hash$$Z665282C2(z) {\n  if (BigInteger$$get_SignInt(z) === 0) {\n    return 1;\n  } else {\n    return BigInteger$$get_SignInt(z) + BigNatModule$0024$0024$0024hash(BigInteger$$get_V(z)) | 0;\n  }\n}\n\nBigInteger.prototype.toString = function () {\n  const x$$7 = this;\n  const matchValue$$3 = BigInteger$$get_SignInt(x$$7) | 0;\n\n  switch (matchValue$$3) {\n    case -1:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$7)) ? \"0\" : \"-\" + BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    case 0:\n      {\n        return \"0\";\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\");\n      }\n  }\n};\n\nexport function BigInteger$$get_StructuredDisplayString(x$$8) {\n  return String(x$$8);\n}\n\nBigInteger.prototype.Equals = function (obj) {\n  const this$ = this;\n\n  if (obj instanceof BigInteger) {\n    const that = obj;\n    return BigInteger$$$op_Equality$$56F059C0(this$, that);\n  } else {\n    return false;\n  }\n};\n\nBigInteger.prototype.GetHashCode = function () {\n  const x$$9 = this;\n  return BigInteger$$$hash$$Z665282C2(x$$9) | 0;\n};\n\nexport function BigInteger$$$$002Ector$$Z524259A4(n$$6) {\n  if (n$$6 >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(n$$6)));\n  } else if (n$$6 === -2147483648) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(fromInteger(n$$6, false, 2)))));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(-n$$6)));\n  }\n}\nexport function BigInteger$$$$002Ector$$Z524259C1(n$$7) {\n  if (compare(n$$7, fromBits(0, 0, false)) >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(n$$7)));\n  } else if (equals(n$$7, fromBits(0, 2147483648, false))) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024add(BigNatModule$0024$0024$0024ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule$0024$0024$0024one)));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(n$$7))));\n  }\n}\nexport function BigInteger$$$get_One() {\n  return BigInteger.one;\n}\nexport function BigInteger$$$get_Two() {\n  return BigInteger.two;\n}\nexport function BigInteger$$$get_Zero() {\n  return BigInteger.zero;\n}\nexport function BigInteger$$$op_UnaryNegation$$Z665282C2(z$$1) {\n  const matchValue$$4 = BigInteger$$get_SignInt(z$$1) | 0;\n\n  if (matchValue$$4 === 0) {\n    return BigInteger$$$get_Zero();\n  } else {\n    const i = matchValue$$4 | 0;\n    return BigInteger$$$create$$Z2BE94A1(-i, BigInteger$$get_V(z$$1));\n  }\n}\nexport function BigInteger$$$Scale$$Z320F31E(k, z$$2) {\n  if (BigInteger$$get_SignInt(z$$2) === 0) {\n    return BigInteger$$$get_Zero();\n  } else if (k < 0) {\n    return BigInteger$$$create$$Z2BE94A1(-BigInteger$$get_SignInt(z$$2), BigNatModule$0024$0024$0024scale(-k, BigInteger$$get_V(z$$2)));\n  } else {\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(z$$2), BigNatModule$0024$0024$0024scale(k, BigInteger$$get_V(z$$2)));\n  }\n}\nexport function BigInteger$$$subnn$$6A57060(nx, ny) {\n  if (BigNatModule$0024$0024$0024gte(nx, ny)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(nx, ny));\n  } else {\n    return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(ny, nx));\n  }\n}\nexport function BigInteger$$$addnn$$6A57060(nx$$1, ny$$1) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024add(nx$$1, ny$$1));\n}\nexport function BigInteger$$get_IsZero(x$$10) {\n  if (BigInteger$$get_SignInt(x$$10) === 0) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$10));\n  }\n}\nexport function BigInteger$$get_IsOne(x$$11) {\n  if (BigInteger$$get_SignInt(x$$11) === 1) {\n    return BigNatModule$0024$0024$0024isOne(BigInteger$$get_V(x$$11));\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$op_Addition$$56F059C0(x$$12, y$$4) {\n  if (BigInteger$$get_IsZero(y$$4)) {\n    return x$$12;\n  } else if (BigInteger$$get_IsZero(x$$12)) {\n    return y$$4;\n  } else {\n    const matchValue$$5 = [BigInteger$$get_SignInt(x$$12), BigInteger$$get_SignInt(y$$4)];\n    var $target$$5;\n\n    if (matchValue$$5[0] === -1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$5 = 1;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$5 = 3;\n      } else {\n        $target$$5 = 4;\n      }\n    } else if (matchValue$$5[0] === 1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$5 = 2;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$5 = 0;\n      } else {\n        $target$$5 = 4;\n      }\n    } else {\n      $target$$5 = 4;\n    }\n\n    switch ($target$$5) {\n      case 0:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4)));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$4), BigInteger$$get_V(x$$12));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Subtraction$$56F059C0(x$$13, y$$5) {\n  if (BigInteger$$get_IsZero(y$$5)) {\n    return x$$13;\n  } else if (BigInteger$$get_IsZero(x$$13)) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(y$$5);\n  } else {\n    const matchValue$$6 = [BigInteger$$get_SignInt(x$$13), BigInteger$$get_SignInt(y$$5)];\n    var $target$$6;\n\n    if (matchValue$$6[0] === -1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$6 = 1;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$6 = 3;\n      } else {\n        $target$$6 = 4;\n      }\n    } else if (matchValue$$6[0] === 1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$6 = 2;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$6 = 0;\n      } else {\n        $target$$6 = 4;\n      }\n    } else {\n      $target$$6 = 4;\n    }\n\n    switch ($target$$6) {\n      case 0:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$5), BigInteger$$get_V(x$$13));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5)));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Multiply$$56F059C0(x$$14, y$$6) {\n  if (BigInteger$$get_IsZero(x$$14)) {\n    return x$$14;\n  } else if (BigInteger$$get_IsZero(y$$6)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(x$$14)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(y$$6)) {\n    return x$$14;\n  } else {\n    const m = BigNatModule$0024$0024$0024mul(BigInteger$$get_V(x$$14), BigInteger$$get_V(y$$6));\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(x$$14) * BigInteger$$get_SignInt(y$$6), m);\n  }\n}\nexport function BigInteger$$$DivRem$$56F059C0(x$$15, y$$7) {\n  if (BigInteger$$get_IsZero(y$$7)) {\n    throw new Error();\n  }\n\n  if (BigInteger$$get_IsZero(x$$15)) {\n    return [BigInteger$$$get_Zero(), BigInteger$$$get_Zero()];\n  } else {\n    const patternInput = BigNatModule$0024$0024$0024divmod(BigInteger$$get_V(x$$15), BigInteger$$get_V(y$$7));\n    const matchValue$$7 = [BigInteger$$get_SignInt(x$$15), BigInteger$$get_SignInt(y$$7)];\n    var $target$$7;\n\n    if (matchValue$$7[0] === -1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$7 = 1;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$7 = 3;\n      } else {\n        $target$$7 = 4;\n      }\n    } else if (matchValue$$7[0] === 1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$7 = 2;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$7 = 0;\n      } else {\n        $target$$7 = 4;\n      }\n    } else {\n      $target$$7 = 4;\n    }\n\n    switch ($target$$7) {\n      case 0:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 1:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 2:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 3:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Division$$56F059C0(x$$16, y$$8) {\n  return BigInteger$$$DivRem$$56F059C0(x$$16, y$$8)[0];\n}\nexport function BigInteger$$$op_Modulus$$56F059C0(x$$17, y$$9) {\n  return BigInteger$$$DivRem$$56F059C0(x$$17, y$$9)[1];\n}\nexport function BigInteger$$$op_RightShift$$62E082A2(x$$18, y$$10) {\n  return BigInteger$$$op_Division$$56F059C0(x$$18, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$10));\n}\nexport function BigInteger$$$op_LeftShift$$62E082A2(x$$19, y$$11) {\n  return BigInteger$$$op_Multiply$$56F059C0(x$$19, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$11));\n}\nexport function BigInteger$$$op_BitwiseAnd$$56F059C0(x$$20, y$$12) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitAnd(BigInteger$$get_V(x$$20), BigInteger$$get_V(y$$12)));\n}\nexport function BigInteger$$$op_BitwiseOr$$56F059C0(x$$21, y$$13) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitOr(BigInteger$$get_V(x$$21), BigInteger$$get_V(y$$13)));\n}\nexport function BigInteger$$$GreatestCommonDivisor$$56F059C0(x$$22, y$$14) {\n  const matchValue$$8 = [BigInteger$$get_SignInt(x$$22), BigInteger$$get_SignInt(y$$14)];\n\n  if (matchValue$$8[0] === 0) {\n    if (matchValue$$8[1] === 0) {\n      return BigInteger$$$get_Zero();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(y$$14));\n    }\n  } else if (matchValue$$8[1] === 0) {\n    return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(x$$22));\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024hcf(BigInteger$$get_V(x$$22), BigInteger$$get_V(y$$14)));\n  }\n}\nexport function BigInteger$$get_IsNegative(x$$23) {\n  if (BigInteger$$get_SignInt(x$$23) === -1) {\n    return !BigInteger$$get_IsZero(x$$23);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$get_IsPositive(x$$24) {\n  if (BigInteger$$get_SignInt(x$$24) === 1) {\n    return !BigInteger$$get_IsZero(x$$24);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$Abs$$Z665282C2(x$$25) {\n  if (BigInteger$$get_SignInt(x$$25) === -1) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(x$$25);\n  } else {\n    return x$$25;\n  }\n}\nexport function BigInteger$$$op_LessThanOrEqual$$56F059C0(x$$26, y$$15) {\n  const matchValue$$9 = [BigInteger$$get_SignInt(x$$26), BigInteger$$get_SignInt(y$$15)];\n  var $target$$8;\n\n  if (matchValue$$9[0] === -1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 1;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 6;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 3;\n    } else {\n      $target$$8 = 9;\n    }\n  } else if (matchValue$$9[0] === 0) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 8;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 4;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 7;\n    } else {\n      $target$$8 = 9;\n    }\n  } else if (matchValue$$9[0] === 1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$8 = 2;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$8 = 5;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$8 = 0;\n    } else {\n      $target$$8 = 9;\n    }\n  } else {\n    $target$$8 = 9;\n  }\n\n  switch ($target$$8) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(x$$26), BigInteger$$get_V(y$$15));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(y$$15), BigInteger$$get_V(x$$26));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$26))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$15));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        return true;\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$26));\n      }\n\n    case 6:\n      {\n        return true;\n      }\n\n    case 7:\n      {\n        return true;\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$15));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThanOrEqual$$56F059C0(x$$27, y$$16) {\n  const matchValue$$10 = [BigInteger$$get_SignInt(x$$27), BigInteger$$get_SignInt(y$$16)];\n  var $target$$9;\n\n  if (matchValue$$10[0] === -1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 1;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 6;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 3;\n    } else {\n      $target$$9 = 9;\n    }\n  } else if (matchValue$$10[0] === 0) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 8;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 4;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 7;\n    } else {\n      $target$$9 = 9;\n    }\n  } else if (matchValue$$10[0] === 1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$9 = 2;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$9 = 5;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$9 = 0;\n    } else {\n      $target$$9 = 9;\n    }\n  } else {\n    $target$$9 = 9;\n  }\n\n  switch ($target$$9) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(x$$27), BigInteger$$get_V(y$$16));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(y$$16), BigInteger$$get_V(x$$27));\n      }\n\n    case 2:\n      {\n        return true;\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return true;\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n      }\n\n    case 8:\n      {\n        return true;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$Pow$$62E082A2(x$$28, y$$17) {\n  if (y$$17 < 0) {\n    throw new Error(\"y\");\n  }\n\n  const matchValue$$11 = [BigInteger$$get_IsZero(x$$28), y$$17];\n\n  if (matchValue$$11[0]) {\n    if (matchValue$$11[1] === 0) {\n      return BigInteger$$$get_One();\n    } else {\n      return BigInteger$$$get_Zero();\n    }\n  } else {\n    const yval = BigInteger$$$$002Ector$$Z524259A4(y$$17);\n    return BigInteger$$$create$$Z2BE94A1(BigNatModule$0024$0024$0024isZero(BigNatModule$0024$0024$0024rem(BigInteger$$get_V(yval), BigNatModule$0024$0024$0024two)) ? 1 : BigInteger$$get_SignInt(x$$28), BigNatModule$0024$0024$0024pow(BigInteger$$get_V(x$$28), BigInteger$$get_V(yval)));\n  }\n}\nexport function BigInteger$$get_ToInt32(x$$29) {\n  if (BigInteger$$get_IsZero(x$$29)) {\n    return 0;\n  } else {\n    const u = BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$29));\n\n    if (u <= 2147483647 >>> 0) {\n      return BigInteger$$get_SignInt(x$$29) * ~~u | 0;\n    } else if (BigInteger$$get_SignInt(x$$29) === -1 ? u === 2147483647 + 1 >>> 0 : false) {\n      return -2147483648 | 0;\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt32(x$$30) {\n  if (BigInteger$$get_IsZero(x$$30)) {\n    return 0;\n  } else {\n    return BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$30));\n  }\n}\nexport function BigInteger$$get_ToInt64(x$$31) {\n  if (BigInteger$$get_IsZero(x$$31)) {\n    return fromBits(0, 0, false);\n  } else {\n    const u$$1 = BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$31));\n\n    if (compare(u$$1, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\n      return op_Multiply(fromInteger(BigInteger$$get_SignInt(x$$31), false, 2), fromValue(u$$1, false));\n    } else if (BigInteger$$get_SignInt(x$$31) === -1 ? equals(u$$1, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true)) : false) {\n      return fromBits(0, 2147483648, false);\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt64(x$$32) {\n  if (BigInteger$$get_IsZero(x$$32)) {\n    return fromBits(0, 0, true);\n  } else {\n    return BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$32));\n  }\n}\nexport function BigInteger$$get_ToDouble(x$$33) {\n  const matchValue$$12 = BigInteger$$get_SignInt(x$$33) | 0;\n\n  switch (matchValue$$12) {\n    case -1:\n      {\n        return -BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$33));\n      }\n\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$33));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$get_ToSByte(x$$34) {\n  return (BigInteger$$get_ToInt32(x$$34) + 0x80 & 0xFF) - 0x80;\n}\nexport function BigInteger$$get_ToByte(x$$35) {\n  return BigInteger$$get_ToUInt32(x$$35) & 0xFF;\n}\nexport function BigInteger$$get_ToInt16(x$$36) {\n  return (BigInteger$$get_ToInt32(x$$36) + 0x8000 & 0xFFFF) - 0x8000;\n}\nexport function BigInteger$$get_ToUInt16(x$$37) {\n  return BigInteger$$get_ToUInt32(x$$37) & 0xFFFF;\n}\nexport function BigInteger$$get_ToSingle(x$$38) {\n  return BigInteger$$get_ToDouble(x$$38);\n}\nexport function BigInteger$$get_ToDecimal(x$$39) {\n  return new Decimal(BigInteger$$get_ToDouble(x$$39));\n}\nexport function BigInteger$$$Parse$$Z721C83C5(text) {\n  if (text == null) {\n    throw new Error(\"text\");\n  }\n\n  const text$$1 = text.trim();\n  const len = text$$1.length | 0;\n\n  if (len === 0) {\n    throw new Error();\n  }\n\n  const matchValue$$13 = [text$$1[0], len];\n\n  if (matchValue$$13[0] === \"+\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else if (matchValue$$13[0] === \"-\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1));\n  }\n}\nexport function BigInteger$$get_IsSmall(x$$40) {\n  if (BigInteger$$get_IsZero(x$$40)) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isSmall(BigInteger$$get_V(x$$40));\n  }\n}\nexport function BigInteger$$$Factorial$$Z665282C2(x$$41) {\n  if (BigInteger$$get_IsNegative(x$$41)) {\n    throw new Error(\"mustBeNonNegative\\\\nParameter name: x\");\n  }\n\n  if (BigInteger$$get_IsPositive(x$$41)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024factorial(BigInteger$$get_V(x$$41)));\n  } else {\n    return BigInteger$$$get_One();\n  }\n}\nexport function BigInteger$$$op_UnaryPlus$$Z665282C2(n1) {\n  return n1;\n}\nexport function BigInteger$$$FromInt64$$Z524259C1(x$$42) {\n  return BigInteger$$$$002Ector$$Z524259C1(x$$42);\n}\nexport function BigInteger$$$FromInt32$$Z524259A4(x$$43) {\n  return BigInteger$$$$002Ector$$Z524259A4(x$$43);\n}\n\nBigInteger.prototype.CompareTo = function (obj$$1) {\n  const this$$$1 = this;\n\n  if (obj$$1 instanceof BigInteger) {\n    const that$$1 = obj$$1;\n    return BigInteger$$$compare$$56F059C0(this$$$1, that$$1) | 0;\n  } else {\n    throw new Error(\"the objects are not comparable\\\\nParameter name: obj\");\n  }\n};","import { BigInteger$$get_IsOne as BigInteger$0024$0024get_IsOne, BigInteger$$get_IsZero as BigInteger$0024$0024get_IsZero, BigInteger$$get_Sign as BigInteger$0024$0024get_Sign, BigInteger$$get_ToDecimal as BigInteger$0024$0024get_ToDecimal, BigInteger$$get_ToDouble as BigInteger$0024$0024get_ToDouble, BigInteger$$get_ToSingle as BigInteger$0024$0024get_ToSingle, BigInteger$$get_ToUInt64 as BigInteger$0024$0024get_ToUInt64, BigInteger$$get_ToInt64 as BigInteger$0024$0024get_ToInt64, BigInteger$$get_ToUInt32 as BigInteger$0024$0024get_ToUInt32, BigInteger$$get_ToInt32 as BigInteger$0024$0024get_ToInt32, BigInteger$$get_ToUInt16 as BigInteger$0024$0024get_ToUInt16, BigInteger$$get_ToInt16 as BigInteger$0024$0024get_ToInt16, BigInteger$$get_ToByte as BigInteger$0024$0024get_ToByte, BigInteger$$get_ToSByte as BigInteger$0024$0024get_ToSByte, BigInteger$$$$002Ector$$Z524259C1 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1, BigInteger$$$$002Ector$$Z524259A4 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4, BigInteger$$$get_Two as BigInteger$0024$0024$0024get_Two, BigInteger$$$Abs$$Z665282C2 as BigInteger$0024$0024$0024Abs$0024$0024Z665282C2, BigInteger$$$Pow$$62E082A2 as BigInteger$0024$0024$0024Pow$0024$002462E082A2, BigInteger$$$GreatestCommonDivisor$$56F059C0 as BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0, BigInteger$$$DivRem$$56F059C0 as BigInteger$0024$0024$0024DivRem$0024$002456F059C0, BigInteger$$$Parse$$Z721C83C5 as BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5, BigInteger$$$op_Inequality$$56F059C0 as BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0, BigInteger$$$op_Equality$$56F059C0 as BigInteger$0024$0024$0024op_Equality$0024$002456F059C0, BigInteger$$$op_GreaterThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0, BigInteger$$$op_GreaterThan$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0, BigInteger$$$op_LessThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0, BigInteger$$$op_LessThan$$56F059C0 as BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0, BigInteger$$$op_BitwiseOr$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0, BigInteger$$$op_BitwiseAnd$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0, BigInteger$$$op_LeftShift$$62E082A2 as BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2, BigInteger$$$op_RightShift$$62E082A2 as BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2, BigInteger$$$op_UnaryPlus$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2, BigInteger$$$op_UnaryNegation$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2, BigInteger$$$op_Modulus$$56F059C0 as BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0, BigInteger$$$op_Division$$56F059C0 as BigInteger$0024$0024$0024op_Division$0024$002456F059C0, BigInteger$$$op_Multiply$$56F059C0 as BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0, BigInteger$$$op_Subtraction$$56F059C0 as BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0, BigInteger$$$op_Addition$$56F059C0 as BigInteger$0024$0024$0024op_Addition$0024$002456F059C0, BigInteger$$$get_One as BigInteger$0024$0024$0024get_One, BigInteger$$$get_Zero as BigInteger$0024$0024$0024get_Zero, BigInteger } from \"./BigInt/z\";\nimport { equals as equals$$1, structuralHash } from \"./Util\";\nexport function isBigInt(x) {\n  return x instanceof BigInteger;\n}\nexport const get_Zero = BigInteger$0024$0024$0024get_Zero();\nexport const get_One = BigInteger$0024$0024$0024get_One();\nexport function op_Addition(arg00, arg01) {\n  return BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(arg00, arg01);\n}\nexport function op_Subtraction(arg00$$1, arg01$$1) {\n  return BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0(arg00$$1, arg01$$1);\n}\nexport function op_Multiply(arg00$$2, arg01$$2) {\n  return BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(arg00$$2, arg01$$2);\n}\nexport function op_Division(arg00$$3, arg01$$3) {\n  return BigInteger$0024$0024$0024op_Division$0024$002456F059C0(arg00$$3, arg01$$3);\n}\nexport function op_Modulus(arg00$$4, arg01$$4) {\n  return BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0(arg00$$4, arg01$$4);\n}\nexport function op_UnaryNegation(arg00$$5) {\n  return BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2(arg00$$5);\n}\nexport function op_UnaryPlus(arg00$$6) {\n  return BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2(arg00$$6);\n}\nexport function op_RightShift(arg00$$7, arg01$$5) {\n  return BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2(arg00$$7, arg01$$5);\n}\nexport function op_LeftShift(arg00$$8, arg01$$6) {\n  return BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2(arg00$$8, arg01$$6);\n}\nexport function op_BitwiseAnd(arg00$$9, arg01$$7) {\n  return BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0(arg00$$9, arg01$$7);\n}\nexport function op_BitwiseOr(arg00$$10, arg01$$8) {\n  return BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0(arg00$$10, arg01$$8);\n}\nexport function op_LessThan(arg00$$11, arg01$$9) {\n  return BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0(arg00$$11, arg01$$9);\n}\nexport function op_LessThanOrEqual(arg00$$12, arg01$$10) {\n  return BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0(arg00$$12, arg01$$10);\n}\nexport function op_GreaterThan(arg00$$13, arg01$$11) {\n  return BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0(arg00$$13, arg01$$11);\n}\nexport function op_GreaterThanOrEqual(arg00$$14, arg01$$12) {\n  return BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0(arg00$$14, arg01$$12);\n}\nexport function op_Equality(arg00$$15, arg01$$13) {\n  return BigInteger$0024$0024$0024op_Equality$0024$002456F059C0(arg00$$15, arg01$$13);\n}\nexport function op_Inequality(arg00$$16, arg01$$14) {\n  return BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0(arg00$$16, arg01$$14);\n}\nexport function tryParse(str) {\n  try {\n    const res = BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(str);\n    return [true, res];\n  } catch (matchValue) {\n    return [false, BigInteger$0024$0024$0024get_Zero()];\n  }\n}\nexport function parse(arg00$$17) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(arg00$$17);\n}\nexport function divRem(arg00$$18, arg01$$15) {\n  return BigInteger$0024$0024$0024DivRem$0024$002456F059C0(arg00$$18, arg01$$15);\n}\nexport function greatestCommonDivisor(arg00$$19, arg01$$16) {\n  return BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0(arg00$$19, arg01$$16);\n}\nexport function pow(arg00$$20, arg01$$17) {\n  return BigInteger$0024$0024$0024Pow$0024$002462E082A2(arg00$$20, arg01$$17);\n}\nexport function abs(arg00$$21) {\n  return BigInteger$0024$0024$0024Abs$0024$0024Z665282C2(arg00$$21);\n}\nexport const zero = BigInteger$0024$0024$0024get_Zero();\nexport const one = BigInteger$0024$0024$0024get_One();\nexport const two = BigInteger$0024$0024$0024get_Two();\nexport function fromZero() {\n  return BigInteger$0024$0024$0024get_Zero();\n}\nexport function fromOne() {\n  return BigInteger$0024$0024$0024get_One();\n}\nexport function fromInt32(i) {\n  return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(i);\n}\nexport function fromInt64(i$$1) {\n  return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1(i$$1);\n}\nexport function fromString(s) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(s);\n}\nexport function toSByte(x$$1) {\n  return BigInteger$0024$0024get_ToSByte(x$$1);\n}\nexport function toByte(x$$2) {\n  return BigInteger$0024$0024get_ToByte(x$$2);\n}\nexport function toInt16(x$$3) {\n  return BigInteger$0024$0024get_ToInt16(x$$3);\n}\nexport function toUInt16(x$$4) {\n  return BigInteger$0024$0024get_ToUInt16(x$$4);\n}\nexport function toInt32(x$$5) {\n  return BigInteger$0024$0024get_ToInt32(x$$5);\n}\nexport function toUInt32(x$$6) {\n  return BigInteger$0024$0024get_ToUInt32(x$$6);\n}\nexport function toInt64(x$$7) {\n  return BigInteger$0024$0024get_ToInt64(x$$7);\n}\nexport function toUInt64(x$$8) {\n  return BigInteger$0024$0024get_ToUInt64(x$$8);\n}\nexport function toSingle(x$$9) {\n  return BigInteger$0024$0024get_ToSingle(x$$9);\n}\nexport function toDouble(x$$10) {\n  return BigInteger$0024$0024get_ToDouble(x$$10);\n}\nexport function toDecimal(x$$11) {\n  return BigInteger$0024$0024get_ToDecimal(x$$11);\n}\nexport function sign(x$$12) {\n  return BigInteger$0024$0024get_Sign(x$$12);\n}\nexport function isZero(x$$13) {\n  return BigInteger$0024$0024get_IsZero(x$$13);\n}\nexport function isOne(x$$14) {\n  return BigInteger$0024$0024get_IsOne(x$$14);\n}\nexport function hash(x$$15) {\n  return structuralHash(x$$15);\n}\nexport function compare(x$$16, y) {\n  return x$$16.CompareTo(y);\n}\nexport function equals(x$$17, y$$1) {\n  return equals$$1(x$$17, y$$1);\n}\nexport function toString(x$$18) {\n  return String(x$$18);\n}","\nnamespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Decode =\n\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    module internal Helpers =\n        [<Emit(\"typeof $0\")>]\n        let jsTypeof (_ : JsonValue) : string = jsNative\n\n        [<Emit(\"$0 instanceof SyntaxError\")>]\n        let isSyntaxError (_ : JsonValue) : bool = jsNative\n\n        let inline getField (fieldName: string) (o: JsonValue) = o?(fieldName)\n        let inline isString (o: JsonValue) : bool = o :? string\n\n        let inline isBoolean (o: JsonValue) : bool = o :? bool\n\n        let inline isNumber (o: JsonValue) : bool = jsTypeof o = \"number\"\n\n        let inline isArray (o: JsonValue) : bool = JS.Array.isArray(o)\n\n        [<Emit(\"$0 === null ? false : (Object.getPrototypeOf($0 || false) === Object.prototype)\")>]\n        let isObject (_ : JsonValue) : bool = jsNative\n\n        let inline isNaN (o: JsonValue) : bool = JS.Number.isNaN(!!o)\n\n        let inline isNullValue (o: JsonValue): bool = isNull o\n\n        [<Emit(\"-2147483648 < $0 && $0 < 2147483647 && ($0 | 0) === $0\")>]\n        let isValidIntRange (_: JsonValue) : bool = jsNative\n\n        [<Emit(\"isFinite($0) && !($0 % 1)\")>]\n        let isIntFinite (_: JsonValue) : bool = jsNative\n\n        let isUndefined (o: JsonValue): bool = jsTypeof o = \"undefined\"\n\n        [<Emit(\"JSON.stringify($0, null, 4) + ''\")>]\n        let anyToString (_: JsonValue) : string = jsNative\n\n        let inline isFunction (o: JsonValue) : bool = jsTypeof o = \"function\"\n\n        let inline objectKeys (o: JsonValue) : string seq = upcast JS.Object.keys(o)\n        let inline asBool (o: JsonValue): bool = unbox o\n        let inline asInt (o: JsonValue): int = unbox o\n        let inline asFloat (o: JsonValue): float = unbox o\n        let inline asString (o: JsonValue): string = unbox o\n        let inline asArray (o: JsonValue): JsonValue[] = unbox o\n\n    let private genericMsg msg value newLine =\n        try\n            \"Expecting \"\n                + msg\n                + \" but instead got:\"\n                + (if newLine then \"\\n\" else \" \")\n                + (Helpers.anyToString value)\n        with\n            | _ ->\n                \"Expecting \"\n                + msg\n                + \" but decoder failed. Couldn't report given value due to circular structure.\"\n                + (if newLine then \"\\n\" else \" \")\n\n    let private errorToString (path : string, error) =\n        let reason =\n            match error with\n            | BadPrimitive (msg, value) ->\n                genericMsg msg value false\n            | BadType (msg, value) ->\n                genericMsg msg value true\n            | BadPrimitiveExtra (msg, value, reason) ->\n                genericMsg msg value false + \"\\nReason: \" + reason\n            | BadField (msg, value) ->\n                genericMsg msg value true\n            | BadPath (msg, value, fieldName) ->\n                genericMsg msg value true + (\"\\nNode `\" + fieldName + \"` is unkown.\")\n            | TooSmallArray (msg, value) ->\n                \"Expecting \" + msg + \".\\n\" + (Helpers.anyToString value)\n            | BadOneOf messages ->\n                \"I run into the following problems:\\n\\n\" + String.concat \"\\n\\n\" messages\n            | FailMessage msg ->\n                \"I run into a `fail` decoder: \" + msg\n\n        match error with\n        | BadOneOf _ ->\n            // Don't need to show the path here because each error case will show it's own path\n            reason\n        | _ ->\n            \"Error at: `\" + path + \"`\\n\" + reason\n\n    ///////////////\n    // Runners ///\n    /////////////\n\n    let fromValue (path : string) (decoder : Decoder<'T>) =\n        fun value ->\n            match decoder path value with\n            | Ok success ->\n                Ok success\n            | Error error ->\n                Error (errorToString error)\n\n    let fromString (decoder : Decoder<'T>) =\n        fun value ->\n            try\n                let json = JS.JSON.parse value\n                fromValue \"$\" decoder json\n            with\n                | ex when Helpers.isSyntaxError ex ->\n                    Error(\"Given an invalid JSON: \" + ex.Message)\n\n    let unsafeFromString (decoder : Decoder<'T>) =\n        fun value ->\n            match fromString decoder value with\n            | Ok x -> x\n            | Error msg -> failwith msg\n\n    [<System.Obsolete(\"Please use fromValue instead\")>]\n    let decodeValue (path : string) (decoder : Decoder<'T>) = fromValue path decoder\n\n    [<System.Obsolete(\"Please use fromString instead\")>]\n    let decodeString (decoder : Decoder<'T>) = fromString decoder\n\n    //////////////////\n    // Primitives ///\n    ////////////////\n\n    let string : Decoder<string> =\n        fun path value ->\n            if Helpers.isString value then\n                Ok(Helpers.asString value)\n            else\n                (path, BadPrimitive(\"a string\", value)) |> Error\n\n    let guid : Decoder<System.Guid> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.Guid.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a guid\", value)) |> Error\n            else (path, BadPrimitive(\"a guid\", value)) |> Error\n\n    let int : Decoder<int> =\n        fun path value ->\n            if Helpers.isNumber value then\n                if Helpers.isValidIntRange value then\n                    Ok(Helpers.asInt value)\n                else\n                    (path, BadPrimitiveExtra(\"an int\", value, \"Value was either too large or too small for an int\")) |> Error\n            elif Helpers.isString value then\n                match System.Int32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int\", value)) |> Error\n            else\n                (path, BadPrimitive(\"an int\", value)) |> Error\n\n\n    let int64 : Decoder<int64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> int64 |> Ok\n            elif Helpers.isString value then\n                match System.Int64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int64\", value)) |> Error\n            else (path, BadPrimitive(\"an int64\", value)) |> Error\n\n    let uint32 : Decoder<uint32> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt32.MaxValue) then\n                    Helpers.asInt value |> uint32 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint32\", value, \"Value was either too large or too small for an uint32\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint32\", value)) |> Error\n            else (path, BadPrimitive(\"an uint32\", value)) |> Error\n\n    let uint64 : Decoder<uint64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt64.MaxValue) then\n                    Helpers.asInt value |> uint64 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint64\", value, \"Value was either too large or too small for an uint64\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint64\", value)) |> Error\n            else (path, BadPrimitive(\"an uint64\", value)) |> Error\n\n    let bigint : Decoder<bigint> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> bigint |> Ok\n            elif Helpers.isString value then\n                // TODO: BigInt.TryParse has been added in Fable 2.1.4\n                // Don't use it for now to support lower Fable versions\n                try\n                    bigint.Parse (Helpers.asString value) |> Ok\n                with _ ->\n                    (path, BadPrimitive(\"a bigint\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a bigint\", value)) |> Error\n\n    let bool : Decoder<bool> =\n        fun path value ->\n            if Helpers.isBoolean value then\n                Ok(Helpers.asBool value)\n            else\n                (path, BadPrimitive(\"a boolean\", value)) |> Error\n\n    let float : Decoder<float> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat value)\n            else\n                (path, BadPrimitive(\"a float\", value)) |> Error\n\n    let decimal : Decoder<decimal> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asFloat value |> decimal |> Ok\n            elif Helpers.isString value then\n                match System.Decimal.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a decimal\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a decimal\", value)) |> Error\n\n    let datetime : Decoder<System.DateTime> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTime.TryParse (Helpers.asString value) with\n                | true, x -> x.ToUniversalTime() |> Ok\n                | _ -> (path, BadPrimitive(\"a datetime\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let datetimeOffset : Decoder<System.DateTimeOffset> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTimeOffset.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a datetimeoffset\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let timespan : Decoder<System.TimeSpan> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.TimeSpan.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a timespan\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a timespan\", value)) |> Error\n\n    /////////////////////////\n    // Object primitives ///\n    ///////////////////////\n\n    let private decodeMaybeNull path (decoder : Decoder<'T>) value =\n        // The decoder may be an option decoder so give it an opportunity to check null values\n        match decoder path value with\n        | Ok v -> Ok(Some v)\n        | Error _ when Helpers.isNullValue value -> Ok None\n        | Error er -> Error er\n\n    let optional (fieldName : string) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then Ok None\n                else decodeMaybeNull (path + \".\" + fieldName) decoder fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let private badPathError fieldNames currentPath value =\n        let currentPath = defaultArg currentPath (\"$\"::fieldNames |> String.concat \".\")\n        let msg = \"an object with path `\" + (String.concat \".\" fieldNames) + \"`\"\n        Error(currentPath, BadPath (msg, value, List.tryLast fieldNames |> Option.defaultValue \"\"))\n\n    let optionalAt (fieldNames : string list) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    if Helpers.isUndefined lastValue then Ok None\n                    else decodeMaybeNull lastPath decoder lastValue\n\n    let field (fieldName: string) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then\n                    Error(path, BadField (\"an object with a field named `\" + fieldName + \"`\", value))\n                else\n                    decoder (path + \".\" + fieldName) fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let at (fieldNames: string list) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        if Helpers.isUndefined curValue then\n                            let res = badPathError fieldNames None firstValue\n                            curPath, curValue, Some res\n                        else\n                            curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    decoder lastPath lastValue\n\n    let index (requestedIndex: int) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            let currentPath = path + \".[\" + (Operators.string requestedIndex) + \"]\"\n            if Helpers.isArray value then\n                let vArray = Helpers.asArray value\n                if requestedIndex < vArray.Length then\n                    decoder currentPath (vArray.[requestedIndex])\n                else\n                    let msg =\n                        \"a longer array. Need index `\"\n                            + (requestedIndex.ToString())\n                            + \"` but there are only `\"\n                            + (vArray.Length.ToString())\n                            + \"` entries\"\n\n                    (currentPath, TooSmallArray(msg, value))\n                    |> Error\n            else\n                (currentPath, BadPrimitive(\"an array\", value))\n                |> Error\n\n    let option (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isNullValue value then Ok None\n            else decoder path value |> Result.map Some\n\n    //////////////////////\n    // Data structure ///\n    ////////////////////\n\n    let list (decoder : Decoder<'value>) : Decoder<'value list> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok [], tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (value::acc))\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"a list\", value))\n                |> Error\n\n    let array (decoder : Decoder<'value>) : Decoder<'value array> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                let arr = Array.zeroCreate tokens.Length\n                (Ok arr, tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> acc.[i] <- value; Ok acc)\n            else\n                (path, BadPrimitive (\"an array\", value))\n                |> Error\n\n    let keyValuePairs (decoder : Decoder<'value>) : Decoder<(string * 'value) list> =\n        fun path value ->\n            if Helpers.isObject value then\n                (Ok [], Helpers.objectKeys value) ||> Seq.fold (fun acc prop ->\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match Helpers.getField prop value |> decoder path with\n                        | Error er -> Error er\n                        | Ok value -> (prop, value)::acc |> Ok)\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"an object\", value))\n                |> Error\n\n    //////////////////////////////\n    // Inconsistent Structure ///\n    ////////////////////////////\n\n    let oneOf (decoders : Decoder<'value> list) : Decoder<'value> =\n        fun path value ->\n            let rec runner (decoders : Decoder<'value> list) (errors : string list) =\n                match decoders with\n                | head::tail ->\n                    match fromValue path head value with\n                    | Ok v ->\n                        Ok v\n                    | Error error -> runner tail (errors @ [error])\n                | [] -> (path, BadOneOf errors) |> Error\n\n            runner decoders []\n\n    //////////////////////\n    // Fancy decoding ///\n    ////////////////////\n\n    let nil (output : 'a) : Decoder<'a> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok output\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let value _ v = Ok v\n\n    let succeed (output : 'a) : Decoder<'a> =\n        fun _ _ ->\n            Ok output\n\n    let fail (msg: string) : Decoder<'a> =\n        fun path _ ->\n            (path, FailMessage msg) |> Error\n\n    let andThen (cb: 'a -> Decoder<'b>) (decoder : Decoder<'a>) : Decoder<'b> =\n        fun path value ->\n            match decoder path value with\n            | Error error -> Error error\n            | Ok result -> cb result path value\n\n    /////////////////////\n    // Map functions ///\n    ///////////////////\n\n    let map\n        (ctor : 'a -> 'value)\n        (d1 : Decoder<'a>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value with\n            | Ok v1 -> Ok (ctor v1)\n            | Error er -> Error er\n\n    let map2\n        (ctor : 'a -> 'b -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value with\n            | Ok v1, Ok v2 -> Ok (ctor v1 v2)\n            | Error er,_ -> Error er\n            | _,Error er -> Error er\n\n    let map3\n        (ctor : 'a -> 'b -> 'c -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value with\n            | Ok v1, Ok v2, Ok v3 -> Ok (ctor v1 v2 v3)\n            | Error er,_,_ -> Error er\n            | _,Error er,_ -> Error er\n            | _,_,Error er -> Error er\n\n    let map4\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4 -> Ok (ctor v1 v2 v3 v4)\n            | Error er,_,_,_ -> Error er\n            | _,Error er,_,_ -> Error er\n            | _,_,Error er,_ -> Error er\n            | _,_,_,Error er -> Error er\n\n    let map5\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5 -> Ok (ctor v1 v2 v3 v4 v5)\n            | Error er,_,_,_,_ -> Error er\n            | _,Error er,_,_,_ -> Error er\n            | _,_,Error er,_,_ -> Error er\n            | _,_,_,Error er,_ -> Error er\n            | _,_,_,_,Error er -> Error er\n\n    let map6\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6 -> Ok (ctor v1 v2 v3 v4 v5 v6)\n            | Error er,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_ -> Error er\n            | _,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,Error er -> Error er\n\n    let map7\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7)\n            | Error er,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,Error er -> Error er\n\n    let map8\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'h -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>)\n        (d8 : Decoder<'h>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value, d8 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7, Ok v8 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7 v8)\n            | Error er,_,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,_,Error er -> Error er\n\n    let dict (decoder : Decoder<'value>) : Decoder<Map<string, 'value>> =\n        map Map.ofList (keyValuePairs decoder)\n\n    //////////////////////\n    // Object builder ///\n    ////////////////////\n\n    type IRequiredGetter =\n        abstract Field : string -> Decoder<'a> -> 'a\n        abstract At : List<string> -> Decoder<'a> -> 'a\n        abstract Raw : Decoder<'a> -> 'a\n\n    type IOptionalGetter =\n        abstract Field : string -> Decoder<'a> -> 'a option\n        abstract At : List<string> -> Decoder<'a> -> 'a option\n        abstract Raw : Decoder<'a> -> 'a option\n\n    type IGetters =\n        abstract Required: IRequiredGetter\n        abstract Optional: IOptionalGetter\n\n    let private unwrapWith (errors: ResizeArray<DecoderError>) path (decoder: Decoder<'T>) value: 'T =\n        match decoder path value with\n        | Ok v -> v\n        | Error er -> errors.Add(er); Unchecked.defaultof<'T>\n\n    type Getters<'T>(path: string, v: 'T) =\n        let mutable errors = ResizeArray<DecoderError>()\n        let required =\n            { new IRequiredGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (field fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (at fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    unwrapWith errors path decoder v }\n        let optional =\n            { new IOptionalGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optional fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optionalAt fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    match decoder path v with\n                    | Ok v -> Some v\n                    | Error((_, reason) as error) ->\n                        match reason with\n                        | BadPrimitive(_,v)\n                        | BadPrimitiveExtra(_,v,_)\n                        | BadType(_,v) ->\n                            if Helpers.isNullValue v then None\n                            else errors.Add(error); Unchecked.defaultof<_>\n                        | BadField _\n                        | BadPath _ -> None\n                        | TooSmallArray _\n                        | FailMessage _\n                        | BadOneOf _ -> errors.Add(error); Unchecked.defaultof<_> }\n        member __.Errors: _ list = Seq.toList errors\n        interface IGetters with\n            member __.Required = required\n            member __.Optional = optional\n\n    let object (builder: IGetters -> 'value) : Decoder<'value> =\n        fun path v ->\n            let getters = Getters(path, v)\n            let result = builder getters\n            match getters.Errors with\n            | [] -> Ok result\n            | fst::_ as errors ->\n                if errors.Length > 1 then\n                    let errors = List.map errorToString errors\n                    (path, BadOneOf errors) |> Error\n                else\n                    Error fst\n\n    ///////////////////////\n    // Tuples decoders ///\n    ////////////////////\n\n    let tuple2 (decoder1: Decoder<'T1>) (decoder2: Decoder<'T2>) : Decoder<'T1 * 'T2> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                succeed (v1, v2)\n            )\n        )\n\n    let tuple3 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>) : Decoder<'T1 * 'T2 * 'T3> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    succeed (v1, v2, v3)\n                )\n            )\n        )\n\n    let tuple4 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>) : Decoder<'T1 * 'T2 * 'T3 * 'T4> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        succeed (v1, v2, v3, v4)\n                    )\n                )\n            )\n        )\n\n    let tuple5 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            succeed (v1, v2, v3, v4, v5)\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple6 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                succeed (v1, v2, v3, v4, v5, v6)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple7 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    succeed (v1, v2, v3, v4, v5, v6, v7)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple8 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>)\n               (decoder8: Decoder<'T8>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    index 7 decoder8\n                                    |> andThen (fun v8 ->\n                                        succeed (v1, v2, v3, v4, v5, v6, v7, v8)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxDecoder (d: Decoder<'T>): BoxedDecoder =\n        !!d // d >> Result.map box\n\n    let inline unboxDecoder (d: BoxedDecoder): Decoder<'T> =\n        !!d // d >> Result.map unbox\n\n    // This is used to force Fable use a generic comparer for map keys\n    let private toMap<'key, 'value when 'key: comparison> (xs: ('key*'value) seq) = Map.ofSeq xs\n    let private toSet<'key when 'key: comparison> (xs: 'key seq) = Set.ofSeq xs\n\n    let private autoObject (decoderInfos: (string * BoxedDecoder)[]) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (decoderInfos, Ok []) ||> Array.foldBack (fun (name, decoder) acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result ->\n                    Helpers.getField name value\n                    |> decoder (path + \".\" + name)\n                    |> Result.map (fun v -> v::result))\n\n    let private autoObject2 (keyDecoder: BoxedDecoder) (valueDecoder: BoxedDecoder) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (Ok [], Helpers.objectKeys(value)) ||> Seq.fold (fun acc name ->\n                match acc with\n                | Error _ -> acc\n                | Ok acc ->\n                    match keyDecoder path name with\n                    | Error er -> Error er\n                    | Ok k ->\n                        Helpers.getField name value\n                        |> valueDecoder (path + \".\" + name)\n                        |> function\n                            | Error er -> Error er\n                            | Ok v -> (k,v)::acc |> Ok)\n\n    let private mixedArray msg (decoders: BoxedDecoder[]) (path: string) (values: JsonValue[]): Result<JsonValue list, DecoderError> =\n        if decoders.Length <> values.Length then\n            (path, sprintf \"Expected %i %s but got %i\" decoders.Length msg values.Length\n            |> FailMessage) |> Error\n        else\n            (values, decoders, Ok [])\n            |||> Array.foldBack2 (fun value decoder acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result -> decoder path value |> Result.map (fun v -> v::result))\n\n    let rec private makeUnion extra isCamelCase t name (path : string) (values: JsonValue[]) =\n        let uci =\n            FSharpType.GetUnionCases(t, allowAccessToPrivateRepresentation=true)\n            |> Array.tryFind (fun x -> x.Name = name)\n        match uci with\n        | None -> (path, FailMessage(\"Cannot find case \" + name + \" in \" + t.FullName)) |> Error\n        | Some uci ->\n            if values.Length = 0 then\n                FSharpValue.MakeUnion(uci, [||], allowAccessToPrivateRepresentation=true) |> Ok\n            else\n                let decoders = uci.GetFields() |> Array.map (fun fi -> autoDecoder extra isCamelCase false fi.PropertyType)\n                mixedArray \"union fields\" decoders path values\n                |> Result.map (fun values -> FSharpValue.MakeUnion(uci, List.toArray values, allowAccessToPrivateRepresentation=true))\n\n    and private autoDecodeRecordsAndUnions extra (isCamelCase : bool) (isOptional : bool) (t: System.Type) : BoxedDecoder =\n        // Add the decoder to extra in case one of the fields is recursive\n        let decoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName decoderRef\n        let decoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let decoders =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let name =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        name, autoDecoder extra isCamelCase false fi.PropertyType)\n                fun path value ->\n                    autoObject decoders path value\n                    |> Result.map (fun xs -> FSharpValue.MakeRecord(t, List.toArray xs, allowAccessToPrivateRepresentation=true))\n\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun path (value: JsonValue) ->\n                    if Helpers.isString(value) then\n                        let name = Helpers.asString value\n                        makeUnion extra isCamelCase t name path [||]\n                    elif Helpers.isArray(value) then\n                        let values = Helpers.asArray value\n                        let name = Helpers.asString values.[0]\n                        makeUnion extra isCamelCase t name path values.[1..]\n                    else (path, BadPrimitive(\"a string or array\", value)) |> Error\n\n            else\n                if isOptional then\n                    // The error will only happen at runtime if the value is not null\n                    // See https://github.com/MangelMaxime/Thoth/pull/84#issuecomment-444837773\n                    boxDecoder(fun path value -> Error(path, BadType(\"an extra coder for \" + t.FullName, value)))\n                else\n                    // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                    // when the return type is a function too, so it doesn't fail immediately\n                    sprintf \"Cannot generate auto decoder for %s. Please pass an extra decoder.\" t.FullName |> failwith\n        decoderRef := decoder\n        decoder\n\n    and private autoDecoder (extra: Map<string, ref<BoxedDecoder>>) isCamelCase (isOptional : bool) (t: System.Type) : BoxedDecoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some decoderRef -> fun path value -> decoderRef.contents path value\n      | None ->\n        if t.IsArray then\n            let decoder = t.GetElementType() |> autoDecoder extra isCamelCase false\n            array decoder |> boxDecoder\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let decoders = FSharpType.GetTupleElements(t) |> Array.map (autoDecoder extra isCamelCase false)\n                fun path value ->\n                    if Helpers.isArray value then\n                        mixedArray \"tuple elements\" decoders path (Helpers.asArray value)\n                        |> Result.map (fun xs -> FSharpValue.MakeTuple(List.toArray xs, t))\n                    else (path, BadPrimitive (\"an array\", value)) |> Error\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase true) |> option |> boxDecoder\n                elif fullname = typedefof<obj list>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase false) |> list |> boxDecoder\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyDecoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    let valueDecoder = t.GenericTypeArguments.[1] |> autoDecoder extra isCamelCase false\n                    oneOf [\n                        autoObject2 keyDecoder valueDecoder\n                        list (tuple2 keyDecoder valueDecoder)\n                    ] |> map (fun ar -> toMap (unbox ar) |> box)\n                elif fullname = typedefof< Set<string> >.FullName then\n                    let decoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    fun path value ->\n                        match array decoder path value with\n                        | Error er -> Error er\n                        | Ok ar -> toSet (unbox ar) |> box |> Ok\n                else\n                    autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxDecoder bool\n            elif fullname = typeof<string>.FullName then\n                boxDecoder string\n            elif fullname = typeof<int>.FullName then\n                boxDecoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxDecoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxDecoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra decoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxDecoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxDecoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxDecoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxDecoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxDecoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxDecoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxDecoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxDecoder guid\n            elif fullname = typeof<obj>.FullName then\n                fun _ v -> Ok v\n            else autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (_,dec) -> ref dec) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateDecoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedDecoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoDecoder (makeExtra extra) isCamelCase false t) |> unboxDecoder\n\n        static member generateDecoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoDecoder (makeExtra extra) isCamelCase false |> unboxDecoder\n\n        static member fromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Result<'T, string> =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            fromString decoder json\n\n        static member unsafeFromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): 'T =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            match fromString decoder json with\n            | Ok x -> x\n            | Error msg -> failwith msg\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Content =\n\n    type Option =\n        | Size of ISize\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"content\"></div>\n    let content (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Size size -> ofSize size |> result.AddClass\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"content\").ToReactElement(div, children)\n\n    module Ol =\n\n        type Option =\n            | [<CompiledName(\"is-lower-roman\")>] IsLowerRoman\n            | [<CompiledName(\"is-upper-roman\")>] IsUpperRoman\n            | [<CompiledName(\"is-lower-alpha\")>] IsLowerAlpha\n            | [<CompiledName(\"is-upper-alpha\")>] IsUpperAlpha\n            | CustomClass of string\n            | Modifiers of Modifier.IModifier list\n            | Props of IHTMLProp list\n\n        /// Generate <ol></ol>\n        let ol (options : Option list) children =\n            let parseOptions (result : GenericOptions) option =\n                match option with\n                | IsLowerRoman\n                | IsUpperRoman\n                | IsLowerAlpha\n                | IsUpperAlpha -> result.AddCaseName option\n                | Props props -> result.AddProps props\n                | CustomClass customClass -> result.AddClass customClass\n                | Modifiers modifiers -> result.AddModifiers modifiers\n\n            GenericOptions.Parse(options, parseOptions).ToReactElement(ol, children)\n","namespace Fulma\n\nopen Fable.React\nopen Fable.React.Props\n\nmodule Reflection =\n\n    open Microsoft.FSharp.Reflection\n    open System\n\n    let getCaseName (case : 'T) =\n#if FABLE_COMPILER\n        Fable.Core.Reflection.getCaseName case\n#else\n        // Get UnionCaseInfo value from the F# reflection tools\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\n        caseInfo.GetCustomAttributes()\n        |> Seq.tryPick (function\n                        | :? CompiledNameAttribute as att -> Some att.CompiledName\n                        | _ -> None)\n        |> Option.defaultWith (fun () -> caseInfo.Name)\n#endif\n\n    let getCaseTag (case : 'T) =\n#if FABLE_COMPILER\n        Fable.Core.Reflection.getCaseTag case\n#else\n        let (caseInfo, _args) = FSharpValue.GetUnionFields(case, typeof<'T>)\n        caseInfo.Tag\n#endif\n\n[<RequireQualifiedAccess>]\ntype Screen =\n    | All\n    | [<CompiledName(\"desktop\")>] Desktop\n    | [<CompiledName(\"tablet\")>] Tablet\n    | [<CompiledName(\"mobile\")>] Mobile\n    | [<CompiledName(\"widescreen\")>] WideScreen\n    | [<CompiledName(\"touch\")>] Touch\n    | [<CompiledName(\"fullhd\")>] FullHD\n\n    static member ToString (screen : Screen) =\n        match screen with\n        | All -> \"\"\n        | Desktop\n        | Tablet\n        | Mobile\n        | WideScreen\n        | Touch\n        | FullHD -> \"-\" + Reflection.getCaseName screen\n\n[<AutoOpen>]\nmodule Color =\n\n    type IColor =\n        | [<CompiledName(\"is-black\")>] IsBlack\n        | [<CompiledName(\"is-dark\")>] IsDark\n        | [<CompiledName(\"is-light\")>] IsLight\n        | [<CompiledName(\"is-white\")>] IsWhite\n        | [<CompiledName(\"is-primary\")>] IsPrimary\n        | [<CompiledName(\"is-info\")>] IsInfo\n        | [<CompiledName(\"is-success\")>] IsSuccess\n        | [<CompiledName(\"is-warning\")>] IsWarning\n        | [<CompiledName(\"is-danger\")>] IsDanger\n        | [<CompiledName(\"is-link\")>] IsLink\n        | [<CompiledName(\"is-black-bis\")>] IsBlackBis\n        | [<CompiledName(\"is-black-ter\")>] IsBlackTer\n        | [<CompiledName(\"is-grey-darker\")>] IsGreyDarker\n        | [<CompiledName(\"is-grey-dark\")>] IsGreyDark\n        | [<CompiledName(\"is-grey\")>] IsGrey\n        | [<CompiledName(\"is-grey-light\")>] IsGreyLight\n        | [<CompiledName(\"is-grey-lighter\")>] IsGreyLighter\n        | [<CompiledName(\"is-white-ter\")>] IsWhiteTer\n        | [<CompiledName(\"is-white-bis\")>] IsWhiteBis\n        /// Allow you to specify a custom color. The color will be prefixed by \"is-\"\n        | IsCustomColor of string\n        /// Allow you to specify a NoColor case.\n        | NoColor\n\n    let ofColor level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"is-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> Reflection.getCaseName level\n\n[<AutoOpen>]\nmodule Size =\n\n    type ISize =\n        | [<CompiledName(\"is-small\")>] IsSmall\n        | [<CompiledName(\"is-medium\")>] IsMedium\n        | [<CompiledName(\"is-large\")>] IsLarge\n\n    let inline ofSize size =\n        Reflection.getCaseName size\n\n[<RequireQualifiedAccess>]\nmodule TextSize =\n    type Option =\n        | Is1\n        | Is2\n        | Is3\n        | Is4\n        | Is5\n        | Is6\n        | Is7\n\n        static member ToString (x: Option) =\n            Reflection.getCaseTag x + 1 |> string\n\n    let inline generic screen size =\n        \"is-size-\" + Option.ToString size + Screen.ToString screen\n\n    let inline only screen size =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-size-\" + Option.ToString size + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-size-xxx-only`.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule TextAlignment =\n\n    type Option =\n        /// Add `has-text-centered`\n        | [<CompiledName(\"has-text-centered\")>] Centered\n        /// Add `has-text-justified`\n        | [<CompiledName(\"has-text-justified\")>] Justified\n        /// Add `has-text-left`\n        | [<CompiledName(\"has-text-left\")>] Left\n        /// Add `has-text-right`\n        | [<CompiledName(\"has-text-right\")>] Right\n\n        static member inline ToString opt =\n            Reflection.getCaseName opt\n\n    let inline generic screen alignment =\n        Option.ToString alignment + Screen.ToString screen\n\n    let inline only screen alignment =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            Option.ToString alignment + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-size-xxx-only`.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule TextWeight =\n\n    type Option =\n        /// Add `has-text-weight-light`\n        | [<CompiledName(\"has-text-weight-light\")>] Light\n        /// Add `has-text-weight-normal`\n        | [<CompiledName(\"has-text-weight-normal\")>] Normal\n        /// Add `has-text-weight-semi-bold`\n        | [<CompiledName(\"has-text-weight-semi-bold\")>] SemiBold\n        /// Add `has-text-weight-bold`\n        | [<CompiledName(\"has-text-weight-bold\")>] Bold\n\n    let inline internal ofOption opt =\n        Reflection.getCaseName opt\n\n[<RequireQualifiedAccess>]\nmodule TextTransform =\n\n    type Option =\n        /// Add `is-capitalized`\n        | [<CompiledName(\"is-capitalized\")>] Capitalized\n        /// Add `is-lowercase`\n        | [<CompiledName(\"is-lowercase\")>] LowerCase\n        /// Add `is-uppercase`\n        | [<CompiledName(\"is-uppercase\")>] UpperCase\n        /// Add `is-italic`\n        | [<CompiledName(\"is-italic\")>] Italic\n\n        static member inline toClass opt =\n            Reflection.getCaseName opt\n\n[<RequireQualifiedAccess>]\nmodule Display =\n\n    type Option =\n        | [<CompiledName(\"block\")>] Block\n        | [<CompiledName(\"flex\")>] Flex\n        | [<CompiledName(\"inline\")>] Inline\n        | [<CompiledName(\"inline-block\")>] InlineBlock\n        | [<CompiledName(\"inline-flex\")>] InlineFlex\n\n        static member inline toClass opt =\n            Reflection.getCaseName opt\n\n    let internal toDisplayClass screen display =\n        let display = Option.toClass display\n        let screen = Screen.ToString screen\n\n        \"is-\" + display + screen\n\n    let internal toDisplayOnlyClass screen display =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            let display = Option.toClass display\n            let screen = Screen.ToString screen\n            \"is-\" + display + screen + \"-only\"\n\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support display only.\" + string x)\n            \"\"\n\n[<RequireQualifiedAccess>]\nmodule Modifier =\n    let internal ofBackground level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"has-background-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> \"has-background-\" + (Reflection.getCaseName level).[3..]\n\n    let internal ofText level =\n        match level with\n        | NoColor -> \"\"\n        | IsCustomColor color -> \"has-text-\" + color\n        | IsBlack\n        | IsDark\n        | IsLight\n        | IsWhite\n        | IsPrimary\n        | IsInfo\n        | IsSuccess\n        | IsWarning\n        | IsDanger\n        | IsLink\n        | IsBlackBis\n        | IsBlackTer\n        | IsGreyDarker\n        | IsGreyDark\n        | IsGrey\n        | IsGreyLight\n        | IsGreyLighter\n        | IsWhiteTer\n        | IsWhiteBis -> \"has-text-\" + (Reflection.getCaseName level).[3..]\n\n    let internal ofInvisible screen =\n        \"is-invisible\" + Screen.ToString screen\n\n    let internal ofHidden screen =\n        \"is-hidden\" + Screen.ToString screen\n\n    let internal ofInvisibleOnly screen =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-invisible\" + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-invisible-xxx-only`.\" + string x)\n            \"\"\n\n    let internal ofHiddenOnly screen =\n        match screen with\n        | Screen.Tablet\n        | Screen.Desktop\n        | Screen.WideScreen ->\n            \"is-hidden\" + Screen.ToString screen + \"-only\"\n        | x ->\n            Fable.Core.JS.console.warn(\"Screen `%s` does not support `is-hidden-xxx-only`.\" + string x)\n            \"\"\n\n    type IModifier =\n        | BackgroundColor of IColor\n        | TextColor of IColor\n        | TextWeight of TextWeight.Option\n        | TextSize of Screen * TextSize.Option\n        | TextSizeOnly of Screen * TextSize.Option\n        | TextAlignment of Screen * TextAlignment.Option\n        | TextAlignmentOnly of Screen * TextAlignment.Option\n        | TextTransform of TextTransform.Option\n        | Display of Screen * Display.Option\n        | DisplayOnly of Screen * Display.Option\n        | [<CompiledName(\"is-clearfix\")>] IsClearfix\n        | [<CompiledName(\"is-pulled-left\")>] IsPulledLeft\n        | [<CompiledName(\"is-pulled-right\")>] IsPulledRight\n        | [<CompiledName(\"is-marginless\")>] IsMarginless\n        | [<CompiledName(\"is-paddingless\")>] IsPaddingless\n        | [<CompiledName(\"is-overlay\")>] IsOverlay\n        | [<CompiledName(\"is-clipped\")>] IsClipped\n        | [<CompiledName(\"is-radiusless\")>] IsRadiusless\n        | [<CompiledName(\"is-shadowless\")>] IsShadowless\n        | [<CompiledName(\"is-unselectable\")>] IsUnselectable\n        | IsInvisible of Screen * bool\n        | IsHidden of Screen * bool\n        | IsInvisibleOnly of Screen * bool\n        | IsHiddenOnly of Screen * bool\n        | IsSrOnly\n        | IsScreenReaderOnly\n\n    let parseModifiers options =\n        let parseOptions result option =\n            match option with\n            | BackgroundColor color             -> (ofBackground color)::result\n            | TextColor color                   -> (ofText color)::result\n            | TextWeight textWeight             -> (TextWeight.ofOption textWeight)::result\n            | TextSize (screen, size)           -> (TextSize.generic screen size)::result\n            | TextSizeOnly (screen, size)       -> (TextSize.only screen size)::result\n            | TextAlignment (screen, size)      -> (TextAlignment.generic screen size)::result\n            | TextAlignmentOnly (screen, size)  -> (TextAlignment.only screen size)::result\n            | TextTransform transform           -> (TextTransform.Option.toClass transform)::result\n            | Display (screen, display)         -> (Display.toDisplayClass screen display)::result\n            | DisplayOnly (screen, display)     -> (Display.toDisplayOnlyClass screen display)::result\n            | IsInvisible (screen, b)           -> if b then (ofInvisible screen)::result else result\n            | IsInvisibleOnly (screen, b)       -> if b then (ofInvisibleOnly screen)::result else result\n            | IsHidden (screen, b)              -> if b then (ofHidden screen)::result else result\n            | IsHiddenOnly (screen, b)          -> if b then (ofHiddenOnly screen)::result else result\n            | IsSrOnly\n            | IsScreenReaderOnly -> \"is-sr-only\"::result\n            | IsClearfix\n            | IsPulledLeft\n            | IsPulledRight\n            | IsMarginless\n            | IsPaddingless\n            | IsOverlay\n            | IsClipped\n            | IsRadiusless\n            | IsShadowless\n            | IsUnselectable -> (Reflection.getCaseName option)::result\n\n        options |> List.fold parseOptions []\n\n[<AutoOpen>]\nmodule Common =\n    type GenericOption =\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    type GenericOptions =\n        { Props : IHTMLProp list\n          Classes : string list }\n\n        static member Empty =\n            { Props = []; Classes = [] }\n\n        static member Parse(options, parser, ?baseClass, ?baseProps) =\n            let result = options |> List.fold parser GenericOptions.Empty\n\n            let result =\n                match baseClass with\n                | Some baseClass -> result.AddClass(baseClass)\n                | None -> result\n\n            match baseProps with\n            | Some baseProps -> result.AddProps(baseProps)\n            | None -> result\n\n        member this.AddProp(prop : IHTMLProp) =\n            { this with Props = prop::this.Props }\n\n        member this.AddProps(props : IHTMLProp list) =\n            { this with Props = props@this.Props }\n\n        member this.AddClass(cl: string) =\n            { this with Classes = cl::this.Classes }\n\n        member this.RemoveClass(cl: string) =\n            let classes =\n                this.Classes\n                |> List.filter (fun cls ->\n                    cls <> cl\n                )\n            { this with Classes = classes }\n\n        member this.AddCaseName(case: 'T) =\n            Reflection.getCaseName case |> this.AddClass\n\n        member this.AddModifiers(modifiers) =\n            { this with Classes = (modifiers |> Modifier.parseModifiers) @ this.Classes }\n\n        /// Conver to standard element\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement list -> ReactElement, ?children): ReactElement =\n            let children = defaultArg children []\n            // TODO: Remove empty classes?\n            let classes = String.concat \" \" this.Classes |> ClassName :> IHTMLProp\n            el (classes::this.Props) children\n\n        /// Convert to self closing element\n        member this.ToReactElement(el : IHTMLProp list -> ReactElement): ReactElement =\n            // TODO: Remove empty classes?\n            let classes = String.concat \" \" this.Classes |> ClassName :> IHTMLProp\n            el (classes::this.Props)\n\n    let parseOptions (result : GenericOptions) option =\n        match option with\n        | Props props -> result.AddProps props\n        | CustomClass customClass -> result.AddClass customClass\n        | Modifiers modifiers -> result.AddModifiers modifiers\n\n    module Helpers =\n\n        [<System.Obsolete(\"Use GenericOptions.Parse. This build an abstraction layer usable by all the components and helps reduce the bundle size\")>]\n        let classes std (options : string option list) (booleans: (string * bool) list) =\n            let std = (std, options) ||> List.fold (fun complete option ->\n                match option with\n                | Some name -> complete + \" \" + name\n                | None -> complete )\n            (std, booleans) ||> List.fold (fun complete (name, flag) ->\n                if flag then complete + \" \" + name else complete)\n            |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Text =\n    open Fable.React\n\n    let p (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(p, children)\n\n    let div (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(div, children)\n\n    let span (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions).ToReactElement(span, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Help =\n\n    type Option =\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Color of IColor\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <p class=\"help\"></p>\n    let help (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Color color -> ofColor color |> result.AddClass\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"help\").ToReactElement(p, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Container =\n\n    type Option =\n        /// Add `is-fluid` class\n        | [<CompiledName(\"is-fluid\")>] IsFluid\n        /// Add `is-widescreen` class\n        | [<CompiledName(\"is-widescreen\")>] IsWideScreen\n        /// Add `is-fullhd` class\n        | [<CompiledName(\"is-fullhd\")>] IsFullHD\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <div class=\"container\"></div>\n    let container (options: Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsFluid\n            | IsWideScreen\n            | IsFullHD -> result.AddCaseName option\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"container\").ToReactElement(div, children)\n","[<AutoOpen>]\r\nmodule ViewHelpers\r\n\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nopen Fulma\r\n\r\nmodule KeyCode =\r\n    let enter = 13.\r\n    let upArrow = 38.\r\n    let downArrow =  40.\r\n\r\n let onKeyDown keyCode action =\r\n    OnKeyDown (fun (ev: Browser.Types.KeyboardEvent) ->\r\n        if ev.keyCode = keyCode then\r\n            ev.preventDefault()\r\n            action ev)\r\n\r\nlet btn txt onClick = \r\n    Button.button\r\n        [ Button.IsFullWidth\r\n          Button.Color IsPrimary\r\n          Button.OnClick onClick ] \r\n        [ str txt ]\r\n\r\nlet lbl txt = Label.label [] [ str txt ]\r\n\r\nlet intersperse sep ls =\r\n    List.foldBack (fun x -> function\r\n        | [] -> [x]\r\n        | xs -> x::sep::xs) ls []\r\n\r\nlet safeComponents =\r\n    let components =\r\n        [ \"Saturn\", \"https://saturnframework.github.io/docs/\"\r\n          \"Fable\", \"http://fable.io\"\r\n          \"Elmish\", \"https://fable-elmish.github.io/\"\r\n          \"Fulma\", \"https://mangelmaxime.github.io/Fulma\" ]\r\n        |> List.map (fun (desc,link) -> a [ Href link ] [ str desc ] )\r\n        |> intersperse (str \", \")\r\n        |> span []\r\n\r\n    p []\r\n        [ strong [] [ a [ Href \"https://safe-stack.github.io/\" ] [ str \"SAFE Template\" ] ]\r\n          str \" powered by: \"\r\n          components ]\r\n\r\nmodule Result =\r\n    let defaultValue v r = match r with Ok x -> x | Error _ -> v","namespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Encode =\n\n    open System.Collections.Generic\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    [<Emit(\"Array.from($0)\")>]\n    let private arrayFrom(x: JsonValue seq): JsonValue = jsNative\n\n    ///**Description**\n    /// Encode a string\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `string`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline string (value : string) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a GUID\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `System.Guid`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let guid (value : System.Guid) : JsonValue =\n        box (value.ToString())\n\n    ///**Description**\n    /// Encode an int\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `int`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline int (value : int) : JsonValue =\n        box value\n\n    let inline uint32 (value : uint32) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `float`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline float (value : float) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Decimal. (Currently decimal gets converted to float.)\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `decimal`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let decimal (value : decimal) : JsonValue =\n        value.ToString() |> string\n\n    ///**Description**\n    /// Encode null\n    ///\n    ///**Parameters**\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let nil : JsonValue =\n        box null\n\n    ///**Description**\n    /// Encode a bool\n    ///**Parameters**\n    ///  * `value` - parameter of type `bool`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline bool (value : bool) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode an object\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `(string * Value) list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let object (values : (string * JsonValue) seq) : JsonValue =\n        let o = obj()\n        for (key, value) in values do\n            o?(key) <- value\n        box o\n\n    ///**Description**\n    /// Encode an array\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value array`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline array (values : JsonValue array) : JsonValue =\n        box values\n\n    ///**Description**\n    /// Encode a list\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let list (values : JsonValue list) : JsonValue =\n        // Don't use List.toArray as it may create a typed array\n        arrayFrom values\n\n    let seq (values : JsonValue seq) : JsonValue =\n        arrayFrom values\n\n    ///**Description**\n    /// Encode a dictionary\n    ///**Parameters**\n    ///  * `values` - parameter of type `Map<string, Value>`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let dict (values : Map<string, JsonValue>) : JsonValue =\n        values\n        |> Map.toList\n        |> object\n\n    let bigint (value : bigint) : JsonValue =\n        box (value.ToString())\n\n    let datetimeOffset (value : System.DateTimeOffset) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    /// **Description**\n    /// Encode a timespan\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.TimeSpan`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let timespan (value : System.TimeSpan) : JsonValue =\n        value.ToString() |> string\n\n    let int64 (value : int64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let uint64 (value : uint64) : JsonValue =\n        box (value.ToString())\n\n    let tuple2\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (v1, v2) : JsonValue =\n        box [| enc1 v1\n               enc2 v2 |]\n\n    let tuple3\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (v1, v2, v3) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3 |]\n\n    let tuple4\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (v1, v2, v3, v4) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4 |]\n\n    let tuple5\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (v1, v2, v3, v4, v5) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5 |]\n\n    let tuple6\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (v1, v2, v3, v4, v5, v6) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6 |]\n\n    let tuple7\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (v1, v2, v3, v4, v5, v6, v7) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7 |]\n\n    let tuple8\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (enc8 : Encoder<'T8>)\n            (v1, v2, v3, v4, v5, v6, v7, v8) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7\n               enc8 v8 |]\n\n    /// **Description**\n    ///\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.DateTime`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let datetime (value : System.DateTime) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    let toString (space: int) (value: JsonValue) : string =\n        JS.JSON.stringify(value, !!null, space)\n\n    ///**Description**\n    /// Encode an option\n    ///**Parameters**\n    ///  * `encoder` - parameter of type `'a -> Value`\n    ///\n    ///**Output Type**\n    ///  * `'a option -> Value`\n    ///\n    ///**Exceptions**\n    ///\n    let option (encoder : 'a -> JsonValue) =\n        Option.map encoder >> Option.defaultWith (fun _ -> nil)\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n    open Fable.Core.DynamicExtensions\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxEncoder (d: Encoder<'T>): BoxedEncoder =\n        !!d\n\n    let inline unboxEncoder (d: BoxedEncoder): Encoder<'T> =\n        !!d\n\n    let rec private autoEncodeRecordsAndUnions extra (isCamelCase : bool) (t: System.Type) : BoxedEncoder =\n        // Add the encoder to extra in case one of the fields is recursive\n        let encoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName encoderRef\n        let encoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let setters =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let targetKey =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        let encode = autoEncoder extra isCamelCase fi.PropertyType\n                        fun (source: obj) (target: JsonValue) ->\n                            let value = FSharpValue.GetRecordField(source, fi)\n                            if not(isNull value) then // Discard null fields\n                                target.[targetKey] <- encode value\n                            target)\n                fun (source: obj) ->\n                    (JsonValue(), setters) ||> Seq.fold (fun target set -> set source target)\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun (value: obj) ->\n                    let info, fields = FSharpValue.GetUnionFields(value, t, allowAccessToPrivateRepresentation=true)\n                    match fields.Length with\n                    | 0 -> string info.Name\n                    | len ->\n                        let fieldTypes = info.GetFields()\n                        let target = Array.zeroCreate<JsonValue> (len + 1)\n                        target.[0] <- string info.Name\n                        for i = 1 to len do\n                            let encode = autoEncoder extra isCamelCase fieldTypes.[i-1].PropertyType\n                            target.[i] <- encode fields.[i-1]\n                        array target\n            else\n                // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                // when the return type is a function too, so it doesn't fail immediately\n                sprintf \"Cannot generate auto encoder for %s. Please pass an extra encoder.\" t.FullName\n                |> failwith\n        encoderRef := encoder\n        encoder\n\n    and private autoEncoder (extra: Map<string, ref<BoxedEncoder>>) isCamelCase (t: System.Type) : BoxedEncoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some encoderRef -> fun v -> encoderRef.contents v\n      | None ->\n        if t.IsArray then\n            let encoder = t.GetElementType() |> autoEncoder extra isCamelCase\n            fun (value: obj) ->\n                value :?> obj seq |> Seq.map encoder |> seq\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let encoders =\n                    FSharpType.GetTupleElements(t)\n                    |> Array.map (autoEncoder extra isCamelCase)\n                fun (value: obj) ->\n                    FSharpValue.GetTupleFields(value)\n                    |> Seq.mapi (fun i x -> encoders.[i] x) |> seq\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    // Evaluate lazily so we don't need to generate the encoder for null values\n                    let encoder = lazy\n                                    t.GenericTypeArguments.[0]\n                                    |> autoEncoder extra isCamelCase\n                                    |> option\n                                    |> boxEncoder\n                    boxEncoder(fun (value: obj) ->\n                        if isNull value then nil\n                        else encoder.Value value)\n                elif fullname = typedefof<obj list>.FullName\n                    || fullname = typedefof<Set<string>>.FullName then\n                    let encoder = t.GenericTypeArguments.[0] |> autoEncoder extra isCamelCase\n                    fun (value: obj) ->\n                        value :?> obj seq |> Seq.map encoder |> seq\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyType = t.GenericTypeArguments.[0]\n                    let valueEncoder = t.GenericTypeArguments.[1] |> autoEncoder extra isCamelCase\n                    if keyType.FullName = typeof<string>.FullName\n                        || keyType.FullName = typeof<System.Guid>.FullName then\n                        fun value ->\n                            // Fable compiles Guids as strings so this works, but maybe we should make the conversion explicit\n                            // (see dotnet version) in case Fable implementation of Guids change\n                            (JsonValue(), value :?> Map<string, obj>)\n                            ||> Seq.fold (fun target (KeyValue(k,v)) ->\n                                target.[k] <- valueEncoder v\n                                target)\n                    else\n                        let keyEncoder = keyType |> autoEncoder extra isCamelCase\n                        fun value ->\n                            value :?> Map<string, obj> |> Seq.map (fun (KeyValue(k,v)) ->\n                                array [|keyEncoder k; valueEncoder v|]) |> seq\n                else\n                    autoEncodeRecordsAndUnions extra isCamelCase t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxEncoder bool\n            elif fullname = typeof<string>.FullName then\n                boxEncoder string\n            elif fullname = typeof<int>.FullName then\n                boxEncoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxEncoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxEncoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra encoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxEncoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxEncoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxEncoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxEncoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxEncoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxEncoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxEncoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxEncoder guid\n            elif fullname = typeof<obj>.FullName then\n                boxEncoder id\n            else\n                autoEncodeRecordsAndUnions extra isCamelCase t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (enc,_) -> ref enc) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateEncoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedEncoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoEncoder (makeExtra extra) isCamelCase t) |> unboxEncoder\n\n        static member generateEncoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoEncoder (makeExtra extra) isCamelCase |> unboxEncoder\n\n        static member toString(space : int, value : 'T, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>) : string =\n            let encoder = Auto.generateEncoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            encoder value |> toString space\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    [<System.Obsolete(\"Please use toString instead\")>]\n    let encode (space: int) (value: JsonValue) : string = toString space value\n","/// The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses.\r\n/// It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.\r\nmodule Fetch\r\n\r\n#nowarn \"1182\" // Unused values\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Browser.Types\r\n\r\n[<AutoOpen>]\r\nmodule Types =\r\n\r\n    type Body =\r\n        abstract bodyUsed: bool with get, set\r\n        abstract arrayBuffer: unit -> JS.Promise<JS.ArrayBuffer>\r\n        abstract blob: unit -> JS.Promise<Blob>\r\n        // abstract formData: unit -> JS.Promise<FormData>\r\n        abstract json : unit -> JS.Promise<obj>\r\n        abstract json<'T> : unit -> JS.Promise<'T>\r\n        abstract text : unit -> JS.Promise<string>\r\n\r\n    and Request = //(input: U2<string, Request>, ?init: RequestInit) =\r\n        inherit Body\r\n        abstract ``method`` : string with get\r\n        abstract url: string with get\r\n        abstract headers: Headers with get\r\n        abstract referrer: string with get\r\n        abstract mode: U2<string,RequestMode> with get\r\n        abstract credentials: U2<string,RequestCredentials> with get\r\n        abstract cache: U2<string,RequestCache> with get\r\n        abstract clone: unit -> unit\r\n\r\n    and RequestInit =\r\n        abstract ``method``: string option with get, set\r\n        abstract headers: HeaderInit option with get, set\r\n        abstract body: BodyInit option with get, set\r\n        abstract mode: RequestMode option with get, set\r\n        abstract credentials: RequestCredentials option with get, set\r\n        abstract cache: RequestCache option with get, set\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestContext =\r\n        | Audio | Beacon | Cspreport | Download | Embed | Eventsource | Favicon | Fetch | Font\r\n        | Form | Frame | Hyperlink | Iframe | Image | Imageset | Import | Internal | Location\r\n        | Manifest | Object | Ping | Plugin | Prefetch | Script | Serviceworker | Sharedworker\r\n        | Subresource | Style | Track | Video | Worker | Xmlhttprequest | Xslt\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestMode =\r\n        | [<CompiledName(\"same-origin\")>]Sameorigin | [<CompiledName(\"no-cors\")>]Nocors | Cors\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestCredentials =\r\n        Omit | [<CompiledName(\"same-origin\")>]Sameorigin | Include\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] RequestCache =\r\n        | Default\r\n        | [<CompiledName(\"no-store\")>]Nostore\r\n        | Reload\r\n        | [<CompiledName(\"no-cache\")>]Nocache\r\n        | [<CompiledName(\"force-cache\")>]Forcecache\r\n        | [<CompiledName(\"only-if-cached\")>]Onlyifcached\r\n\r\n    and Headers =\r\n        abstract append : string * string -> unit\r\n        abstract delete : string -> unit\r\n        abstract get : string -> string\r\n        abstract getAll : string -> string[]\r\n        abstract has : string -> bool\r\n        abstract set : string * string -> unit\r\n\r\n        /// Specifying which web sites can participate in cross-origin resource sharing\r\n        [<Emit(\"$0.get('Access-Control-Allow-Origin')\")>] abstract AccessControlAllowOrigin: string option\r\n\r\n        /// Specifies which patch document formats this server supports\r\n        [<Emit(\"$0.get('Accept-Patch')\")>] abstract AcceptPatch: string option\r\n\r\n        /// What partial content range types this server supports via byte serving\r\n        [<Emit(\"$0.get('Accept-Ranges')\")>] abstract AcceptRanges: string option\r\n\r\n        /// The age the object has been in a proxy cache in seconds\r\n        [<Emit(\"$0.get('Age')\")>] abstract Age: string option\r\n\r\n        /// Valid actions for a specified resource. To be used for a 405 Method not allowed\r\n        [<Emit(\"$0.get('Allow')\")>] abstract Allow: string option\r\n\r\n        /// A server uses \"Alt-Svc\" header (meaning Alternative Services) to indicate that its resources can also be accessed at a different network location (host or port) or using a different protocol\r\n        [<Emit(\"$0.get('Alt-Svc')\")>] abstract AltSvc: string option\r\n\r\n        /// Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds\r\n        [<Emit(\"$0.get('Cache-Control')\")>] abstract CacheControl: string option\r\n\r\n        /// Control options for the current connection and list of hop-by-hop response fields\r\n        [<Emit(\"$0.get('Connection')\")>] abstract Connection: string option\r\n\r\n        /// An opportunity to raise a \"File Download\" dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.\r\n        [<Emit(\"$0.get('Content-Disposition')\")>] abstract ContentDisposition: string option\r\n\r\n        /// The type of encoding used on the data\r\n        [<Emit(\"$0.get('Content-Encoding')\")>] abstract ContentEncoding: string option\r\n\r\n        /// The natural language or languages of the intended audience for the enclosed content\r\n        [<Emit(\"$0.get('Content-Language')\")>] abstract ContentLanguage: string option\r\n\r\n        /// The length of the response body in octets (8-bit bytes)\r\n        [<Emit(\"$0.get('Content-Length')\")>] abstract ContentLength: string option\r\n\r\n        /// An alternate location for the returned data\r\n        [<Emit(\"$0.get('Content-Location')\")>] abstract ContentLocation: string option\r\n\r\n        /// A Base64-encoded binary MD5 sum of the content of the response\r\n        [<Emit(\"$0.get('Content-MD5')\")>] abstract ContentMD5: string option\r\n\r\n        /// Where in a full body message this partial message belongs\r\n        [<Emit(\"$0.get('Content-Range'')\")>] abstract ContentRange: string option\r\n\r\n        /// The MIME type of this content\r\n        [<Emit(\"$0.get('Content-Type')\")>] abstract ContentType: string option\r\n\r\n        /// The date and time that the message was sent (in \"HTTP-date\" format as defined by RFC 7231)\r\n        [<Emit(\"$0.get('Date')\")>] abstract Date: string option\r\n\r\n        /// An identifier for a specific version of a resource, often a message digest\r\n        [<Emit(\"$0.get('ETag')\")>] abstract ETag: string option\r\n\r\n        /// Gives the date/time after which the response is considered stale (in \"HTTP-date\" format as defined by RFC 7231)\r\n        [<Emit(\"$0.get('Expires')\")>] abstract Expires: string option\r\n\r\n        /// The last modified date for the requested object (in \"HTTP-date\" format as defined by RFC 7231)\r\n        [<Emit(\"$0.get('Last-Modified')\")>] abstract LastModified: string option\r\n\r\n        /// Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988\r\n        [<Emit(\"$0.get('Link')\")>] abstract Link: string option\r\n\r\n        /// Used in redirection, or when a new resource has been created.\r\n        [<Emit(\"$0.get('Location')\")>] abstract Location: string option\r\n\r\n        /// This field is supposed to set P3P policy, in the form of P3P:CP=\"your_compact_policy\".\r\n        [<Emit(\"$0.get('P3P')\")>] abstract P3P: string option\r\n\r\n        /// Implementation-specific fields that may have various effects anywhere along the request-response chain.\r\n        [<Emit(\"$0.get('Pragma')\")>] abstract Pragma: string option\r\n\r\n        /// Request authentication to access the proxy.\r\n        [<Emit(\"$0.get('Proxy-Authenticate')\")>] abstract ProxyAuthenticate: string option\r\n\r\n        /// HTTP Public Key Pinning, announces hash of website's authentic TLS certificate\r\n        [<Emit(\"$0.get('Public-Key-Pins')\")>] abstract PublicKeyPins: string option\r\n\r\n        /// Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.\r\n        [<Emit(\"$0.get('Refresh')\")>] abstract Refresh: string option\r\n\r\n        /// If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.\r\n        [<Emit(\"$0.get('Retry-After')\")>] abstract RetryAfter: string option\r\n\r\n        /// A name for the server\r\n        [<Emit(\"$0.get('Server')\")>] abstract Server: string option\r\n\r\n        /// An HTTP cookie\r\n        [<Emit(\"$0.get('Set-Cookie')\")>] abstract SetCookie: string option\r\n\r\n        /// CGI header field specifying the status of the HTTP response. Normal HTTP responses use a separate \"Status-Line\" instead, defined by RFC 7230\r\n        [<Emit(\"$0.get('Status')\")>] abstract Status: string option\r\n\r\n        /// A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.\r\n        [<Emit(\"$0.get('Strict-Transport-Security')\")>] abstract StrictTransportSecurity: string option\r\n\r\n        /// The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer coding.\r\n        [<Emit(\"$0.get('Trailer')\")>] abstract Trailer: string option\r\n\r\n        /// The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.\r\n        [<Emit(\"$0.get('Transfer-Encoding')\")>] abstract TransferEncoding: string option\r\n\r\n        /// Tracking Status Value, value suggested to be sent in response to a DNT(do-not-track)\r\n        [<Emit(\"$0.get('TSV')\")>] abstract TSV: string option\r\n\r\n        /// Ask the client to upgrade to another protocol.\r\n        [<Emit(\"$0.get('Upgrade')\")>] abstract Upgrade: string option\r\n\r\n        /// Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.\r\n        [<Emit(\"$0.get('Vary')\")>] abstract Vary: string option\r\n\r\n        /// Informs the client of proxies through which the response was sent.\r\n        [<Emit(\"$0.get('Via')\")>] abstract Via: string option\r\n\r\n        /// A general warning about possible problems with the entity body.\r\n        [<Emit(\"$0.get('Warning')\")>] abstract Warning: string option\r\n\r\n        /// Indicates the authentication scheme that should be used to access the requested entity.\r\n        [<Emit(\"$0.get('WWW-Authenticate')\")>] abstract WWWAuthenticate: string option\r\n\r\n        /// Clickjacking protection: deny - no rendering within a frame, sameorigin - no rendering if origin mismatch, allow-from - allow from specified location, allowall - non-standard, allow from any location\r\n        [<Emit(\"$0.get('X-Frame-Options')\")>] abstract XFrameOptions: string option\r\n\r\n        /// Cross-site scripting (XSS) filter\r\n        [<Emit(\"$0.get('X-XSS-Protection')\")>] abstract XXSSProtection: string option\r\n\r\n        /// Content Security Policy definition.\r\n        [<Emit(\"$0.get('Content-Security-Policy')\")>] abstract ContentSecurityPolicy: string option\r\n\r\n        /// The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type. This also applies to Google Chrome, when downloading extensions\r\n        [<Emit(\"$0.get('X-Content-Type-Options')\")>] abstract XContentTypeOptions: string option\r\n\r\n        /// Specifies the technology (e.g. ASP.NET, PHP, JBoss) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)\r\n        [<Emit(\"$0.get('X-Powered-By')\")>] abstract XPoweredBy: string option\r\n\r\n        /// Recommends the preferred rendering engine (often a backward-compatibility mode) to use to display the content. Also used to activate Chrome Frame in Internet Explorer.\r\n        [<Emit(\"$0.get('X-UA-Compatible')\")>] abstract XUACompatible: string option\r\n\r\n        /// Provide the duration of the audio or video in seconds; only supported by Gecko browsers\r\n        [<Emit(\"$0.get('X-Content-Duration')\")>] abstract XContentDuration: string option\r\n\r\n        /// Tells a server which (presumably in the middle of a HTTP -> HTTPS migration) hosts mixed content that the client would prefer redirection to HTTPS and can handle Content-Security-Policy: upgrade-insecure-requests\r\n        [<Emit(\"$0.get('Upgrade-Insecure-Requests')\")>] abstract UpgradeInsecureRequests: string option\r\n\r\n        /// Correlates HTTP requests between a client and server.\r\n        [<Emit(\"$0.get('X-Request-ID')\")>] abstract XRequestID: string option\r\n\r\n        /// Correlates HTTP requests between a client and server.\r\n        [<Emit(\"$0.get('X-Correlation-ID')\")>] abstract XCorrelationID: string option\r\n\r\n\r\n    and Response = //(?body: BodyInit, ?init: ResponseInit) =\r\n        inherit Body\r\n\r\n        /// Verifies that the fetch was successful\r\n        [<Emit(\"$0.ok\")>] abstract Ok: bool\r\n\r\n        /// Returns the HTTP status code\r\n        [<Emit(\"$0.status\")>] abstract Status: int\r\n\r\n        /// Returns the HTTP status message\r\n        [<Emit(\"$0.statusText\")>] abstract StatusText: string\r\n\r\n        /// Returns the response URL\r\n        [<Emit(\"$0.url\")>] abstract Url: string\r\n\r\n        /// Returns the headers objct\r\n        [<Emit(\"$0.headers\")>] abstract Headers : Headers\r\n\r\n    and [<StringEnum; RequireQualifiedAccess>] ResponseType =\r\n        | Basic | Cors | Default | Error | Opaque\r\n\r\n    and ResponseInit =\r\n        abstract status: float with get, set\r\n        abstract statusText: string option with get, set\r\n        abstract headers: HeaderInit option with get, set\r\n\r\n    and HeaderInit =\r\n        U2<Headers, string[]>\r\n\r\n    and BodyInit =\r\n        U2<Blob, string> // U3<Blob, FormData, string>\r\n\r\n    [<Erase; RequireQualifiedAccess; NoComparison>]\r\n    type RequestInfo =\r\n        /// Uses a simple Url as string to create the request info\r\n        | Url of string\r\n        /// Uses a Request object as request info\r\n        | Req of Request\r\n\r\n    type [<Erase>] GlobalFetch =\r\n        [<Global>]static member fetch (req: RequestInfo, ?init: RequestInit) = jsNative :JS.Promise<Response>\r\n\r\n    [<StringEnum; RequireQualifiedAccess>]\r\n    type HttpMethod =\r\n        | [<CompiledName(\"CONNECT\")>] CONNECT\r\n        | [<CompiledName(\"DELETE\")>] DELETE\r\n        | [<CompiledName(\"GET\")>] GET\r\n        | [<CompiledName(\"HEAD\")>] HEAD\r\n        | [<CompiledName(\"OPTIONS\")>] OPTIONS\r\n        | [<CompiledName(\"PATCH\")>] PATCH\r\n        | [<CompiledName(\"POST\")>] POST\r\n        | [<CompiledName(\"PUT\")>] PUT\r\n        | [<CompiledName(\"TRACE\")>] TRACE\r\n\r\n    type IHttpRequestHeaders =\r\n        interface end\r\n\r\n    type HttpRequestHeaders =\r\n        | Accept of string\r\n        | [<CompiledName(\"Accept-Charset\")>] AcceptCharset of string\r\n        | [<CompiledName(\"Accept-Encoding\")>] AcceptEncoding of string\r\n        | [<CompiledName(\"Accept-Language\")>] AcceptLanguage of string\r\n        | [<CompiledName(\"Accept-Datetime\")>] AcceptDatetime of string\r\n        | Authorization of string\r\n        | [<CompiledName(\"Cache-Control\")>] CacheControl of string\r\n        | Connection of string\r\n        | Cookie of string\r\n        | [<CompiledName(\"Content-Length\")>] ContentLength of string\r\n        | [<CompiledName(\"Content-MD5\")>] ContentMD5 of string\r\n        | [<CompiledName(\"Content-Type\")>] ContentType of string\r\n        | Date of string\r\n        | Expect of string\r\n        | Forwarded of string\r\n        | From of string\r\n        | Host of string\r\n        | [<CompiledName(\"If-Match\")>] IfMatch of string\r\n        | [<CompiledName(\"If-Modified-Since\")>] IfModifiedSince of string\r\n        | [<CompiledName(\"If-None-Match\")>] IfNoneMatch of string\r\n        | [<CompiledName(\"If-Range\")>] IfRange of string\r\n        | [<CompiledName(\"If-Unmodified-Since\")>] IfUnmodifiedSince of string\r\n        | [<CompiledName(\"Max-Forwards\")>] MaxForwards of int\r\n        | Origin of string\r\n        | Pragma of string\r\n        | [<CompiledName(\"Proxy-Authorization\")>] ProxyAuthorization of string\r\n        | Range of string\r\n        | Referer of string\r\n        | [<CompiledName(\"SOAPAction\")>] SOAPAction of string\r\n        | [<CompiledName(\"TE\")>] TE of string\r\n        | [<CompiledName(\"User-Agent\")>] UserAgent of string\r\n        | Upgrade of string\r\n        | Via of string\r\n        | Warning of string\r\n        | [<CompiledName(\"X-Requested-With\")>] XRequestedWith of string\r\n        | [<CompiledName(\"DNT\")>] DNT of string\r\n        | [<CompiledName(\"X-Forwarded-For\")>] XForwardedFor of string\r\n        | [<CompiledName(\"X-Forwarded-Host\")>] XForwardedHost of string\r\n        | [<CompiledName(\"X-Forwarded-Proto\")>] XForwardedProto of string\r\n        | [<CompiledName(\"Front-End-Https\")>] FrontEndHttps of string\r\n        | [<CompiledName(\"X-Http-Method-Override\")>] XHttpMethodOverride of string\r\n        | [<CompiledName(\"X-ATT-DeviceId\")>] XATTDeviceId of string\r\n        | [<CompiledName(\"X-Wap-Profile\")>] XWapProfile of string\r\n        | [<CompiledName(\"Proxy-Connection\")>] ProxyConnection of string\r\n        | [<CompiledName(\"X-UIDH\")>] XUIDH of string\r\n        | [<CompiledName(\"X-Csrf-Token\")>] XCsrfToken of string\r\n        | [<Erase>] Custom of key:string * value:obj\r\n\r\n    [<NoComparison>]\r\n    type RequestProperties =\r\n        | Method of HttpMethod\r\n        | Headers of IHttpRequestHeaders\r\n        | Body of BodyInit\r\n        | Mode of RequestMode\r\n        | Credentials of RequestCredentials\r\n        | Cache of RequestCache\r\n\r\n\r\nlet inline requestHeaders (headers: HttpRequestHeaders list) =\r\n    RequestProperties.Headers(keyValueList CaseRules.None headers :?> IHttpRequestHeaders)\r\n\r\nlet inline requestProps (props: RequestProperties list) =\r\n    keyValueList CaseRules.LowerFirst props :?> RequestInit\r\n\r\nlet private errorString (response: Response) =\r\n    string response.Status + \" \" + response.StatusText + \" for URL \" + response.Url\r\n\r\n/// Retrieves data from the specified resource. Fails if `response.Ok` evals to false.\r\nlet fetch (url: string) (init: RequestProperties list) : JS.Promise<Response> =\r\n    GlobalFetch.fetch(RequestInfo.Url url, requestProps init)\r\n    |> Promise.map (fun response ->\r\n        if response.Ok\r\n        then response\r\n        else errorString response |> failwith)\r\n\r\nlet tryFetch (url: string) (init: RequestProperties list) : JS.Promise<Result<Response, Exception>> =\r\n    fetch url init |> Promise.result\r\n\r\n// let fetchAs<'T> (url: string) (decoder: Decode.Decoder<'T>) (init: RequestProperties list) : JS.Promise<'T> =\r\n//     GlobalFetch.fetch(RequestInfo.Url url, requestProps init)\r\n//     |> Promise.bind (fun response ->\r\n//         if not response.Ok\r\n//         then errorString response |> failwith\r\n//         else\r\n//             response.text()\r\n//             |> Promise.map (fun res ->\r\n//                 match Decode.fromString decoder res with\r\n//                 | Ok successValue -> successValue\r\n//                 | Error error -> failwith error))\r\n\r\n// let tryFetchAs (url: string) (decoder: Decode.Decoder<'T>) (init: RequestProperties list) : JS.Promise<Result<'T, string>> =\r\n//     GlobalFetch.fetch(RequestInfo.Url url, requestProps init)\r\n//     |> Promise.bind (fun response ->\r\n//         if not response.Ok\r\n//         then errorString response |> Error |> Promise.lift\r\n//         else\r\n//             response.text()\r\n//             |> Promise.map (Decode.fromString decoder))\r\n\r\n// let private sendRecord (url: string) (record:'T) (properties: RequestProperties list) httpMethod : JS.Promise<Response> =\r\n//     let defaultProps =\r\n//         [ RequestProperties.Method httpMethod\r\n//           requestHeaders [ContentType \"application/json\"]\r\n//           RequestProperties.Body !^(Encode.Auto.toString(0, record))]\r\n//     // Append properties after defaultProps to make sure user-defined values\r\n//     // override the default ones if necessary\r\n//     List.append defaultProps properties\r\n//     |> fetch url\r\n\r\n// /// Sends a HTTP post with the record serialized as JSON.\r\n// /// This function already sets the HTTP Method to POST sets the json into the body.\r\n// let postRecord<'T> (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Response> =\r\n//     sendRecord url record properties HttpMethod.POST\r\n\r\n// let tryPostRecord<'T> (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Result<Response, Exception>> =\r\n//     postRecord url record properties |> Promise.result\r\n\r\n// /// Sends a HTTP put with the record serialized as JSON.\r\n// /// This function already sets the HTTP Method to PUT, sets the json into the body.\r\n// let putRecord (url: string) (record:'T) (properties: RequestProperties list): JS.Promise<Response> =\r\n//     sendRecord url record properties HttpMethod.PUT\r\n\r\n// let tryPutRecord (url: string) (record:'T) (properties: RequestProperties list): JS.Promise<Result<Response, Exception>> =\r\n//     putRecord url record properties |> Promise.result\r\n\r\n// /// Sends a HTTP patch with the record serialized as JSON.\r\n// /// This function already sets the HTTP Method to PATCH sets the json into the body.\r\n// let patchRecord (url: string) (record:'T) (properties: RequestProperties list) : JS.Promise<Response> =\r\n//     sendRecord url record properties HttpMethod.PATCH\r\n\r\n/// Sends a HTTP OPTIONS request.\r\nlet tryOptionsRequest (url:string) : JS.Promise<Result<Response, Exception>> =\r\n    fetch url [RequestProperties.Method HttpMethod.OPTIONS] |> Promise.result","module Thoth.Fetch\n\nopen Fetch\nopen Fable.Core\nopen Thoth.Json\n\nlet internal toJsonBody (value : JsonValue) =\n    #if DEBUG\n    Encode.toString 4 value\n    |> U2.Case2\n    #else\n    Encode.toString 0 value\n    |> U2.Case2\n    #endif\n\ntype Fetch =\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource by applying the provided `decoder`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `decoder` - parameter of type `Decoder<'Response>` - Decoder applied to the server response\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member fetchAs<'Response>(url : string,\n                                     decoder : Decoder<'Response>,\n                                     ?properties : RequestProperties list) =\n        promise {\n            let properties = defaultArg properties []\n            // TODO: Rewrite our own version of `Fetch.fetch` to give better error\n            // ATM, when an error occured we are loosing information like status code, etc.\n            let! response = Fetch.fetch url properties\n            let! body = response.text()\n            return Decode.unsafeFromString decoder body\n        }\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member fetchAs<'Response>(url : string,\n                                     ?properties : RequestProperties list,\n                                     ?isCamelCase : bool,\n                                     ?extra: ExtraCoders,\n                                     [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        let decoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n        Fetch.fetchAs(url, decoder, ?properties = properties)\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource by applying the provided `decoder`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `decoder` - parameter of type `Decoder<'Response>` - Decoder applied to the server response\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryFetchAs<'Response>(url : string,\n                                        decoder : Decoder<'Response>,\n                                        ?properties : RequestProperties list) =\n        promise {\n            let properties = defaultArg properties []\n            // TODO: Rewrite our own version of `Fetch.fetch` to give better error\n            // ATM, when an error occured we are loosing information like status code, etc.\n            let! response = Fetch.fetch url properties\n            let! body = response.text()\n            return Decode.fromString decoder body\n        }\n\n    /// **Description**\n    ///\n    /// Retrieves data from the specified resource.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryFetchAs<'Response>(url : string,\n                                        ?properties : RequestProperties list,\n                                        ?isCamelCase : bool,\n                                        ?extra: ExtraCoders,\n                                        [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        let decoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n        Fetch.tryFetchAs(url, decoder, ?properties = properties)\n\n    /// Alias to `Fetch.fetchAs`\n    static member get<'Response>(url : string,\n                                 decoder : Decoder<'Response>,\n                                 ?properties : RequestProperties list) =\n        Fetch.fetchAs(url, decoder, ?properties = properties)\n\n    /// Alias to `Fetch.tryFetchAs`\n    static member tryGet<'Response>(url : string,\n                                    decoder : Decoder<'Response>,\n                                    ?properties : RequestProperties list) =\n        Fetch.tryFetchAs(url, decoder, ?properties = properties)\n\n    /// Alias to `Fetch.fetchAs`\n    static member get<'Response>(url : string,\n                                 ?properties : RequestProperties list,\n                                 ?isCamelCase : bool,\n                                 ?extra: ExtraCoders,\n                                 [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        Fetch.fetchAs(url, ?properties = properties, ?isCamelCase = isCamelCase, ?extra = extra, ?responseResolver = responseResolver)\n\n    /// Alias to `Fetch.tryFetchAs`\n    static member tryGet<'Response>(url : string,\n                                    ?properties : RequestProperties list,\n                                    ?isCamelCase : bool,\n                                    ?extra: ExtraCoders,\n                                    [<Inject>] ?responseResolver: ITypeResolver<'Response>) =\n        Fetch.tryFetchAs(url, ?properties = properties, ?isCamelCase = isCamelCase, ?extra = extra, ?responseResolver = responseResolver)\n\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue` - JSON\n    ///   * `decoder` - parameter of type `Decoder<'Response>`- Decoder applied to the server response\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member post<'Response>(url : string,\n                                  data : JsonValue,\n                                  decoder : Decoder<'Response>,\n                                  ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member post<'Data, 'Response>(url : string,\n                                         data : 'Data,\n                                         ?properties : RequestProperties list,\n                                         ?isCamelCase : bool,\n                                         ?extra: ExtraCoders,\n                                         [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                         [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPost<'Response>(url : string,\n                                     data : JsonValue,\n                                     decoder : Decoder<'Response>,\n                                     ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **POST** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPost<'Data, 'Response>(url : string,\n                                            data : 'Data,\n                                            ?properties : RequestProperties list,\n                                            ?isCamelCase : bool,\n                                            ?extra: ExtraCoders,\n                                            [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                            [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.POST\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member put<'Response>(url : string,\n                                 data : JsonValue,\n                                 decoder : Decoder<'Response>,\n                                 ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member put<'Data, 'Response>(url : string,\n                                        data : 'Data,\n                                        ?properties : RequestProperties list,\n                                        ?isCamelCase : bool,\n                                        ?extra: ExtraCoders,\n                                        [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                        [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPut<'Response>(url : string,\n                                    data : JsonValue,\n                                    decoder : Decoder<'Response>,\n                                    ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PUT** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPut<'Data, 'Response>(url : string,\n                                           data : 'Data,\n                                           ?properties : RequestProperties list,\n                                           ?isCamelCase : bool,\n                                           ?extra: ExtraCoders,\n                                           [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                           [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PUT\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PACTH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member patch<'Response>(url : string,\n                                   data : JsonValue,\n                                   decoder : Decoder<'Response>,\n                                   ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PATH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member patch<'Data, 'Response>(url : string,\n                                          data : 'Data,\n                                          ?properties : RequestProperties list,\n                                          ?isCamelCase : bool,\n                                          ?extra: ExtraCoders,\n                                          [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                          [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PATCH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPatch<'Response>(url : string,\n                                      data : JsonValue,\n                                      decoder : Decoder<'Response>,\n                                      ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **PATCH** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryPatch<'Data, 'Response>(url : string,\n                                             data : 'Data,\n                                             ?properties : RequestProperties list,\n                                             ?isCamelCase : bool,\n                                             ?extra: ExtraCoders,\n                                             [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                             [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.PATCH\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member delete<'Response>(url : string,\n                                    data : JsonValue,\n                                    decoder : Decoder<'Response>,\n                                    ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// An exception will be thrown if the decoder failed.\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<'Response>`\n    ///\n    /// **Exceptions**\n    ///   * `System.Exception` - Contains information explaining why the decoder failed\n    ///\n    static member delete<'Data, 'Response>(url : string,\n                                           data : 'Data,\n                                           ?properties : RequestProperties list,\n                                           ?isCamelCase : bool,\n                                           ?extra: ExtraCoders,\n                                           [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                           [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.fetchAs(url, responseDecoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `JsonValue`\n    ///   * `decoder` - parameter of type `Decoder<'Response>`\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryDelete<'Response>(url : string,\n                                       data : JsonValue,\n                                       decoder : Decoder<'Response>,\n                                       ?properties : RequestProperties list) =\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body (toJsonBody data) ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, decoder, properties = properties)\n\n\n    /// **Description**\n    ///\n    /// Send a **DELETE** request to the specified resource and apply the provided `decoder` to the response.\n    ///\n    /// This method set the `ContentType` header to `\"application/json\"`.\n    ///\n    /// An encoder will be generated or retrieved from the cache for the `'Data` type.\n    ///\n    /// A decoder will be generated or retrieved from the cache for the `'Response` type.\n    ///\n    /// If the decoder succeed, we return `Ok 'Response`.\n    ///\n    /// If the decoder failed, we return `Error \"explanation...\"`\n    ///\n    /// **Parameters**\n    ///   * `url` - parameter of type `string` - URL to request\n    ///   * `data` - parameter of type `'Data` - Data sent via the body, it will be converted to JSON before\n    ///   * `properties` - parameter of type `RequestProperties list option` - Parameters passed to fetch\n    ///   * `isCamelCase` - parameter of type `bool option` - Options passed to Thoth.Json to control JSON keys representation\n    ///   * `extra` - parameter of type `ExtraCoders option` - Options passed to Thoth.Json to extends the known coders\n    ///   * `responseResolver` - parameter of type `ITypeResolver<'Response> option` - Used by Fable to provide generic type info\n    ///   * `dataResolver` - parameter of type `ITypeResolver<'Data> option` - Used by Fable to provide generic type info\n    ///\n    /// **Output Type**\n    ///   * `JS.Promise<Result<'Response,string>>`\n    ///\n    /// **Exceptions**\n    ///\n    static member tryDelete<'Data, 'Response>(url : string,\n                                              data : 'Data,\n                                              ?properties : RequestProperties list,\n                                              ?isCamelCase : bool,\n                                              ?extra: ExtraCoders,\n                                              [<Inject>] ?responseResolver: ITypeResolver<'Response>,\n                                              [<Inject>] ?dataResolver: ITypeResolver<'Data>) =\n\n        let dataEncoder = Encode.Auto.generateEncoderCached<'Data>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = dataResolver)\n        let responseDecoder = Decode.Auto.generateDecoderCached<'Response>(?isCamelCase = isCamelCase, ?extra = extra, ?resolver = responseResolver)\n\n        let body =\n            data\n            |> dataEncoder\n            |> toJsonBody\n\n        let properties =\n            [ RequestProperties.Method HttpMethod.DELETE\n              requestHeaders [ ContentType \"application/json\" ]\n              RequestProperties.Body body ]\n            @ defaultArg properties []\n\n        Fetch.tryFetchAs(url, responseDecoder, properties = properties)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Icon =\n\n    type Option =\n        // Sizes\n        | Size of ISize\n        /// Add `is-left` class\n        | [<CompiledName(\"is-left\")>] IsLeft\n        /// Add `is-right` class\n        | [<CompiledName(\"is-right\")>] IsRight\n        // Extra\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <span class=\"icon\"></span>\n    let icon options children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            // Sizes\n            | Size size -> ofSize size |> result.AddClass\n            // Position\n            | IsLeft\n            | IsRight -> result.AddCaseName option\n            // Extra\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"icon\").ToReactElement(span, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\n\n[<RequireQualifiedAccess>]\nmodule Footer =\n\n    /// Generate <footer class=\"footer\"></footer>\n    let footer (options: GenericOption list) children =\n        GenericOptions.Parse(options, parseOptions, \"footer\").ToReactElement(footer, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\nopen Browser.Types\n\n[<RequireQualifiedAccess>]\nmodule Input =\n\n    module Classes =\n        let [<Literal>] Container = \"input\"\n        module State =\n            let [<Literal>] IsFocused = \"is-focused\"\n            let [<Literal>] IsActive = \"is-active\"\n            let [<Literal>] IsHovered = \"is-hovered\"\n            let [<Literal>] IsLoading = \"is-loading\"\n            let [<Literal>] IsStatic = \"is-static\"\n        module Styles =\n            let [<Literal>] IsRounded = \"is-rounded\"\n        module Size =\n            let [<Literal>] IsSmall = \"is-small\"\n            let [<Literal>] IsMedium = \"is-medium\"\n            let [<Literal>] IsLarge = \"is-large\"\n            let [<Literal>] IsFullwidth = \"is-fullwidth\"\n            let [<Literal>] IsInline = \"is-inline\"\n\n    type IInputType =\n        | Text\n        | Password\n        | DatetimeLocal\n        | Date\n        | Month\n        | Time\n        | Week\n        | Number\n        | Email\n        | Url\n        | Search\n        | Tel\n        | ColorType\n\n    type Option =\n        | Size of ISize\n        /// Set `Type` HTMLAttr\n        /// Don't use if you used one of the helpers like: `Input.password`\n        | Type of IInputType\n        | Color of IColor\n        /// Set `Id` HTMLAttr\n        | Id of string\n        /// Add `disabled` HTMLAttr if true\n        | Disabled of bool\n        /// Set `IsReadOnly` HTMLAttr\n        | IsReadOnly of bool\n        /// Add `is-static` class if true\n        | [<CompiledName(\"is-static\")>] IsStatic of bool\n        /// Add `is-rounded` class\n        | [<CompiledName(\"is-rounded\")>] IsRounded\n        /// Set `Value` HTMLAttr\n        | Value of string\n        | Key of string\n        /// Set `DefaultValue` HTMLAttr\n        | DefaultValue of string\n        /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n        | ValueOrDefault of string\n        /// Set `Placeholder` HTMLAttr\n        | Placeholder of string\n        | OnChange of (Event -> unit)\n        | Ref of (Element->unit)\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | Modifiers of Modifier.IModifier list\n\n    let private ofType (typ : IInputType) =\n        match typ with\n        | Text -> \"text\"\n        | Password -> \"password\"\n        | DatetimeLocal -> \"datetime-local\"\n        | Date -> \"date\"\n        | Month -> \"month\"\n        | Time -> \"time\"\n        | Week -> \"week\"\n        | Number -> \"number\"\n        | Email -> \"email\"\n        | Url -> \"url\"\n        | Search -> \"search\"\n        | Tel -> \"tel\"\n        | IInputType.ColorType -> \"color\"\n\n    open Fable.Core.JsInterop\n\n    /// Generate <input class=\"input\" />\n    let input (options : Option list) =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | IsStatic state -> if state then result.AddCaseName option else result\n            | IsRounded -> result.AddCaseName option\n            | Size size -> ofSize size |> result.AddClass\n            | Color color -> ofColor color |> result.AddClass\n            | Type type' -> Props.Type (ofType type') |> result.AddProp\n            | Id id -> Props.Id id |> result.AddProp\n            | Disabled disabled -> Props.Disabled disabled |> result.AddProp\n            | IsReadOnly state -> Props.ReadOnly state |> result.AddProp\n            | Value value -> Props.Value value |> result.AddProp\n            | DefaultValue defaultValue -> Props.DefaultValue defaultValue |> result.AddProp\n            | ValueOrDefault valueOrDefault ->\n                Props.Ref <| (fun e ->\n                    if e |> isNull |> not\n                        && !!e?value <> valueOrDefault then\n                        e?value <- valueOrDefault\n                ) |> result.AddProp\n            | Placeholder placeholder -> Props.Placeholder placeholder |> result.AddProp\n            | OnChange cb -> Props.OnChange cb |> result.AddProp\n            | Ref ref -> Props.Ref ref |> result.AddProp\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n            | Key k -> Props.Prop.Key k |> result.AddProp\n\n        GenericOptions.Parse(options, parseOptions, \"input\").ToReactElement(input)\n\n    /// Generate <input type=\"text\" class=\"input\" />\n    let inline text options = input (Type Text :: options)\n    /// Generate <input type=\"password\" class=\"input\" />\n    let inline password options = input (Type Password :: options)\n    /// Generate <input type=\"datetime-local\" class=\"input\" />\n    let inline datetimeLocal options = input (Type DatetimeLocal :: options)\n    /// Generate <input type=\"date\" class=\"input\" />\n    let inline date options = input (Type Date :: options)\n    /// Generate <input type=\"month\" class=\"input\" />\n    let inline month options = input (Type Month :: options)\n    /// Generate <input type=\"time\" class=\"input\" />\n    let inline time options = input (Type Time :: options)\n    /// Generate <input type=\"week\" class=\"input\" />\n    let inline week options = input (Type Week :: options)\n    /// Generate <input type=\"number\" class=\"input\" />\n    let inline number options = input (Type Number :: options)\n    /// Generate <input type=\"email\" class=\"input\" />\n    let inline email options = input (Type Email :: options)\n    /// Generate <input type=\"url\" class=\"input\" />\n    let inline url options = input (Type Url :: options)\n    /// Generate <input type=\"search\" class=\"input\" />\n    let inline search options = input (Type Search :: options)\n    /// Generate <input type=\"tel\" class=\"input\" />\n    let inline tel options = input (Type Tel :: options)\n    /// Generate <input type=\"color\" class=\"input\" />\n    let inline color options = input (Type IInputType.ColorType :: options)\n","namespace Fable.FontAwesome\n\nopen Fable.Core\nopen Fable.React\nopen Fable.React.Props\n\nmodule internal Helpers =\n\n    let classes std (options : string option list) (booleans: (string * bool) list) =\n        let std = (std, options) ||> List.fold (fun complete opt ->\n            match opt with Some name -> complete + \" \" + name | None -> complete)\n        (std, booleans) ||> List.fold (fun complete (name, flag) ->\n            if flag then complete + \" \" + name else complete)\n        |> ClassName :> IHTMLProp\n\n[<RequireQualifiedAccess>]\nmodule Fa =\n\n    module Classes =\n        module Size =\n            let [<Literal>] FaExtraSmall = \"fa-xs\"\n            let [<Literal>] FaSmall = \"fa-sm\"\n            let [<Literal>] FaLarge = \"fa-lg\"\n            let [<Literal>] Fa2x = \"fa-2x\"\n            let [<Literal>] Fa3x = \"fa-3x\"\n            let [<Literal>] Fa4x = \"fa-4x\"\n            let [<Literal>] Fa5x = \"fa-5x\"\n            let [<Literal>] Fa6x = \"fa-6x\"\n            let [<Literal>] Fa7x = \"fa-7x\"\n            let [<Literal>] Fa8x = \"fa-8x\"\n            let [<Literal>] Fa9x = \"fa-9x\"\n            let [<Literal>] Fa10 = \"fa-10x\"\n\n        module Style =\n            let [<Literal>] FixedWidth = \"fa-fw\"\n            let [<Literal>] IsLi = \"fa-li\"\n            let [<Literal>] Border = \"fa-border\"\n            let [<Literal>] Inverse = \"fa-inverse\"\n\n        module Rotations =\n            let [<Literal>] Rotate90 = \"fa-rotate-90\"\n            let [<Literal>] Rotate180 = \"fa-rotate-180\"\n            let [<Literal>] Rotate270 = \"fa-rotate-270\"\n\n        module Flips =\n            let [<Literal>] Horizontal = \"fa-flip-horizontal\"\n            let [<Literal>] Vertical = \"fa-flip-vertical\"\n\n        module Animations =\n            let [<Literal>] Spin = \"fa-spin\"\n            let [<Literal>] Pulse = \"fa-pulse\"\n\n        module Pull =\n            let [<Literal>] Right = \"fa-pull-right\"\n            let [<Literal>] Left = \"fa-pull-left\"\n\n        module Stack =\n\n            let [<Literal>] Container = \"fa-stack\"\n\n            module Size =\n                let [<Literal>] Fa1x = \"fa-stack-1x\"\n                let [<Literal>] Fa2x = \"fa-stack-2x\"\n\n    type ISize =\n        | FaExtraSmall\n        | FaSmall\n        | FaLarge\n        | Fa2x\n        | Fa3x\n        | Fa4x\n        | Fa5x\n        | Fa6x\n        | Fa7x\n        | Fa8x\n        | Fa9x\n        | Fa10\n\n    type IconOption =\n        | Size of ISize\n        | Border\n        | PullLeft\n        | PullRight\n        | Inverse\n        | Rotate90\n        | Rotate180\n        | Rotate270\n        | FlipHorizontal\n        | FlipVertical\n        | IsLi\n        | Icon of string\n        | Spin\n        | Pulse\n        | Props of IHTMLProp list\n        | CustomClass of string\n        | FixedWidth\n        | Stack1x\n        | Stack2x\n\n    let internal ofSize (size : ISize) =\n        match size with\n        | FaExtraSmall -> Classes.Size.FaExtraSmall\n        | FaSmall -> Classes.Size.FaSmall\n        | FaLarge -> Classes.Size.FaLarge\n        | Fa2x -> Classes.Size.Fa2x\n        | Fa3x -> Classes.Size.Fa3x\n        | Fa4x -> Classes.Size.Fa4x\n        | Fa5x -> Classes.Size.Fa5x\n        | Fa6x -> Classes.Size.Fa6x\n        | Fa7x -> Classes.Size.Fa7x\n        | Fa8x -> Classes.Size.Fa8x\n        | Fa9x -> Classes.Size.Fa9x\n        | Fa10 -> Classes.Size.Fa10\n\n    type IconOptions =\n        { Icon : string option\n          Size : string option\n          Border : string option\n          Pull : string option\n          HaveSpin : bool\n          HavePulse : bool\n          Rotation : string option\n          Flip : string option\n          IsInverse : bool\n          Props : IHTMLProp list\n          FixedWidth : bool\n          IsLi : bool\n          StackSize : string option\n          CustomClass : string option }\n\n        static member Empty =\n            { Icon = None\n              Size = None\n              Border = None\n              Pull = None\n              HaveSpin = false\n              HavePulse = false\n              Rotation = None\n              Flip = None\n              IsInverse = false\n              Props = [ ]\n              FixedWidth = false\n              IsLi = false\n              StackSize = None\n              CustomClass = None }\n\n    let toIconOptions (faOptions: IconOption list) =\n        let parseOptions (result: IconOptions) (option: IconOption) =\n            match option with\n            | Size s ->\n                { result with Size = ofSize s |> Some }\n            | Border ->\n                { result with Border = Some Classes.Style.Border }\n            | PullLeft ->\n                { result with Pull = Some Classes.Pull.Left }\n            | PullRight ->\n                { result with Pull = Some Classes.Pull.Right }\n            | Inverse ->\n                { result with IsInverse = true }\n            | Icon faIcon ->\n                { result with Icon = faIcon |> Some }\n            | Rotate90 ->\n                { result with Rotation = Classes.Rotations.Rotate90 |> Some }\n            | Rotate180 ->\n                { result with Rotation = Classes.Rotations.Rotate180 |> Some }\n            | Rotate270 ->\n                { result with Rotation = Classes.Rotations.Rotate270 |> Some }\n            | FlipHorizontal ->\n                { result with Rotation = Classes.Flips.Horizontal |> Some }\n            | FlipVertical ->\n                { result with Rotation = Classes.Flips.Vertical |> Some }\n            | Spin ->\n                { result with HaveSpin = true }\n            | Pulse ->\n                { result with HavePulse = true }\n            | Props props ->\n                { result with Props = props }\n            | FixedWidth ->\n                { result with FixedWidth = true }\n            | IsLi ->\n                { result with IsLi = true }\n            | CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack1x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa1x }\n            | Stack2x ->\n                { result with StackSize = Some Classes.Stack.Size.Fa2x }\n\n        faOptions |> List.fold parseOptions IconOptions.Empty\n\n    /// Logic used to display one icon alone or as one item in an unordered list:\n    let internal displayIcon baseElement baseClass (opts: IconOptions) children  =\n        let classes =\n            Helpers.classes baseClass\n                [ opts.Icon\n                  opts.Size\n                  opts.Border\n                  opts.Pull\n                  opts.Rotation\n                  opts.Flip\n                  opts.CustomClass\n                  opts.StackSize ]\n                [ Classes.Style.FixedWidth, opts.FixedWidth\n                  Classes.Style.IsLi, opts.IsLi\n                  Classes.Animations.Pulse, opts.HavePulse\n                  Classes.Animations.Spin, opts.HaveSpin\n                  Classes.Style.Inverse, opts.IsInverse ]\n\n        baseElement (classes::opts.Props)\n          children\n\n    let ul props children =\n        ul [ ClassName \"fa-ul\" ]\n            children\n\n    let ol props children =\n        ol [ ClassName \"fa-ul\" ]\n            children\n\n    let i (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon i \"\" opts children\n\n    let span (faOptions: IconOption list) children =\n        let opts = toIconOptions faOptions\n        displayIcon span \"\" opts children\n\n    module Stack =\n        type Option =\n            | Size of ISize\n            | CustomClass of string\n            | Props of IHTMLProp list\n\n        type internal Options =\n            { Size : string option\n              Props : IHTMLProp list\n              CustomClass : string option }\n\n            static member Empty =\n                { Size = None\n                  Props = [ ]\n                  CustomClass = None }\n\n\n    let stack options children =\n        let parseOption (result : Stack.Options) opt =\n            match opt with\n            | Stack.Size size ->\n                { result with Size = ofSize size |> Some }\n            | Stack.CustomClass customClass ->\n                { result with CustomClass = Some customClass }\n            | Stack.Props props ->\n                { result with Props = props }\n\n        let opts = options |> List.fold parseOption Stack.Options.Empty\n        let classes = Helpers.classes\n                        Classes.Stack.Container\n                        ( opts.Size\n                            :: opts.CustomClass\n                            :: [] )\n                        [ ]\n\n        Fable.React.Standard.span (classes::opts.Props)\n            children\n","module App\r\n\r\nopen Elmish\r\n\r\nopen Fable\r\nopen Fable.FontAwesome\r\nopen Fable.Core.JsInterop\r\nopen Fable.React\r\nopen Fable.React.Props\r\nopen Fable.Recharts\r\nopen Fable.Recharts.Props\r\n\r\nopen Thoth.Json\r\nopen Thoth.Fetch\r\n\r\nopen Fulma\r\n\r\nopen Shared\r\n\r\n/// The different elements of the completed report.\r\ntype Report =\r\n    { Location : LocationResponse\r\n      Crimes : CrimeResponse array \r\n      Weather : WeatherResponse\r\n      }\r\n\r\ntype ServerState = Idle | Loading | ServerError of string\r\n\r\n/// The overall data model driving the view.\r\ntype Model =\r\n    { Postcode : string\r\n      ValidationError : string option\r\n      ServerState : ServerState\r\n      Report : Report option \r\n      }\r\n\r\n/// The different types of messages in the system.\r\ntype Msg =\r\n    | GetReport\r\n    | PostcodeChanged of string\r\n    | GotReport of Report\r\n    | ErrorMsg of exn\r\n    | Clear\r\n\r\n/// The init function is called to start the message pump with an initial view.\r\nlet init () =\r\n    { Postcode = null\r\n      Report = None\r\n      ValidationError = None\r\n      ServerState = Idle }, Cmd.ofMsg (PostcodeChanged \"\")\r\n\r\nlet decoderForLatLong =\r\n        Decode.object (fun get ->\r\n            {\r\n                Latitude = get.Required.Field \"Latitude\" Decode.float\r\n                Longitude = get.Required.Field \"Longitude\" Decode.float\r\n            }\r\n        )\r\n\r\nlet decoderForLocation =\r\n    Decode.object (fun get ->\r\n        {\r\n            Town = get.Required.Field \"Town\" Decode.string\r\n            Region = get.Required.Field \"Region\" Decode.string\r\n            LatLong = get.Required.Field \"LatLong\" decoderForLatLong\r\n        }\r\n    )\r\n\r\nlet decoderForLocationResponse : (string -> obj -> Result<LocationResponse, _>) =\r\n    Decode.object (fun get ->\r\n        {\r\n            Postcode = get.Required.Field \"Postcode\" Decode.string\r\n            Location = get.Required.Field \"Location\" decoderForLocation\r\n            DistanceToLondon = get.Required.Field \"DistanceToLondon\" Decode.float\r\n        }\r\n    )\r\n\r\nlet decoderForCrimeResponse =\r\n    Decode.object (fun get ->\r\n        [| {\r\n            Crime = get.Required.Field \"Crime\" Decode.string\r\n            Incidents =  get.Required.Field \"Incidents\" Decode.int\r\n        } |]\r\n    )\r\n\r\nlet decoderForWeatherResponse =\r\n    Decode.object (fun get ->\r\n        {\r\n            WeatherType = get.Required.Field \"WeatherType\" Decode.string |> WeatherType.Parse\r\n            AverageTemperature = get.Required.Field \"AverageTemperature\" Decode.float\r\n        }\r\n    )\r\n\r\n//let inline getJson<'T> (response: Fetch.Types.Response) = \r\n//    response.text() \r\n//    |> Promise.map  Thoth.Json.Decode.Auto.unsafeFromString<'T>\r\n\r\nlet getResponse postcode = promise {\r\n    let! location =\r\n        Fetch.tryPost (\"/api/distance\", postcode, decoderForLocationResponse)\r\n        |> Promise.map  (Result.defaultValue {\r\n                    Postcode = \"\"\r\n                    Location = {Town = \"\"; Region = \"\"; LatLong = {Latitude = 0.; Longitude = 0.}}\r\n                    DistanceToLondon = 0.\r\n                }\r\n        )\r\n    let! crimes =\r\n        Fetch.tryFetchAs ((sprintf \"api/crime/%s\" postcode), decoderForCrimeResponse)\r\n        |> Promise.map  (Result.defaultValue [||])\r\n    let! weather =\r\n        Fetch.tryFetchAs ((sprintf \"api/weather/%s\" postcode), decoderForWeatherResponse)\r\n        |> Promise.map (Result.defaultValue { WeatherType = WeatherType.Clear; AverageTemperature = 0. })\r\n    \r\n    (* Task 4.5 WEATHER: Fetch the weather from the API endpoint you created.\r\n       Then, save its value into the Report below. You'll need to add a new\r\n       field to the Report type first, though! *)\r\n\r\n    return { Location = location ; Crimes = crimes; Weather = weather } }\r\n\r\n/// The update function knows how to update the model given a message.\r\nlet update msg model =\r\n    match model, msg with\r\n    | { ValidationError = None; Postcode = postcode }, GetReport ->\r\n        { model with ServerState = Loading }, Cmd.OfPromise.either getResponse postcode GotReport ErrorMsg\r\n    | _, GetReport -> model, Cmd.none\r\n    | _, GotReport response ->\r\n        { model with\r\n            ValidationError = None\r\n            Report = Some response\r\n            ServerState = Idle }, Cmd.none\r\n    | _, PostcodeChanged p ->\r\n        { model with\r\n            Postcode = p\r\n            (* Task 2.2 Validation. Use the Validation.validatePostcode function to implement client-side form validation.\r\n               Note that the validation is the same shared code that runs on the server! *)\r\n            ValidationError =\r\n            if Validation.isValidPostcode p then\r\n                None\r\n            else\r\n                Some \"invalid post code\"\r\n                }, Cmd.none\r\n    | _, ErrorMsg e -> { model with ServerState = ServerError e.Message }, Cmd.none\r\n    | _, Clear -> init()\r\n\r\n[<AutoOpen>]\r\nmodule ViewParts =\r\n    let basicTile title options content =\r\n        Tile.tile options [\r\n            Notification.notification [ Notification.Props [ Style [ Height \"100%\"; Width \"100%\" ] ] ]\r\n                (Heading.h2 [] [ str title ] :: content)\r\n        ]\r\n    let childTile title content =\r\n        Tile.child [ ] [\r\n            Notification.notification [ Notification.Props [ Style [ Height \"100%\"; Width \"100%\" ] ] ]\r\n                (Heading.h2 [ ] [ str title ] :: content)\r\n        ]\r\n\r\n    let crimeTile crimes =\r\n        let cleanData = crimes |> Array.map (fun c -> { c with Crime = c.Crime.[0..0].ToUpper() + c.Crime.[1..].Replace('-', ' ') } )\r\n        basicTile \"Crime\" [ ] [\r\n            barChart\r\n                [ Chart.Data cleanData\r\n                  Chart.Width 600.\r\n                  Chart.Height 500.\r\n                  Chart.Layout Vertical ]\r\n                [ xaxis [ Cartesian.Type \"number\" ] []\r\n                  yaxis [ Cartesian.Type \"category\"; Cartesian.DataKey \"Crime\"; Cartesian.Width 200. ] []\r\n                  bar [ Cartesian.DataKey \"Incidents\" ] [] ]\r\n        ]\r\n\r\n    let getBingMapUrl latLong =\r\n        sprintf \"https://www.bing.com/maps/embed?h=400&w=800&cp=%f~%f&lvl=11&typ=s&FORM=MBEDV8\" latLong.Latitude latLong.Longitude\r\n\r\n    let bingMapTile (latLong:LatLong) =\r\n        basicTile \"Map\" [ Tile.Size Tile.Is12 ] [\r\n            iframe [\r\n                Style [ Height 410; Width 810 ]\r\n                Src (getBingMapUrl latLong)\r\n                (* Task 3.1 MAPS: Use the getBingMapUrl function to build a valid maps URL using the supplied LatLong.\r\n                   You can use it to add a Src attribute to this iframe. *)\r\n            ] [ ]\r\n        ]\r\n\r\n    let weatherTile weatherReport =\r\n        childTile \"Weather\" [\r\n            Level.level [ ] [\r\n                Level.item [ Level.Item.HasTextCentered ] [\r\n                    div [ ] [\r\n                        Level.heading [ ] [\r\n                            Image.image [ Image.Is128x128 ] [\r\n                                img [ Src(sprintf \"https://www.metaweather.com/static/img/weather/%s.svg\" weatherReport.WeatherType.Abbreviation) ]\r\n                            ]\r\n                        ]\r\n                        Level.title [ ] [\r\n                            Heading.h3 [ Heading.Is4; Heading.Props [ Style [ Width \"100%\" ] ] ] [\r\n                                (* Task 4.8 WEATHER: Get the temperature from the given weather report\r\n                                   and display it here instead of an empty string. *)\r\n                                str <| sprintf \"Temperature %s°\" (weatherReport.AverageTemperature.ToString(\"F0\"))\r\n                            ]\r\n                        ]\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n    let locationTile model =\r\n        childTile \"Location\" [\r\n            div [ ] [\r\n                Heading.h3 [ ] [ str model.Location.Location.Town ]\r\n                Heading.h4 [ ] [ str model.Location.Location.Region ]\r\n                Heading.h4 [ ] [ sprintf \"%.1fKM to London\" model.Location.DistanceToLondon |> str ]\r\n            ]\r\n        ]\r\n\r\n\r\n/// The view function knows how to render the UI given a model, as well as to dispatch new messages based on user actions.\r\nlet view model dispatch =\r\n    div [] [\r\n        Hero.hero [ Hero.Color Color.IsInfo ] [\r\n            Hero.body [ ] [\r\n                Container.container [ Container.IsFluid\r\n                                      Container.Modifiers [ Modifier.TextAlignment (Screen.All, TextAlignment.Centered) ] ] [\r\n                    Heading.h1 [ ] [\r\n                        str \"UK Location Data Mashup\"\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n\r\n        Container.container [] [\r\n            yield\r\n                Field.div [] [\r\n                    Label.label [] [ str \"Postcode\" ]\r\n                    Control.div [ Control.HasIconLeft; Control.HasIconRight ] [\r\n                        Input.text\r\n                            [ Input.Placeholder \"Ex: EC2A 4NE\"\r\n                              Input.Value model.Postcode\r\n                              Input.Modifiers [ Modifier.TextTransform TextTransform.UpperCase ]\r\n                              Input.Color (if model.ValidationError.IsSome then Color.IsDanger else Color.IsSuccess)\r\n                              Input.Props [ OnChange (fun ev -> dispatch (PostcodeChanged !!ev.target?value)); onKeyDown KeyCode.enter (fun _ -> dispatch GetReport) ] ]\r\n                        Fulma.Icon.icon [ Icon.Size IsSmall; Icon.IsLeft ] [ Fa.i [ Fa.Solid.Home ] [] ]\r\n                        (match model with\r\n                         | { ValidationError = Some _ } ->\r\n                            Icon.icon [ Icon.Size IsSmall; Icon.IsRight ] [ Fa.i [ Fa.Solid.Exclamation ] [] ]\r\n                         | { ValidationError = None } ->\r\n                            Icon.icon [ Icon.Size IsSmall; Icon.IsRight ] [ Fa.i [ Fa.Solid.Check ] [] ])\r\n                    ]\r\n                    Help.help\r\n                       [ Help.Color (if model.ValidationError.IsNone then IsSuccess else IsDanger) ]\r\n                       [ str (model.ValidationError |> Option.defaultValue \"\") ]\r\n                ]\r\n            yield\r\n                Field.div [ Field.IsGrouped ] [\r\n                    Level.level [ ] [\r\n                        Level.left [] [\r\n                            Level.item [] [\r\n                                Button.button\r\n                                    [ Button.IsFullWidth\r\n                                      Button.Color IsPrimary\r\n                                      Button.OnClick (fun _ -> dispatch GetReport)\r\n                                      Button.Disabled (model.ValidationError.IsSome)\r\n                                      Button.IsLoading (model.ServerState = ServerState.Loading) ]\r\n                                    [ str \"Submit\" ] ] ] ]\r\n                    str \"\\u00a0\"  //&nbsp;\r\n                    Button.button\r\n                        [ \r\n                          Button.Color IsPrimary\r\n                          Button.OnClick (fun _ -> dispatch Clear)\r\n                          Button.Disabled (model.ValidationError.IsSome)\r\n                          ]\r\n                        [ str \"Clear\" ]\r\n\r\n                ]\r\n\r\n            match model with\r\n            | { Report = None; ServerState = (Idle | Loading) } -> ()\r\n            | { ServerState = ServerError error } ->\r\n                yield\r\n                    Field.div [] [\r\n                        Tag.list [ Tag.List.HasAddons; Tag.List.IsCentered ] [\r\n                            Tag.tag [ Tag.Color Color.IsDanger; Tag.Size IsMedium ] [\r\n                                str error\r\n                            ]\r\n                        ]\r\n                    ]\r\n            | { Report = Some model } ->\r\n                yield\r\n                    Tile.ancestor [ ] [\r\n                        Tile.parent [ Tile.Size Tile.Is12 ] [\r\n                            bingMapTile model.Location.Location.LatLong\r\n                        ]\r\n                    ]\r\n                yield\r\n                    Tile.ancestor [ ] [\r\n                        Tile.parent [ Tile.IsVertical; Tile.Size Tile.Is4 ] [\r\n                            locationTile model\r\n                            weatherTile model.Weather\r\n                            (* Task 4.6 WEATHER: Generate the view code for the weather tile\r\n                               using the weatherTile function, supplying the weather report\r\n                               from the model, and include it here as part of the list *)\r\n                        ]\r\n                        Tile.parent [ Tile.Size Tile.Is8 ] [\r\n                            crimeTile model.Crimes\r\n                        ]\r\n                  ]\r\n        ]\r\n\r\n        br [ ]\r\n\r\n        Footer.footer [] [\r\n            Content.content\r\n                [ Content.Modifiers [ Fulma.Modifier.TextAlignment(Screen.All, TextAlignment.Centered) ] ]\r\n                [ safeComponents ]\r\n        ]\r\n    ]","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","(**\nProgram\n---------\nCore abstractions for creating and running the dispatch loop.\n\n*)\n\nnamespace Elmish\n\n\n/// Program type captures various aspects of program behavior\ntype Program<'arg, 'model, 'msg, 'view> = private {\n    init : 'arg -> 'model * Cmd<'msg>\n    update : 'msg -> 'model -> 'model * Cmd<'msg>\n    subscribe : 'model -> Cmd<'msg>\n    view : 'model -> Dispatch<'msg> -> 'view\n    setState : 'model -> Dispatch<'msg> -> unit\n    onError : (string*exn) -> unit\n    syncDispatch: Dispatch<'msg> -> Dispatch<'msg>\n}\n\n/// Program module - functions to manipulate program instances\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Program =\n    /// Typical program, new commands are produced by `init` and `update` along with the new state.\n    let mkProgram \n        (init : 'arg -> 'model * Cmd<'msg>) \n        (update : 'msg -> 'model -> 'model * Cmd<'msg>)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init\n          update = update\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Simple program that produces only new state with `init` and `update`.\n    let mkSimple \n        (init : 'arg -> 'model) \n        (update : 'msg -> 'model -> 'model)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init >> fun state -> state,Cmd.none\n          update = fun msg -> update msg >> fun state -> state,Cmd.none\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Subscribe to external source of events.\n    /// The subscription is called once - with the initial model, but can dispatch new messages at any time.\n    let withSubscription (subscribe : 'model -> Cmd<'msg>) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let sub model =\n            Cmd.batch [ program.subscribe model\n                        subscribe model ]\n        { program with subscribe = sub }\n\n    /// Trace all the updates to the console\n    let withConsoleTrace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let traceInit (arg:'arg) =\n            let initModel,cmd = program.init arg\n            Log.toConsole (\"Initial state:\", initModel)\n            initModel,cmd\n\n        let traceUpdate msg model =\n            Log.toConsole (\"New message:\", msg)\n            let newModel,cmd = program.update msg model\n            Log.toConsole (\"Updated state:\", newModel)\n            newModel,cmd\n\n        { program with\n            init = traceInit \n            update = traceUpdate }\n\n    /// Trace all the messages as they update the model\n    let withTrace trace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let update msg model =\n            let state,cmd = program.update msg model\n            trace msg state\n            state,cmd\n        { program\n            with update = update }\n\n    /// Handle dispatch loop exceptions\n    let withErrorHandler onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = onError }\n\n    /// For library authors only: map existing error handler and return new `Program` \n    let mapErrorHandler map (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = map program.onError }\n\n    /// For library authors only: function to render the view with the latest state \n    let withSetState (setState:'model -> Dispatch<'msg> -> unit)\n                     (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with setState = setState }\n\n    /// For library authors only: return the function to render the state \n    let setState (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.setState\n\n    /// For library authors only: return the view function \n    let view (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.view\n\n    /// For library authors only: function to synchronize the dispatch function\n    let withSyncDispatch (syncDispatch:Dispatch<'msg> -> Dispatch<'msg>)\n                         (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with syncDispatch = syncDispatch }\n\n    /// For library authors only: map the program type\n    let map mapInit mapUpdate mapView mapSetState mapSubscribe\n            (program: Program<'arg, 'model, 'msg, 'view>) =\n        { init = mapInit program.init\n          update = mapUpdate program.update\n          view = mapView program.view\n          setState = mapSetState program.setState\n          subscribe = mapSubscribe program.subscribe\n          onError = program.onError\n          syncDispatch = id }\n\n    /// Start the program loop.\n    /// arg: argument to pass to the init() function.\n    /// program: program created with 'mkSimple' or 'mkProgram'.\n    let runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let (model,cmd) = program.init arg\n        let rb = RingBuffer 10\n        let mutable reentered = false\n        let mutable state = model        \n        let rec dispatch msg = \n            if reentered then\n                rb.Push msg\n            else\n                reentered <- true\n                let mutable nextMsg = Some msg\n                while Option.isSome nextMsg do\n                    let msg = nextMsg.Value\n                    try\n                        let (model',cmd') = program.update msg state\n                        program.setState model' syncDispatch\n                        cmd' |> Cmd.exec syncDispatch\n                        state <- model'\n                    with ex ->\n                        program.onError (sprintf \"Unable to process the message: %A\" msg, ex)\n                    nextMsg <- rb.Pop()\n                reentered <- false\n        and syncDispatch = program.syncDispatch dispatch            \n\n        program.setState model syncDispatch\n        let sub = \n            try \n                program.subscribe model \n            with ex ->\n                program.onError (\"Unable to subscribe:\", ex)\n                Cmd.none\n        sub @ cmd |> Cmd.exec syncDispatch\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let run (program: Program<unit, 'model, 'msg, 'view>) = runWith () program\n","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n","module Client\r\n\r\nopen Elmish\r\nopen Elmish.React\r\nopen App\r\n \r\n#if DEBUG\r\nopen Elmish.Debug\r\nopen Elmish.HMR\r\n#endif\r\n\r\nProgram.mkProgram init update view\r\n#if DEBUG\r\n|> Program.withConsoleTrace\r\n|> Program.withDebugger\r\n#endif\r\n|> Program.withReactBatched \"elmish-app\"\r\n#if DEBUG\r\n|> Program.withDebugger\r\n#endif\r\n|> Program.run","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Help =\n\n    type Option =\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Color of IColor\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <p class=\"help\"></p>\n    let help (options : Option list) children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            | Color color -> ofColor color |> result.AddClass\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"help\").ToReactElement(p, children)\n","namespace Fulma\n\nopen Fulma\nopen Fable.React\nopen Fable.React.Props\n\n[<RequireQualifiedAccess>]\nmodule Image =\n\n    type Option =\n        // Size\n\n        /// Add `is-16x16` class\n        | [<CompiledName(\"is-16x16\")>] Is16x16\n        /// Add `is-24x24` class\n        | [<CompiledName(\"is-24x24\")>] Is24x24\n        /// Add `is-32x32` class\n        | [<CompiledName(\"is-32x32\")>] Is32x32\n        /// Add `is-48x48` class\n        | [<CompiledName(\"is-48x48\")>] Is48x48\n        /// Add `is-64x64` class\n        | [<CompiledName(\"is-64x64\")>] Is64x64\n        /// Add `is-96x96` class\n        | [<CompiledName(\"is-96x96\")>] Is96x96\n        /// Add `is-128x128` class\n        | [<CompiledName(\"is-128x128\")>] Is128x128\n        /// Add `is-square` class\n        | [<CompiledName(\"is-square\")>] IsSquare\n        /// Add `is-1by1` class\n        | [<CompiledName(\"is-1by1\")>] Is1by1\n        /// Add `is-5by4` class\n        | [<CompiledName(\"is-5by4\")>] Is5by4\n        /// Add `is-4by3` class\n        | [<CompiledName(\"is-4by3\")>] Is4by3\n        /// Add `is-3by2` class\n        | [<CompiledName(\"is-3by2\")>] Is3by2\n        /// Add `is-5by3` class\n        | [<CompiledName(\"is-5by3\")>] Is5by3\n        /// Add `is-16by9` class\n        | [<CompiledName(\"is-16by9\")>] Is16by9\n        /// Add `is-2by1` class\n        | [<CompiledName(\"is-2by1\")>] Is2by1\n        /// Add `is-3by1` class\n        | [<CompiledName(\"is-3by1\")>] Is3by1\n        /// Add `is-4by5` class\n        | [<CompiledName(\"is-4by5\")>] Is4by5\n        /// Add `is-3by4` class\n        | [<CompiledName(\"is-3by4\")>] Is3by4\n        /// Add `is-2by3` class\n        | [<CompiledName(\"is-2by3\")>] Is2by3\n        /// Add `is-3by5` class\n        | [<CompiledName(\"is-3by5\")>] Is3by5\n        /// Add `is-9by16` class\n        | [<CompiledName(\"is-9by16\")>] Is9by16\n        /// Add `is-1by2` class\n        | [<CompiledName(\"is-1by2\")>] Is1by2\n        /// Add `is-1by3` class\n        | [<CompiledName(\"is-1by3\")>] Is1by3\n        // Extra\n        | CustomClass of string\n        | Props of IHTMLProp list\n        | Modifiers of Modifier.IModifier list\n\n    /// Generate <figure class=\"image\"></figure>\n    let image options children =\n        let parseOptions (result : GenericOptions) option =\n            match option with\n            // Size\n            | Is16x16\n            | Is24x24\n            | Is32x32\n            | Is48x48\n            | Is64x64\n            | Is96x96\n            | Is128x128\n            // Ratio\n            | IsSquare\n            | Is1by1\n            | Is5by4\n            | Is4by3\n            | Is3by2\n            | Is5by3\n            | Is16by9\n            | Is2by1\n            | Is3by1\n            | Is4by5\n            | Is3by4\n            | Is2by3\n            | Is3by5\n            | Is9by16\n            | Is1by2\n            | Is1by3 -> result.AddCaseName option\n            // Extra\n            | Props props -> result.AddProps props\n            | CustomClass customClass -> result.AddClass customClass\n            | Modifiers modifiers -> result.AddModifiers modifiers\n\n        GenericOptions.Parse(options, parseOptions, \"image\").ToReactElement(figure, children)\n"],"sourceRoot":""}